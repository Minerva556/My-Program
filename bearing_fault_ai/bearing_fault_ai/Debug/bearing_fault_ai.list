
bearing_fault_ai.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006704  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00010b30  080068c0  080068c0  000078c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080173f0  080173f0  0001905c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080173f0  080173f0  000183f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080173f8  080173f8  0001905c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080173f8  080173f8  000183f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080173fc  080173fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08017400  00019000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc4  2000005c  0801745c  0001905c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20005c20  0801745c  00019c20  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0001905c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000142a2  00000000  00000000  0001908c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000287d  00000000  00000000  0002d32e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001060  00000000  00000000  0002fbb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c88  00000000  00000000  00030c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002feec  00000000  00000000  00031898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012b75  00000000  00000000  00061784  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001222e0  00000000  00000000  000742f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000087  00000000  00000000  001965d9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000468c  00000000  00000000  00196660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  0019acec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000005c 	.word	0x2000005c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	080068a8 	.word	0x080068a8

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000060 	.word	0x20000060
 80001f8:	080068a8 	.word	0x080068a8

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295
 800020c:	f04f 30ff 	movne.w	r0, #4294967295
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b08c      	sub	sp, #48	@ 0x30
 800052c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800052e:	f107 031c 	add.w	r3, r7, #28
 8000532:	2200      	movs	r2, #0
 8000534:	601a      	str	r2, [r3, #0]
 8000536:	605a      	str	r2, [r3, #4]
 8000538:	609a      	str	r2, [r3, #8]
 800053a:	60da      	str	r2, [r3, #12]
 800053c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800053e:	4b30      	ldr	r3, [pc, #192]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000540:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000542:	4a2f      	ldr	r2, [pc, #188]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000544:	f043 0302 	orr.w	r3, r3, #2
 8000548:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800054a:	4b2d      	ldr	r3, [pc, #180]	@ (8000600 <MX_GPIO_Init+0xd8>)
 800054c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800054e:	f003 0302 	and.w	r3, r3, #2
 8000552:	61bb      	str	r3, [r7, #24]
 8000554:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000556:	4b2a      	ldr	r3, [pc, #168]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000558:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800055a:	4a29      	ldr	r2, [pc, #164]	@ (8000600 <MX_GPIO_Init+0xd8>)
 800055c:	f043 0301 	orr.w	r3, r3, #1
 8000560:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000562:	4b27      	ldr	r3, [pc, #156]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000564:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	617b      	str	r3, [r7, #20]
 800056c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800056e:	4b24      	ldr	r3, [pc, #144]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000572:	4a23      	ldr	r2, [pc, #140]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000574:	f043 0304 	orr.w	r3, r3, #4
 8000578:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800057a:	4b21      	ldr	r3, [pc, #132]	@ (8000600 <MX_GPIO_Init+0xd8>)
 800057c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800057e:	f003 0304 	and.w	r3, r3, #4
 8000582:	613b      	str	r3, [r7, #16]
 8000584:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000586:	4b1e      	ldr	r3, [pc, #120]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000588:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800058a:	4a1d      	ldr	r2, [pc, #116]	@ (8000600 <MX_GPIO_Init+0xd8>)
 800058c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000590:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000592:	4b1b      	ldr	r3, [pc, #108]	@ (8000600 <MX_GPIO_Init+0xd8>)
 8000594:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000596:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800059a:	60fb      	str	r3, [r7, #12]
 800059c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 800059e:	f001 fb2f 	bl	8001c00 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80005a2:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_GPIO_Init+0xd8>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005a6:	4a16      	ldr	r2, [pc, #88]	@ (8000600 <MX_GPIO_Init+0xd8>)
 80005a8:	f043 0320 	orr.w	r3, r3, #32
 80005ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005ae:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_GPIO_Init+0xd8>)
 80005b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005b2:	f003 0320 	and.w	r3, r3, #32
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ba:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_GPIO_Init+0xd8>)
 80005bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005be:	4a10      	ldr	r2, [pc, #64]	@ (8000600 <MX_GPIO_Init+0xd8>)
 80005c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005c4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80005c6:	4b0e      	ldr	r3, [pc, #56]	@ (8000600 <MX_GPIO_Init+0xd8>)
 80005c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80005ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	480b      	ldr	r0, [pc, #44]	@ (8000604 <MX_GPIO_Init+0xdc>)
 80005d8:	f001 fa36 	bl	8001a48 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005dc:	2320      	movs	r3, #32
 80005de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005e0:	2301      	movs	r3, #1
 80005e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e4:	2300      	movs	r3, #0
 80005e6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e8:	2300      	movs	r3, #0
 80005ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005ec:	f107 031c 	add.w	r3, r7, #28
 80005f0:	4619      	mov	r1, r3
 80005f2:	4804      	ldr	r0, [pc, #16]	@ (8000604 <MX_GPIO_Init+0xdc>)
 80005f4:	f001 f896 	bl	8001724 <HAL_GPIO_Init>

}
 80005f8:	bf00      	nop
 80005fa:	3730      	adds	r7, #48	@ 0x30
 80005fc:	46bd      	mov	sp, r7
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	40021000 	.word	0x40021000
 8000604:	48001400 	.word	0x48001400

08000608 <iis3dwb_read_data_polling>:
static void platform_delay(uint32_t ms);

void fill_buffer(float sample_buffer[]);

void iis3dwb_read_data_polling(void)
{
 8000608:	b5b0      	push	{r4, r5, r7, lr}
 800060a:	b08e      	sub	sp, #56	@ 0x38
 800060c:	af00      	add	r7, sp, #0
	//分类器初始化
	enum neai_state error_code = neai_classification_init(knowledge);
 800060e:	4880      	ldr	r0, [pc, #512]	@ (8000810 <iis3dwb_read_data_polling+0x208>)
 8000610:	f005 fa62 	bl	8005ad8 <neai_classification_init>
 8000614:	4603      	mov	r3, r0
 8000616:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
	//错误处理
	if (error_code != NEAI_OK) {
 800061a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800061e:	2b00      	cmp	r3, #0
 8000620:	d014      	beq.n	800064c <iis3dwb_read_data_polling+0x44>
		unsigned char warning[] = "model init fail...\r\n";
 8000622:	4b7c      	ldr	r3, [pc, #496]	@ (8000814 <iis3dwb_read_data_polling+0x20c>)
 8000624:	f107 0408 	add.w	r4, r7, #8
 8000628:	461d      	mov	r5, r3
 800062a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800062c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800062e:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000632:	6020      	str	r0, [r4, #0]
 8000634:	3404      	adds	r4, #4
 8000636:	7021      	strb	r1, [r4, #0]
		HAL_UART_Transmit(&huart1, (uint8_t *)warning, sizeof(warning), 0xffff);
 8000638:	f107 0108 	add.w	r1, r7, #8
 800063c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000640:	2215      	movs	r2, #21
 8000642:	4875      	ldr	r0, [pc, #468]	@ (8000818 <iis3dwb_read_data_polling+0x210>)
 8000644:	f003 ffd8 	bl	80045f8 <HAL_UART_Transmit>
		while(1);
 8000648:	bf00      	nop
 800064a:	e7fd      	b.n	8000648 <iis3dwb_read_data_polling+0x40>
	}
  stmdev_ctx_t dev_ctx;
  /* Initialize mems driver interface */
  dev_ctx.write_reg = platform_write;
 800064c:	4b73      	ldr	r3, [pc, #460]	@ (800081c <iis3dwb_read_data_polling+0x214>)
 800064e:	623b      	str	r3, [r7, #32]
  dev_ctx.read_reg = platform_read;
 8000650:	4b73      	ldr	r3, [pc, #460]	@ (8000820 <iis3dwb_read_data_polling+0x218>)
 8000652:	627b      	str	r3, [r7, #36]	@ 0x24
  dev_ctx.handle = &hspi3;
 8000654:	4b73      	ldr	r3, [pc, #460]	@ (8000824 <iis3dwb_read_data_polling+0x21c>)
 8000656:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Init test platform */

  /* Wait sensor boot time */
  platform_delay(BOOT_TIME);
 8000658:	200a      	movs	r0, #10
 800065a:	f000 f957 	bl	800090c <platform_delay>
  /* Check device ID */
  iis3dwb_device_id_get(&dev_ctx, &whoamI);
 800065e:	f107 0320 	add.w	r3, r7, #32
 8000662:	4971      	ldr	r1, [pc, #452]	@ (8000828 <iis3dwb_read_data_polling+0x220>)
 8000664:	4618      	mov	r0, r3
 8000666:	f000 fb09 	bl	8000c7c <iis3dwb_device_id_get>

  if (whoamI != IIS3DWB_ID)
 800066a:	4b6f      	ldr	r3, [pc, #444]	@ (8000828 <iis3dwb_read_data_polling+0x220>)
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	2b7b      	cmp	r3, #123	@ 0x7b
 8000670:	d001      	beq.n	8000676 <iis3dwb_read_data_polling+0x6e>
      while (1);
 8000672:	bf00      	nop
 8000674:	e7fd      	b.n	8000672 <iis3dwb_read_data_polling+0x6a>
  /* Restore default configuration */
  iis3dwb_reset_set(&dev_ctx, PROPERTY_ENABLE);
 8000676:	f107 0320 	add.w	r3, r7, #32
 800067a:	2101      	movs	r1, #1
 800067c:	4618      	mov	r0, r3
 800067e:	f000 fb0e 	bl	8000c9e <iis3dwb_reset_set>

  do {
     iis3dwb_reset_get(&dev_ctx, &rst);
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	4969      	ldr	r1, [pc, #420]	@ (800082c <iis3dwb_read_data_polling+0x224>)
 8000688:	4618      	mov	r0, r3
 800068a:	f000 fb2e 	bl	8000cea <iis3dwb_reset_get>
   } while (rst);
 800068e:	4b67      	ldr	r3, [pc, #412]	@ (800082c <iis3dwb_read_data_polling+0x224>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	2b00      	cmp	r3, #0
 8000694:	d1f5      	bne.n	8000682 <iis3dwb_read_data_polling+0x7a>

  /* Enable Block Data Update */
  iis3dwb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
 8000696:	f107 0320 	add.w	r3, r7, #32
 800069a:	2101      	movs	r1, #1
 800069c:	4618      	mov	r0, r3
 800069e:	f000 fa2b 	bl	8000af8 <iis3dwb_block_data_update_set>
  /* Set Output Data Rate */
  iis3dwb_xl_data_rate_set(&dev_ctx, IIS3DWB_XL_ODR_26k7Hz);
 80006a2:	f107 0320 	add.w	r3, r7, #32
 80006a6:	2105      	movs	r1, #5
 80006a8:	4618      	mov	r0, r3
 80006aa:	f000 f9ff 	bl	8000aac <iis3dwb_xl_data_rate_set>
  /* Set full scale */
  iis3dwb_xl_full_scale_set(&dev_ctx, IIS3DWB_2g);
 80006ae:	f107 0320 	add.w	r3, r7, #32
 80006b2:	2100      	movs	r1, #0
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 f9d3 	bl	8000a60 <iis3dwb_xl_full_scale_set>
  /* Configure filtering chain(No aux interface)
   * Accelerometer low pass filter path
   */
  iis3dwb_xl_filt_path_on_out_set(&dev_ctx, IIS3DWB_LP_ODR_DIV_100);
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2184      	movs	r1, #132	@ 0x84
 80006c0:	4618      	mov	r0, r3
 80006c2:	f000 fb2b 	bl	8000d1c <iis3dwb_xl_filt_path_on_out_set>

  /* Read samples in polling mode (no int) */
  while (1) {
    uint8_t reg;
    /* Read output only if new xl value is available */
    iis3dwb_xl_flag_data_ready_get(&dev_ctx, &reg);
 80006c6:	1dfa      	adds	r2, r7, #7
 80006c8:	f107 0320 	add.w	r3, r7, #32
 80006cc:	4611      	mov	r1, r2
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fa38 	bl	8000b44 <iis3dwb_xl_flag_data_ready_get>

    if (reg) {
 80006d4:	79fb      	ldrb	r3, [r7, #7]
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d026      	beq.n	8000728 <iis3dwb_read_data_polling+0x120>
      /* Read acceleration field data */
      iis3dwb_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
 80006da:	f107 0320 	add.w	r3, r7, #32
 80006de:	4954      	ldr	r1, [pc, #336]	@ (8000830 <iis3dwb_read_data_polling+0x228>)
 80006e0:	4618      	mov	r0, r3
 80006e2:	f000 fa83 	bl	8000bec <iis3dwb_acceleration_raw_get>
      acceleration_mg[0] =
        iis3dwb_from_fs2g_to_mg(data_raw_acceleration[0]);
 80006e6:	4b52      	ldr	r3, [pc, #328]	@ (8000830 <iis3dwb_read_data_polling+0x228>)
 80006e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f000 f983 	bl	80009f8 <iis3dwb_from_fs2g_to_mg>
 80006f2:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[0] =
 80006f6:	4b4f      	ldr	r3, [pc, #316]	@ (8000834 <iis3dwb_read_data_polling+0x22c>)
 80006f8:	edc3 7a00 	vstr	s15, [r3]
      acceleration_mg[1] =
        iis3dwb_from_fs2g_to_mg(data_raw_acceleration[1]);
 80006fc:	4b4c      	ldr	r3, [pc, #304]	@ (8000830 <iis3dwb_read_data_polling+0x228>)
 80006fe:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000702:	4618      	mov	r0, r3
 8000704:	f000 f978 	bl	80009f8 <iis3dwb_from_fs2g_to_mg>
 8000708:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[1] =
 800070c:	4b49      	ldr	r3, [pc, #292]	@ (8000834 <iis3dwb_read_data_polling+0x22c>)
 800070e:	edc3 7a01 	vstr	s15, [r3, #4]
      acceleration_mg[2] =
        iis3dwb_from_fs2g_to_mg(data_raw_acceleration[2]);
 8000712:	4b47      	ldr	r3, [pc, #284]	@ (8000830 <iis3dwb_read_data_polling+0x228>)
 8000714:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000718:	4618      	mov	r0, r3
 800071a:	f000 f96d 	bl	80009f8 <iis3dwb_from_fs2g_to_mg>
 800071e:	eef0 7a40 	vmov.f32	s15, s0
      acceleration_mg[2] =
 8000722:	4b44      	ldr	r3, [pc, #272]	@ (8000834 <iis3dwb_read_data_polling+0x22c>)
 8000724:	edc3 7a02 	vstr	s15, [r3, #8]
    }
    //数据填充
    fill_buffer(input_user_buffer);
 8000728:	4843      	ldr	r0, [pc, #268]	@ (8000838 <iis3dwb_read_data_polling+0x230>)
 800072a:	f000 f8fb 	bl	8000924 <fill_buffer>
    //结果分类
    neai_classification(input_user_buffer, output_class_buffer, &id_class);
 800072e:	4a43      	ldr	r2, [pc, #268]	@ (800083c <iis3dwb_read_data_polling+0x234>)
 8000730:	4943      	ldr	r1, [pc, #268]	@ (8000840 <iis3dwb_read_data_polling+0x238>)
 8000732:	4841      	ldr	r0, [pc, #260]	@ (8000838 <iis3dwb_read_data_polling+0x230>)
 8000734:	f005 fb14 	bl	8005d60 <neai_classification>
    //温度获取
    iis3dwb_temp_flag_data_ready_get(&dev_ctx, &reg);
 8000738:	1dfa      	adds	r2, r7, #7
 800073a:	f107 0320 	add.w	r3, r7, #32
 800073e:	4611      	mov	r1, r2
 8000740:	4618      	mov	r0, r3
 8000742:	f000 fa18 	bl	8000b76 <iis3dwb_temp_flag_data_ready_get>
    if (reg) {
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	2b00      	cmp	r3, #0
 800074a:	d010      	beq.n	800076e <iis3dwb_read_data_polling+0x166>
      /* Read temperature data */
      iis3dwb_temperature_raw_get(&dev_ctx, &data_raw_temperature);
 800074c:	f107 0320 	add.w	r3, r7, #32
 8000750:	493c      	ldr	r1, [pc, #240]	@ (8000844 <iis3dwb_read_data_polling+0x23c>)
 8000752:	4618      	mov	r0, r3
 8000754:	f000 fa28 	bl	8000ba8 <iis3dwb_temperature_raw_get>
      temperature_degC[0] = iis3dwb_from_lsb_to_celsius(data_raw_temperature);
 8000758:	4b3a      	ldr	r3, [pc, #232]	@ (8000844 <iis3dwb_read_data_polling+0x23c>)
 800075a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 f962 	bl	8000a28 <iis3dwb_from_lsb_to_celsius>
 8000764:	eef0 7a40 	vmov.f32	s15, s0
 8000768:	4b37      	ldr	r3, [pc, #220]	@ (8000848 <iis3dwb_read_data_polling+0x240>)
 800076a:	edc3 7a00 	vstr	s15, [r3]
    }
    //将数据放入到一个float类型数组
    for(int i = 0; i < 5; i++)
 800076e:	2300      	movs	r3, #0
 8000770:	637b      	str	r3, [r7, #52]	@ 0x34
 8000772:	e030      	b.n	80007d6 <iis3dwb_read_data_polling+0x1ce>
    {
    	if(i < 3)
 8000774:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000776:	2b02      	cmp	r3, #2
 8000778:	dc0a      	bgt.n	8000790 <iis3dwb_read_data_polling+0x188>
    	{
    		data_all[i] = acceleration_mg[i];
 800077a:	4a2e      	ldr	r2, [pc, #184]	@ (8000834 <iis3dwb_read_data_polling+0x22c>)
 800077c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800077e:	009b      	lsls	r3, r3, #2
 8000780:	4413      	add	r3, r2
 8000782:	681a      	ldr	r2, [r3, #0]
 8000784:	4931      	ldr	r1, [pc, #196]	@ (800084c <iis3dwb_read_data_polling+0x244>)
 8000786:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000788:	009b      	lsls	r3, r3, #2
 800078a:	440b      	add	r3, r1
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	e01f      	b.n	80007d0 <iis3dwb_read_data_polling+0x1c8>
    	}else if(i >= 3 && i < 4)
 8000790:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000792:	2b02      	cmp	r3, #2
 8000794:	dd0a      	ble.n	80007ac <iis3dwb_read_data_polling+0x1a4>
 8000796:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000798:	2b03      	cmp	r3, #3
 800079a:	dc07      	bgt.n	80007ac <iis3dwb_read_data_polling+0x1a4>
    	{
    		data_all[i] = temperature_degC[0];
 800079c:	4b2a      	ldr	r3, [pc, #168]	@ (8000848 <iis3dwb_read_data_polling+0x240>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	492a      	ldr	r1, [pc, #168]	@ (800084c <iis3dwb_read_data_polling+0x244>)
 80007a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	440b      	add	r3, r1
 80007a8:	601a      	str	r2, [r3, #0]
 80007aa:	e011      	b.n	80007d0 <iis3dwb_read_data_polling+0x1c8>
    	}else if(i >= 4 && i < 5)
 80007ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007ae:	2b03      	cmp	r3, #3
 80007b0:	dd0e      	ble.n	80007d0 <iis3dwb_read_data_polling+0x1c8>
 80007b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007b4:	2b04      	cmp	r3, #4
 80007b6:	dc0b      	bgt.n	80007d0 <iis3dwb_read_data_polling+0x1c8>
    	{
    		data_all[i] = (float)id_class;
 80007b8:	4b20      	ldr	r3, [pc, #128]	@ (800083c <iis3dwb_read_data_polling+0x234>)
 80007ba:	881b      	ldrh	r3, [r3, #0]
 80007bc:	ee07 3a90 	vmov	s15, r3
 80007c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80007c4:	4a21      	ldr	r2, [pc, #132]	@ (800084c <iis3dwb_read_data_polling+0x244>)
 80007c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	4413      	add	r3, r2
 80007cc:	edc3 7a00 	vstr	s15, [r3]
    for(int i = 0; i < 5; i++)
 80007d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d2:	3301      	adds	r3, #1
 80007d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80007d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80007d8:	2b04      	cmp	r3, #4
 80007da:	ddcb      	ble.n	8000774 <iis3dwb_read_data_polling+0x16c>
    	}
    }
    //数据发送
    	HAL_UART_Transmit(&huart1, (uint8_t *)begin, sizeof(begin), 0xffff);
 80007dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007e0:	2202      	movs	r2, #2
 80007e2:	491b      	ldr	r1, [pc, #108]	@ (8000850 <iis3dwb_read_data_polling+0x248>)
 80007e4:	480c      	ldr	r0, [pc, #48]	@ (8000818 <iis3dwb_read_data_polling+0x210>)
 80007e6:	f003 ff07 	bl	80045f8 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1, (float *)data_all, sizeof(data_all), 0xffff);
 80007ea:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007ee:	2214      	movs	r2, #20
 80007f0:	4916      	ldr	r1, [pc, #88]	@ (800084c <iis3dwb_read_data_polling+0x244>)
 80007f2:	4809      	ldr	r0, [pc, #36]	@ (8000818 <iis3dwb_read_data_polling+0x210>)
 80007f4:	f003 ff00 	bl	80045f8 <HAL_UART_Transmit>
    	HAL_UART_Transmit(&huart1, (uint8_t *)end, sizeof(end), 0xffff);
 80007f8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80007fc:	2202      	movs	r2, #2
 80007fe:	4915      	ldr	r1, [pc, #84]	@ (8000854 <iis3dwb_read_data_polling+0x24c>)
 8000800:	4805      	ldr	r0, [pc, #20]	@ (8000818 <iis3dwb_read_data_polling+0x210>)
 8000802:	f003 fef9 	bl	80045f8 <HAL_UART_Transmit>
    	HAL_Delay(200);
 8000806:	20c8      	movs	r0, #200	@ 0xc8
 8000808:	f000 fd9c 	bl	8001344 <HAL_Delay>
  while (1) {
 800080c:	e75b      	b.n	80006c6 <iis3dwb_read_data_polling+0xbe>
 800080e:	bf00      	nop
 8000810:	08006908 	.word	0x08006908
 8000814:	080068f0 	.word	0x080068f0
 8000818:	2000300c 	.word	0x2000300c
 800081c:	08000859 	.word	0x08000859
 8000820:	080008ad 	.word	0x080008ad
 8000824:	20002fa8 	.word	0x20002fa8
 8000828:	20002f8c 	.word	0x20002f8c
 800082c:	20002f8d 	.word	0x20002f8d
 8000830:	20002f70 	.word	0x20002f70
 8000834:	20002f78 	.word	0x20002f78
 8000838:	2000007c 	.word	0x2000007c
 800083c:	20000078 	.word	0x20000078
 8000840:	20002f5c 	.word	0x20002f5c
 8000844:	20002f84 	.word	0x20002f84
 8000848:	20002f88 	.word	0x20002f88
 800084c:	20002f94 	.word	0x20002f94
 8000850:	08017360 	.word	0x08017360
 8000854:	08017364 	.word	0x08017364

08000858 <platform_write>:
  }
}

static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	607a      	str	r2, [r7, #4]
 8000862:	461a      	mov	r2, r3
 8000864:	460b      	mov	r3, r1
 8000866:	72fb      	strb	r3, [r7, #11]
 8000868:	4613      	mov	r3, r2
 800086a:	813b      	strh	r3, [r7, #8]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 800086c:	2200      	movs	r2, #0
 800086e:	2120      	movs	r1, #32
 8000870:	480d      	ldr	r0, [pc, #52]	@ (80008a8 <platform_write+0x50>)
 8000872:	f001 f8e9 	bl	8001a48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(handle, &reg, 1, 1000);
 8000876:	f107 010b 	add.w	r1, r7, #11
 800087a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800087e:	2201      	movs	r2, #1
 8000880:	68f8      	ldr	r0, [r7, #12]
 8000882:	f002 fec0 	bl	8003606 <HAL_SPI_Transmit>
    HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
 8000886:	893a      	ldrh	r2, [r7, #8]
 8000888:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800088c:	6879      	ldr	r1, [r7, #4]
 800088e:	68f8      	ldr	r0, [r7, #12]
 8000890:	f002 feb9 	bl	8003606 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 8000894:	2201      	movs	r2, #1
 8000896:	2120      	movs	r1, #32
 8000898:	4803      	ldr	r0, [pc, #12]	@ (80008a8 <platform_write+0x50>)
 800089a:	f001 f8d5 	bl	8001a48 <HAL_GPIO_WritePin>
  return 0;
 800089e:	2300      	movs	r3, #0
}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3710      	adds	r7, #16
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	48001400 	.word	0x48001400

080008ac <platform_read>:

static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0
 80008b2:	60f8      	str	r0, [r7, #12]
 80008b4:	607a      	str	r2, [r7, #4]
 80008b6:	461a      	mov	r2, r3
 80008b8:	460b      	mov	r3, r1
 80008ba:	72fb      	strb	r3, [r7, #11]
 80008bc:	4613      	mov	r3, r2
 80008be:	813b      	strh	r3, [r7, #8]
    /* Read command */
    reg |= 0x80;
 80008c0:	7afb      	ldrb	r3, [r7, #11]
 80008c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	72fb      	strb	r3, [r7, #11]
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
 80008ca:	2200      	movs	r2, #0
 80008cc:	2120      	movs	r1, #32
 80008ce:	480e      	ldr	r0, [pc, #56]	@ (8000908 <platform_read+0x5c>)
 80008d0:	f001 f8ba 	bl	8001a48 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(handle, &reg, 1, 1000);
 80008d4:	f107 010b 	add.w	r1, r7, #11
 80008d8:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008dc:	2201      	movs	r2, #1
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f002 fe91 	bl	8003606 <HAL_SPI_Transmit>
    HAL_SPI_Receive(handle, bufp, len, 1000);
 80008e4:	893a      	ldrh	r2, [r7, #8]
 80008e6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80008ea:	6879      	ldr	r1, [r7, #4]
 80008ec:	68f8      	ldr	r0, [r7, #12]
 80008ee:	f003 f800 	bl	80038f2 <HAL_SPI_Receive>
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
 80008f2:	2201      	movs	r2, #1
 80008f4:	2120      	movs	r1, #32
 80008f6:	4804      	ldr	r0, [pc, #16]	@ (8000908 <platform_read+0x5c>)
 80008f8:	f001 f8a6 	bl	8001a48 <HAL_GPIO_WritePin>
  return 0;
 80008fc:	2300      	movs	r3, #0
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	48001400 	.word	0x48001400

0800090c <platform_delay>:

static void platform_delay(uint32_t ms)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
  HAL_Delay(ms);
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f000 fd15 	bl	8001344 <HAL_Delay>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
	...

08000924 <fill_buffer>:

void fill_buffer(float sample_buffer[])
{
 8000924:	b480      	push	{r7}
 8000926:	b085      	sub	sp, #20
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	for(int axis = 0; axis < AXIS_NUMBER; axis++)
 800092c:	2300      	movs	r3, #0
 800092e:	60fb      	str	r3, [r7, #12]
 8000930:	e021      	b.n	8000976 <fill_buffer+0x52>
	{ // 遍历加速度三个轴
		sample_buffer[buffer_index] = acceleration_mg[axis] * 0.001f; // 填充当前轴数据
 8000932:	4a16      	ldr	r2, [pc, #88]	@ (800098c <fill_buffer+0x68>)
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	009b      	lsls	r3, r3, #2
 8000938:	4413      	add	r3, r2
 800093a:	edd3 7a00 	vldr	s15, [r3]
 800093e:	4b14      	ldr	r3, [pc, #80]	@ (8000990 <fill_buffer+0x6c>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	4413      	add	r3, r2
 8000948:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000994 <fill_buffer+0x70>
 800094c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000950:	edc3 7a00 	vstr	s15, [r3]
		buffer_index++;
 8000954:	4b0e      	ldr	r3, [pc, #56]	@ (8000990 <fill_buffer+0x6c>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	3301      	adds	r3, #1
 800095a:	4a0d      	ldr	r2, [pc, #52]	@ (8000990 <fill_buffer+0x6c>)
 800095c:	6013      	str	r3, [r2, #0]
		// 检查是否填满缓冲区，若填满则重置索引循环填充
		if (buffer_index >= DATA_INPUT_USER * AXIS_NUMBER)
 800095e:	4b0c      	ldr	r3, [pc, #48]	@ (8000990 <fill_buffer+0x6c>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 8000966:	4293      	cmp	r3, r2
 8000968:	dd02      	ble.n	8000970 <fill_buffer+0x4c>
		{
			buffer_index = 0;
 800096a:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <fill_buffer+0x6c>)
 800096c:	2200      	movs	r2, #0
 800096e:	601a      	str	r2, [r3, #0]
	for(int axis = 0; axis < AXIS_NUMBER; axis++)
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	3301      	adds	r3, #1
 8000974:	60fb      	str	r3, [r7, #12]
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	2b02      	cmp	r3, #2
 800097a:	ddda      	ble.n	8000932 <fill_buffer+0xe>
		}
	}
}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3714      	adds	r7, #20
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	20002f78 	.word	0x20002f78
 8000990:	20002f90 	.word	0x20002f90
 8000994:	3a83126f 	.word	0x3a83126f

08000998 <iis3dwb_read_reg>:
  *
  */
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
 8000998:	b590      	push	{r4, r7, lr}
 800099a:	b087      	sub	sp, #28
 800099c:	af00      	add	r7, sp, #0
 800099e:	60f8      	str	r0, [r7, #12]
 80009a0:	607a      	str	r2, [r7, #4]
 80009a2:	461a      	mov	r2, r3
 80009a4:	460b      	mov	r3, r1
 80009a6:	72fb      	strb	r3, [r7, #11]
 80009a8:	4613      	mov	r3, r2
 80009aa:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->read_reg(ctx->handle, reg, data, len);
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	685c      	ldr	r4, [r3, #4]
 80009b0:	68fb      	ldr	r3, [r7, #12]
 80009b2:	68d8      	ldr	r0, [r3, #12]
 80009b4:	893b      	ldrh	r3, [r7, #8]
 80009b6:	7af9      	ldrb	r1, [r7, #11]
 80009b8:	687a      	ldr	r2, [r7, #4]
 80009ba:	47a0      	blx	r4
 80009bc:	6178      	str	r0, [r7, #20]

  return ret;
 80009be:	697b      	ldr	r3, [r7, #20]
}
 80009c0:	4618      	mov	r0, r3
 80009c2:	371c      	adds	r7, #28
 80009c4:	46bd      	mov	sp, r7
 80009c6:	bd90      	pop	{r4, r7, pc}

080009c8 <iis3dwb_write_reg>:
  *
  */
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b087      	sub	sp, #28
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	60f8      	str	r0, [r7, #12]
 80009d0:	607a      	str	r2, [r7, #4]
 80009d2:	461a      	mov	r2, r3
 80009d4:	460b      	mov	r3, r1
 80009d6:	72fb      	strb	r3, [r7, #11]
 80009d8:	4613      	mov	r3, r2
 80009da:	813b      	strh	r3, [r7, #8]
  int32_t ret;

  ret = ctx->write_reg(ctx->handle, reg, data, len);
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	681c      	ldr	r4, [r3, #0]
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	68d8      	ldr	r0, [r3, #12]
 80009e4:	893b      	ldrh	r3, [r7, #8]
 80009e6:	7af9      	ldrb	r1, [r7, #11]
 80009e8:	687a      	ldr	r2, [r7, #4]
 80009ea:	47a0      	blx	r4
 80009ec:	6178      	str	r0, [r7, #20]

  return ret;
 80009ee:	697b      	ldr	r3, [r7, #20]
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	371c      	adds	r7, #28
 80009f4:	46bd      	mov	sp, r7
 80009f6:	bd90      	pop	{r4, r7, pc}

080009f8 <iis3dwb_from_fs2g_to_mg>:
  * @{
  *
  */

float_t iis3dwb_from_fs2g_to_mg(int16_t lsb)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	4603      	mov	r3, r0
 8000a00:	80fb      	strh	r3, [r7, #6]
  return ((float_t)lsb * 0.061f);
 8000a02:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a06:	ee07 3a90 	vmov	s15, r3
 8000a0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000a0e:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8000a24 <iis3dwb_from_fs2g_to_mg+0x2c>
 8000a12:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000a16:	eeb0 0a67 	vmov.f32	s0, s15
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	3d79db23 	.word	0x3d79db23

08000a28 <iis3dwb_from_lsb_to_celsius>:
{
  return ((float_t)lsb * 0.488f);
}

float_t iis3dwb_from_lsb_to_celsius(int16_t lsb)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	4603      	mov	r3, r0
 8000a30:	80fb      	strh	r3, [r7, #6]
  return (((float_t)lsb / 256.0f) + 25.0f);
 8000a32:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a36:	ee07 3a90 	vmov	s15, r3
 8000a3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a3e:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8000a5c <iis3dwb_from_lsb_to_celsius+0x34>
 8000a42:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a46:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8000a4a:	ee77 7a87 	vadd.f32	s15, s15, s14
}
 8000a4e:	eeb0 0a67 	vmov.f32	s0, s15
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	43800000 	.word	0x43800000

08000a60 <iis3dwb_xl_full_scale_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
 8000a66:	6078      	str	r0, [r7, #4]
 8000a68:	460b      	mov	r3, r1
 8000a6a:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000a6c:	f107 0208 	add.w	r2, r7, #8
 8000a70:	2301      	movs	r3, #1
 8000a72:	2110      	movs	r1, #16
 8000a74:	6878      	ldr	r0, [r7, #4]
 8000a76:	f7ff ff8f 	bl	8000998 <iis3dwb_read_reg>
 8000a7a:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d10f      	bne.n	8000aa2 <iis3dwb_xl_full_scale_set+0x42>
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
 8000a82:	78fb      	ldrb	r3, [r7, #3]
 8000a84:	f003 0303 	and.w	r3, r3, #3
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	7a3b      	ldrb	r3, [r7, #8]
 8000a8c:	f362 0383 	bfi	r3, r2, #2, #2
 8000a90:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8000a92:	f107 0208 	add.w	r2, r7, #8
 8000a96:	2301      	movs	r3, #1
 8000a98:	2110      	movs	r1, #16
 8000a9a:	6878      	ldr	r0, [r7, #4]
 8000a9c:	f7ff ff94 	bl	80009c8 <iis3dwb_write_reg>
 8000aa0:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8000aa2:	68fb      	ldr	r3, [r7, #12]
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	3710      	adds	r7, #16
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bd80      	pop	{r7, pc}

08000aac <iis3dwb_xl_data_rate_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b084      	sub	sp, #16
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
 8000ab4:	460b      	mov	r3, r1
 8000ab6:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000ab8:	f107 0208 	add.w	r2, r7, #8
 8000abc:	2301      	movs	r3, #1
 8000abe:	2110      	movs	r1, #16
 8000ac0:	6878      	ldr	r0, [r7, #4]
 8000ac2:	f7ff ff69 	bl	8000998 <iis3dwb_read_reg>
 8000ac6:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000ac8:	68fb      	ldr	r3, [r7, #12]
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d10f      	bne.n	8000aee <iis3dwb_xl_data_rate_set+0x42>
  {
    ctrl1_xl.xl_en = (uint8_t)val;
 8000ace:	78fb      	ldrb	r3, [r7, #3]
 8000ad0:	f003 0307 	and.w	r3, r3, #7
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	7a3b      	ldrb	r3, [r7, #8]
 8000ad8:	f362 1347 	bfi	r3, r2, #5, #3
 8000adc:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
 8000ade:	f107 0208 	add.w	r2, r7, #8
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	2110      	movs	r1, #16
 8000ae6:	6878      	ldr	r0, [r7, #4]
 8000ae8:	f7ff ff6e 	bl	80009c8 <iis3dwb_write_reg>
 8000aec:	60f8      	str	r0, [r7, #12]
                            (uint8_t *)&ctrl1_xl, 1);
  }

  return ret;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	4618      	mov	r0, r3
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}

08000af8 <iis3dwb_block_data_update_set>:
  * @param  val    Change the values of bdu in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
 8000b00:	460b      	mov	r3, r1
 8000b02:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000b04:	f107 0208 	add.w	r2, r7, #8
 8000b08:	2301      	movs	r3, #1
 8000b0a:	2112      	movs	r1, #18
 8000b0c:	6878      	ldr	r0, [r7, #4]
 8000b0e:	f7ff ff43 	bl	8000998 <iis3dwb_read_reg>
 8000b12:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000b14:	68fb      	ldr	r3, [r7, #12]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d10f      	bne.n	8000b3a <iis3dwb_block_data_update_set+0x42>
  {
    ctrl3_c.bdu = (uint8_t)val;
 8000b1a:	78fb      	ldrb	r3, [r7, #3]
 8000b1c:	f003 0301 	and.w	r3, r3, #1
 8000b20:	b2da      	uxtb	r2, r3
 8000b22:	7a3b      	ldrb	r3, [r7, #8]
 8000b24:	f362 1386 	bfi	r3, r2, #6, #1
 8000b28:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000b2a:	f107 0208 	add.w	r2, r7, #8
 8000b2e:	2301      	movs	r3, #1
 8000b30:	2112      	movs	r1, #18
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff ff48 	bl	80009c8 <iis3dwb_write_reg>
 8000b38:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <iis3dwb_xl_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b084      	sub	sp, #16
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  iis3dwb_status_reg_t status_reg;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
 8000b4e:	f107 0208 	add.w	r2, r7, #8
 8000b52:	2301      	movs	r3, #1
 8000b54:	211e      	movs	r1, #30
 8000b56:	6878      	ldr	r0, [r7, #4]
 8000b58:	f7ff ff1e 	bl	8000998 <iis3dwb_read_reg>
 8000b5c:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
 8000b5e:	7a3b      	ldrb	r3, [r7, #8]
 8000b60:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000b64:	b2db      	uxtb	r3, r3
 8000b66:	461a      	mov	r2, r3
 8000b68:	683b      	ldr	r3, [r7, #0]
 8000b6a:	701a      	strb	r2, [r3, #0]

  return ret;
 8000b6c:	68fb      	ldr	r3, [r7, #12]
}
 8000b6e:	4618      	mov	r0, r3
 8000b70:	3710      	adds	r7, #16
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <iis3dwb_temp_flag_data_ready_get>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b084      	sub	sp, #16
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
 8000b7e:	6039      	str	r1, [r7, #0]
  iis3dwb_status_reg_t status_reg;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
 8000b80:	f107 0208 	add.w	r2, r7, #8
 8000b84:	2301      	movs	r3, #1
 8000b86:	211e      	movs	r1, #30
 8000b88:	6878      	ldr	r0, [r7, #4]
 8000b8a:	f7ff ff05 	bl	8000998 <iis3dwb_read_reg>
 8000b8e:	60f8      	str	r0, [r7, #12]
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
 8000b90:	7a3b      	ldrb	r3, [r7, #8]
 8000b92:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8000b96:	b2db      	uxtb	r3, r3
 8000b98:	461a      	mov	r2, r3
 8000b9a:	683b      	ldr	r3, [r7, #0]
 8000b9c:	701a      	strb	r2, [r3, #0]

  return ret;
 8000b9e:	68fb      	ldr	r3, [r7, #12]
}
 8000ba0:	4618      	mov	r0, r3
 8000ba2:	3710      	adds	r7, #16
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <iis3dwb_temperature_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
  uint8_t buff[2];
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUT_TEMP_L, buff, 2);
 8000bb2:	f107 0208 	add.w	r2, r7, #8
 8000bb6:	2302      	movs	r3, #2
 8000bb8:	2120      	movs	r1, #32
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f7ff feec 	bl	8000998 <iis3dwb_read_reg>
 8000bc0:	60f8      	str	r0, [r7, #12]
  *val = (int16_t)buff[1];
 8000bc2:	7a7b      	ldrb	r3, [r7, #9]
 8000bc4:	b21a      	sxth	r2, r3
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	801a      	strh	r2, [r3, #0]
  *val = (*val * 256) + (int16_t)buff[0];
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	021b      	lsls	r3, r3, #8
 8000bd4:	b29b      	uxth	r3, r3
 8000bd6:	7a3a      	ldrb	r2, [r7, #8]
 8000bd8:	4413      	add	r3, r2
 8000bda:	b29b      	uxth	r3, r3
 8000bdc:	b21a      	sxth	r2, r3
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	801a      	strh	r2, [r3, #0]

  return ret;
 8000be2:	68fb      	ldr	r3, [r7, #12]
}
 8000be4:	4618      	mov	r0, r3
 8000be6:	3710      	adds	r7, #16
 8000be8:	46bd      	mov	sp, r7
 8000bea:	bd80      	pop	{r7, pc}

08000bec <iis3dwb_acceleration_raw_get>:
  * @param  val    Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b086      	sub	sp, #24
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  uint8_t buff[6];
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
 8000bf6:	f107 020c 	add.w	r2, r7, #12
 8000bfa:	2306      	movs	r3, #6
 8000bfc:	2128      	movs	r1, #40	@ 0x28
 8000bfe:	6878      	ldr	r0, [r7, #4]
 8000c00:	f7ff feca 	bl	8000998 <iis3dwb_read_reg>
 8000c04:	6178      	str	r0, [r7, #20]
  val[0] = (int16_t)buff[1];
 8000c06:	7b7b      	ldrb	r3, [r7, #13]
 8000c08:	b21a      	sxth	r2, r3
 8000c0a:	683b      	ldr	r3, [r7, #0]
 8000c0c:	801a      	strh	r2, [r3, #0]
  val[0] = (val[0] * 256) + (int16_t)buff[0];
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c14:	b29b      	uxth	r3, r3
 8000c16:	021b      	lsls	r3, r3, #8
 8000c18:	b29b      	uxth	r3, r3
 8000c1a:	7b3a      	ldrb	r2, [r7, #12]
 8000c1c:	4413      	add	r3, r2
 8000c1e:	b29b      	uxth	r3, r3
 8000c20:	b21a      	sxth	r2, r3
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	801a      	strh	r2, [r3, #0]
  val[1] = (int16_t)buff[3];
 8000c26:	7bfa      	ldrb	r2, [r7, #15]
 8000c28:	683b      	ldr	r3, [r7, #0]
 8000c2a:	3302      	adds	r3, #2
 8000c2c:	b212      	sxth	r2, r2
 8000c2e:	801a      	strh	r2, [r3, #0]
  val[1] = (val[1] * 256) + (int16_t)buff[2];
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	3302      	adds	r3, #2
 8000c34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	021b      	lsls	r3, r3, #8
 8000c3c:	b29b      	uxth	r3, r3
 8000c3e:	7bba      	ldrb	r2, [r7, #14]
 8000c40:	4413      	add	r3, r2
 8000c42:	b29a      	uxth	r2, r3
 8000c44:	683b      	ldr	r3, [r7, #0]
 8000c46:	3302      	adds	r3, #2
 8000c48:	b212      	sxth	r2, r2
 8000c4a:	801a      	strh	r2, [r3, #0]
  val[2] = (int16_t)buff[5];
 8000c4c:	7c7a      	ldrb	r2, [r7, #17]
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	3304      	adds	r3, #4
 8000c52:	b212      	sxth	r2, r2
 8000c54:	801a      	strh	r2, [r3, #0]
  val[2] = (val[2] * 256) + (int16_t)buff[4];
 8000c56:	683b      	ldr	r3, [r7, #0]
 8000c58:	3304      	adds	r3, #4
 8000c5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000c5e:	b29b      	uxth	r3, r3
 8000c60:	021b      	lsls	r3, r3, #8
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	7c3a      	ldrb	r2, [r7, #16]
 8000c66:	4413      	add	r3, r2
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	3304      	adds	r3, #4
 8000c6e:	b212      	sxth	r2, r2
 8000c70:	801a      	strh	r2, [r3, #0]

  return ret;
 8000c72:	697b      	ldr	r3, [r7, #20]
}
 8000c74:	4618      	mov	r0, r3
 8000c76:	3718      	adds	r7, #24
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bd80      	pop	{r7, pc}

08000c7c <iis3dwb_device_id_get>:
  * @param  buff   Buffer that stores data read
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
 8000c84:	6039      	str	r1, [r7, #0]
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
 8000c86:	2301      	movs	r3, #1
 8000c88:	683a      	ldr	r2, [r7, #0]
 8000c8a:	210f      	movs	r1, #15
 8000c8c:	6878      	ldr	r0, [r7, #4]
 8000c8e:	f7ff fe83 	bl	8000998 <iis3dwb_read_reg>
 8000c92:	60f8      	str	r0, [r7, #12]

  return ret;
 8000c94:	68fb      	ldr	r3, [r7, #12]
}
 8000c96:	4618      	mov	r0, r3
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}

08000c9e <iis3dwb_reset_set>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
 8000c9e:	b580      	push	{r7, lr}
 8000ca0:	b084      	sub	sp, #16
 8000ca2:	af00      	add	r7, sp, #0
 8000ca4:	6078      	str	r0, [r7, #4]
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000caa:	f107 0208 	add.w	r2, r7, #8
 8000cae:	2301      	movs	r3, #1
 8000cb0:	2112      	movs	r1, #18
 8000cb2:	6878      	ldr	r0, [r7, #4]
 8000cb4:	f7ff fe70 	bl	8000998 <iis3dwb_read_reg>
 8000cb8:	60f8      	str	r0, [r7, #12]

  if (ret == 0)
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d10f      	bne.n	8000ce0 <iis3dwb_reset_set+0x42>
  {
    ctrl3_c.sw_reset = (uint8_t)val;
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	f003 0301 	and.w	r3, r3, #1
 8000cc6:	b2da      	uxtb	r2, r3
 8000cc8:	7a3b      	ldrb	r3, [r7, #8]
 8000cca:	f362 0300 	bfi	r3, r2, #0, #1
 8000cce:	723b      	strb	r3, [r7, #8]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cd0:	f107 0208 	add.w	r2, r7, #8
 8000cd4:	2301      	movs	r3, #1
 8000cd6:	2112      	movs	r1, #18
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff fe75 	bl	80009c8 <iis3dwb_write_reg>
 8000cde:	60f8      	str	r0, [r7, #12]
  }

  return ret;
 8000ce0:	68fb      	ldr	r3, [r7, #12]
}
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	3710      	adds	r7, #16
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <iis3dwb_reset_get>:
  * @param  val    Change the values of sw_reset in reg CTRL3_C
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b084      	sub	sp, #16
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
 8000cf2:	6039      	str	r1, [r7, #0]
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
 8000cf4:	f107 0208 	add.w	r2, r7, #8
 8000cf8:	2301      	movs	r3, #1
 8000cfa:	2112      	movs	r1, #18
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f7ff fe4b 	bl	8000998 <iis3dwb_read_reg>
 8000d02:	60f8      	str	r0, [r7, #12]
  *val = ctrl3_c.sw_reset;
 8000d04:	7a3b      	ldrb	r3, [r7, #8]
 8000d06:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	683b      	ldr	r3, [r7, #0]
 8000d10:	701a      	strb	r2, [r3, #0]

  return ret;
 8000d12:	68fb      	ldr	r3, [r7, #12]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3710      	adds	r7, #16
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}

08000d1c <iis3dwb_xl_filt_path_on_out_set>:
  * @retval        Interface status (MANDATORY: return 0 -> no Error).
  *
  */
int32_t iis3dwb_xl_filt_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_filt_xl_en_t val)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]
 8000d24:	460b      	mov	r3, r1
 8000d26:	70fb      	strb	r3, [r7, #3]
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;

  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000d28:	f107 0210 	add.w	r2, r7, #16
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	2110      	movs	r1, #16
 8000d30:	6878      	ldr	r0, [r7, #4]
 8000d32:	f7ff fe31 	bl	8000998 <iis3dwb_read_reg>
 8000d36:	6178      	str	r0, [r7, #20]

  if (ret == 0)
 8000d38:	697b      	ldr	r3, [r7, #20]
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d111      	bne.n	8000d62 <iis3dwb_xl_filt_path_on_out_set+0x46>
  {
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
 8000d3e:	78fb      	ldrb	r3, [r7, #3]
 8000d40:	09db      	lsrs	r3, r3, #7
 8000d42:	b2db      	uxtb	r3, r3
 8000d44:	f003 0301 	and.w	r3, r3, #1
 8000d48:	b2da      	uxtb	r2, r3
 8000d4a:	7c3b      	ldrb	r3, [r7, #16]
 8000d4c:	f362 0341 	bfi	r3, r2, #1, #1
 8000d50:	743b      	strb	r3, [r7, #16]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
 8000d52:	f107 0210 	add.w	r2, r7, #16
 8000d56:	2301      	movs	r3, #1
 8000d58:	2110      	movs	r1, #16
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fe34 	bl	80009c8 <iis3dwb_write_reg>
 8000d60:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d107      	bne.n	8000d78 <iis3dwb_xl_filt_path_on_out_set+0x5c>
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8000d68:	f107 020c 	add.w	r2, r7, #12
 8000d6c:	2301      	movs	r3, #1
 8000d6e:	2117      	movs	r1, #23
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff fe11 	bl	8000998 <iis3dwb_read_reg>
 8000d76:	6178      	str	r0, [r7, #20]
  }

  if (ret == 0)
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d121      	bne.n	8000dc2 <iis3dwb_xl_filt_path_on_out_set+0xa6>
  {
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
 8000d7e:	78fb      	ldrb	r3, [r7, #3]
 8000d80:	091b      	lsrs	r3, r3, #4
 8000d82:	f003 0301 	and.w	r3, r3, #1
 8000d86:	b2da      	uxtb	r2, r3
 8000d88:	7b3b      	ldrb	r3, [r7, #12]
 8000d8a:	f362 0382 	bfi	r3, r2, #2, #1
 8000d8e:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
 8000d90:	78fb      	ldrb	r3, [r7, #3]
 8000d92:	095b      	lsrs	r3, r3, #5
 8000d94:	f003 0301 	and.w	r3, r3, #1
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	7b3b      	ldrb	r3, [r7, #12]
 8000d9c:	f362 1304 	bfi	r3, r2, #4, #1
 8000da0:	733b      	strb	r3, [r7, #12]
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
 8000da2:	78fb      	ldrb	r3, [r7, #3]
 8000da4:	f003 0307 	and.w	r3, r3, #7
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	7b3b      	ldrb	r3, [r7, #12]
 8000dac:	f362 1347 	bfi	r3, r2, #5, #3
 8000db0:	733b      	strb	r3, [r7, #12]
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
 8000db2:	f107 020c 	add.w	r2, r7, #12
 8000db6:	2301      	movs	r3, #1
 8000db8:	2117      	movs	r1, #23
 8000dba:	6878      	ldr	r0, [r7, #4]
 8000dbc:	f7ff fe04 	bl	80009c8 <iis3dwb_write_reg>
 8000dc0:	6178      	str	r0, [r7, #20]
  }

  return ret;
 8000dc2:	697b      	ldr	r3, [r7, #20]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000dd0:	f000 fa43 	bl	800125a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000dd4:	f000 f809 	bl	8000dea <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000dd8:	f7ff fba6 	bl	8000528 <MX_GPIO_Init>
  MX_SPI3_Init();
 8000ddc:	f000 f85c 	bl	8000e98 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8000de0:	f000 f95e 	bl	80010a0 <MX_USART1_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  iis3dwb_read_data_polling();
 8000de4:	f7ff fc10 	bl	8000608 <iis3dwb_read_data_polling>
 8000de8:	e7fc      	b.n	8000de4 <main+0x18>

08000dea <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b096      	sub	sp, #88	@ 0x58
 8000dee:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000df0:	f107 0314 	add.w	r3, r7, #20
 8000df4:	2244      	movs	r2, #68	@ 0x44
 8000df6:	2100      	movs	r1, #0
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f005 fb85 	bl	8006508 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dfe:	463b      	mov	r3, r7
 8000e00:	2200      	movs	r2, #0
 8000e02:	601a      	str	r2, [r3, #0]
 8000e04:	605a      	str	r2, [r3, #4]
 8000e06:	609a      	str	r2, [r3, #8]
 8000e08:	60da      	str	r2, [r3, #12]
 8000e0a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000e0c:	2000      	movs	r0, #0
 8000e0e:	f000 fe53 	bl	8001ab8 <HAL_PWREx_ControlVoltageScaling>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000e18:	f000 f838 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000e20:	2301      	movs	r3, #1
 8000e22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000e28:	2360      	movs	r3, #96	@ 0x60
 8000e2a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000e30:	2301      	movs	r3, #1
 8000e32:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000e34:	2301      	movs	r3, #1
 8000e36:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000e38:	233c      	movs	r3, #60	@ 0x3c
 8000e3a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000e40:	2302      	movs	r3, #2
 8000e42:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000e44:	2302      	movs	r3, #2
 8000e46:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e48:	f107 0314 	add.w	r3, r7, #20
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	f000 fee7 	bl	8001c20 <HAL_RCC_OscConfig>
 8000e52:	4603      	mov	r3, r0
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d001      	beq.n	8000e5c <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000e58:	f000 f818 	bl	8000e8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e60:	2303      	movs	r3, #3
 8000e62:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e64:	2300      	movs	r3, #0
 8000e66:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e70:	463b      	mov	r3, r7
 8000e72:	2105      	movs	r1, #5
 8000e74:	4618      	mov	r0, r3
 8000e76:	f001 faed 	bl	8002454 <HAL_RCC_ClockConfig>
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d001      	beq.n	8000e84 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000e80:	f000 f804 	bl	8000e8c <Error_Handler>
  }
}
 8000e84:	bf00      	nop
 8000e86:	3758      	adds	r7, #88	@ 0x58
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e90:	b672      	cpsid	i
}
 8000e92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e94:	bf00      	nop
 8000e96:	e7fd      	b.n	8000e94 <Error_Handler+0x8>

08000e98 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8000e9c:	4b1b      	ldr	r3, [pc, #108]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000e9e:	4a1c      	ldr	r2, [pc, #112]	@ (8000f10 <MX_SPI3_Init+0x78>)
 8000ea0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000ea2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ea4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000ea8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000eaa:	4b18      	ldr	r3, [pc, #96]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000eb0:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000eb2:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8000eb6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eb8:	4b14      	ldr	r3, [pc, #80]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ebe:	4b13      	ldr	r3, [pc, #76]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8000ec4:	4b11      	ldr	r3, [pc, #68]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ec6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000ecc:	4b0f      	ldr	r3, [pc, #60]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ece:	2218      	movs	r2, #24
 8000ed0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ed2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ed8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ede:	4b0b      	ldr	r3, [pc, #44]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 7;
 8000ee4:	4b09      	ldr	r3, [pc, #36]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ee6:	2207      	movs	r2, #7
 8000ee8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000eea:	4b08      	ldr	r3, [pc, #32]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000eec:	2200      	movs	r2, #0
 8000eee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000ef0:	4b06      	ldr	r3, [pc, #24]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000ef6:	4805      	ldr	r0, [pc, #20]	@ (8000f0c <MX_SPI3_Init+0x74>)
 8000ef8:	f002 fae2 	bl	80034c0 <HAL_SPI_Init>
 8000efc:	4603      	mov	r3, r0
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8000f02:	f7ff ffc3 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000f06:	bf00      	nop
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20002fa8 	.word	0x20002fa8
 8000f10:	40003c00 	.word	0x40003c00

08000f14 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a1b      	ldr	r2, [pc, #108]	@ (8000fa0 <HAL_SPI_MspInit+0x8c>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d12f      	bne.n	8000f96 <HAL_SPI_MspInit+0x82>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000f36:	4b1b      	ldr	r3, [pc, #108]	@ (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f3a:	4a1a      	ldr	r2, [pc, #104]	@ (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f3c:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000f40:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f42:	4b18      	ldr	r3, [pc, #96]	@ (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f44:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f46:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4e:	4b15      	ldr	r3, [pc, #84]	@ (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a14      	ldr	r2, [pc, #80]	@ (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b12      	ldr	r3, [pc, #72]	@ (8000fa4 <HAL_SPI_MspInit+0x90>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**SPI3 GPIO Configuration
    PB4 (NJTRST)     ------> SPI3_MISO
    PB5     ------> SPI3_MOSI
    PB3 (JTDO/TRACESWO)     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
 8000f66:	2338      	movs	r3, #56	@ 0x38
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f72:	2303      	movs	r3, #3
 8000f74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000f76:	2306      	movs	r3, #6
 8000f78:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7a:	f107 0314 	add.w	r3, r7, #20
 8000f7e:	4619      	mov	r1, r3
 8000f80:	4809      	ldr	r0, [pc, #36]	@ (8000fa8 <HAL_SPI_MspInit+0x94>)
 8000f82:	f000 fbcf 	bl	8001724 <HAL_GPIO_Init>

    /* SPI3 interrupt Init */
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
 8000f86:	2200      	movs	r2, #0
 8000f88:	2100      	movs	r1, #0
 8000f8a:	2033      	movs	r0, #51	@ 0x33
 8000f8c:	f000 fad9 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8000f90:	2033      	movs	r0, #51	@ 0x33
 8000f92:	f000 faf2 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8000f96:	bf00      	nop
 8000f98:	3728      	adds	r7, #40	@ 0x28
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40003c00 	.word	0x40003c00
 8000fa4:	40021000 	.word	0x40021000
 8000fa8:	48000400 	.word	0x48000400

08000fac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fb2:	4b0f      	ldr	r3, [pc, #60]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fb6:	4a0e      	ldr	r2, [pc, #56]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fb8:	f043 0301 	orr.w	r3, r3, #1
 8000fbc:	6613      	str	r3, [r2, #96]	@ 0x60
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fc0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	607b      	str	r3, [r7, #4]
 8000fc8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fca:	4b09      	ldr	r3, [pc, #36]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fcc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fce:	4a08      	ldr	r2, [pc, #32]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fd4:	6593      	str	r3, [r2, #88]	@ 0x58
 8000fd6:	4b06      	ldr	r3, [pc, #24]	@ (8000ff0 <HAL_MspInit+0x44>)
 8000fd8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000fda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <NMI_Handler+0x4>

08000ffc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001000:	bf00      	nop
 8001002:	e7fd      	b.n	8001000 <HardFault_Handler+0x4>

08001004 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001004:	b480      	push	{r7}
 8001006:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <MemManage_Handler+0x4>

0800100c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800100c:	b480      	push	{r7}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001010:	bf00      	nop
 8001012:	e7fd      	b.n	8001010 <BusFault_Handler+0x4>

08001014 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <UsageFault_Handler+0x4>

0800101c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001020:	bf00      	nop
 8001022:	46bd      	mov	sp, r7
 8001024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001028:	4770      	bx	lr

0800102a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800102a:	b480      	push	{r7}
 800102c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800102e:	bf00      	nop
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr

08001038 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001038:	b480      	push	{r7}
 800103a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800103c:	bf00      	nop
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr

08001046 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800104a:	f000 f95b 	bl	8001304 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
	...

08001054 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001058:	4802      	ldr	r0, [pc, #8]	@ (8001064 <USART1_IRQHandler+0x10>)
 800105a:	f003 fb5b 	bl	8004714 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2000300c 	.word	0x2000300c

08001068 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800106c:	4802      	ldr	r0, [pc, #8]	@ (8001078 <SPI3_IRQHandler+0x10>)
 800106e:	f002 ff97 	bl	8003fa0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001072:	bf00      	nop
 8001074:	bd80      	pop	{r7, pc}
 8001076:	bf00      	nop
 8001078:	20002fa8 	.word	0x20002fa8

0800107c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001080:	4b06      	ldr	r3, [pc, #24]	@ (800109c <SystemInit+0x20>)
 8001082:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001086:	4a05      	ldr	r2, [pc, #20]	@ (800109c <SystemInit+0x20>)
 8001088:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800108c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	e000ed00 	.word	0xe000ed00

080010a0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010a4:	4b22      	ldr	r3, [pc, #136]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010a6:	4a23      	ldr	r2, [pc, #140]	@ (8001134 <MX_USART1_UART_Init+0x94>)
 80010a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80010aa:	4b21      	ldr	r3, [pc, #132]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010ac:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80010b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80010b2:	4b1f      	ldr	r3, [pc, #124]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010b4:	2200      	movs	r2, #0
 80010b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80010b8:	4b1d      	ldr	r3, [pc, #116]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80010be:	4b1c      	ldr	r3, [pc, #112]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010c0:	2200      	movs	r2, #0
 80010c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80010c4:	4b1a      	ldr	r3, [pc, #104]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010c6:	220c      	movs	r2, #12
 80010c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010ca:	4b19      	ldr	r3, [pc, #100]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80010d0:	4b17      	ldr	r3, [pc, #92]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010d6:	4b16      	ldr	r3, [pc, #88]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010d8:	2200      	movs	r2, #0
 80010da:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010dc:	4b14      	ldr	r3, [pc, #80]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010de:	2200      	movs	r2, #0
 80010e0:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010e2:	4b13      	ldr	r3, [pc, #76]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80010e8:	4811      	ldr	r0, [pc, #68]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010ea:	f003 fa35 	bl	8004558 <HAL_UART_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 80010f4:	f7ff feca 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80010f8:	2100      	movs	r1, #0
 80010fa:	480d      	ldr	r0, [pc, #52]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 80010fc:	f004 fc1f 	bl	800593e <HAL_UARTEx_SetTxFifoThreshold>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8001106:	f7ff fec1 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800110a:	2100      	movs	r1, #0
 800110c:	4808      	ldr	r0, [pc, #32]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 800110e:	f004 fc54 	bl	80059ba <HAL_UARTEx_SetRxFifoThreshold>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8001118:	f7ff feb8 	bl	8000e8c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800111c:	4804      	ldr	r0, [pc, #16]	@ (8001130 <MX_USART1_UART_Init+0x90>)
 800111e:	f004 fbd5 	bl	80058cc <HAL_UARTEx_DisableFifoMode>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8001128:	f7ff feb0 	bl	8000e8c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}
 8001130:	2000300c 	.word	0x2000300c
 8001134:	40013800 	.word	0x40013800

08001138 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b0b0      	sub	sp, #192	@ 0xc0
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001140:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]
 800114e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001150:	f107 0310 	add.w	r3, r7, #16
 8001154:	229c      	movs	r2, #156	@ 0x9c
 8001156:	2100      	movs	r1, #0
 8001158:	4618      	mov	r0, r3
 800115a:	f005 f9d5 	bl	8006508 <memset>
  if(uartHandle->Instance==USART1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4a26      	ldr	r2, [pc, #152]	@ (80011fc <HAL_UART_MspInit+0xc4>)
 8001164:	4293      	cmp	r3, r2
 8001166:	d145      	bne.n	80011f4 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001168:	2301      	movs	r3, #1
 800116a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800116c:	2300      	movs	r3, #0
 800116e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001170:	f107 0310 	add.w	r3, r7, #16
 8001174:	4618      	mov	r0, r3
 8001176:	f001 fc2b 	bl	80029d0 <HAL_RCCEx_PeriphCLKConfig>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001180:	f7ff fe84 	bl	8000e8c <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001184:	4b1e      	ldr	r3, [pc, #120]	@ (8001200 <HAL_UART_MspInit+0xc8>)
 8001186:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001188:	4a1d      	ldr	r2, [pc, #116]	@ (8001200 <HAL_UART_MspInit+0xc8>)
 800118a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800118e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001190:	4b1b      	ldr	r3, [pc, #108]	@ (8001200 <HAL_UART_MspInit+0xc8>)
 8001192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001194:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001198:	60fb      	str	r3, [r7, #12]
 800119a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 800119c:	4b18      	ldr	r3, [pc, #96]	@ (8001200 <HAL_UART_MspInit+0xc8>)
 800119e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011a0:	4a17      	ldr	r2, [pc, #92]	@ (8001200 <HAL_UART_MspInit+0xc8>)
 80011a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011a6:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80011a8:	4b15      	ldr	r3, [pc, #84]	@ (8001200 <HAL_UART_MspInit+0xc8>)
 80011aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80011ac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 80011b4:	f000 fd24 	bl	8001c00 <HAL_PWREx_EnableVddIO2>
    /**USART1 GPIO Configuration
    PG10     ------> USART1_RX
    PG9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
 80011b8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80011bc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011c0:	2302      	movs	r3, #2
 80011c2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011cc:	2303      	movs	r3, #3
 80011ce:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80011d2:	2307      	movs	r3, #7
 80011d4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80011d8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 80011dc:	4619      	mov	r1, r3
 80011de:	4809      	ldr	r0, [pc, #36]	@ (8001204 <HAL_UART_MspInit+0xcc>)
 80011e0:	f000 faa0 	bl	8001724 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80011e4:	2200      	movs	r2, #0
 80011e6:	2100      	movs	r1, #0
 80011e8:	2025      	movs	r0, #37	@ 0x25
 80011ea:	f000 f9aa 	bl	8001542 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80011ee:	2025      	movs	r0, #37	@ 0x25
 80011f0:	f000 f9c3 	bl	800157a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80011f4:	bf00      	nop
 80011f6:	37c0      	adds	r7, #192	@ 0xc0
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40013800 	.word	0x40013800
 8001200:	40021000 	.word	0x40021000
 8001204:	48001800 	.word	0x48001800

08001208 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001208:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001240 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800120c:	f7ff ff36 	bl	800107c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001210:	480c      	ldr	r0, [pc, #48]	@ (8001244 <LoopForever+0x6>)
  ldr r1, =_edata
 8001212:	490d      	ldr	r1, [pc, #52]	@ (8001248 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001214:	4a0d      	ldr	r2, [pc, #52]	@ (800124c <LoopForever+0xe>)
  movs r3, #0
 8001216:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001218:	e002      	b.n	8001220 <LoopCopyDataInit>

0800121a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800121a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800121c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800121e:	3304      	adds	r3, #4

08001220 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001220:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001222:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001224:	d3f9      	bcc.n	800121a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001226:	4a0a      	ldr	r2, [pc, #40]	@ (8001250 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001228:	4c0a      	ldr	r4, [pc, #40]	@ (8001254 <LoopForever+0x16>)
  movs r3, #0
 800122a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800122c:	e001      	b.n	8001232 <LoopFillZerobss>

0800122e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800122e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001230:	3204      	adds	r2, #4

08001232 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001232:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001234:	d3fb      	bcc.n	800122e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001236:	f005 f975 	bl	8006524 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800123a:	f7ff fdc7 	bl	8000dcc <main>

0800123e <LoopForever>:

LoopForever:
    b LoopForever
 800123e:	e7fe      	b.n	800123e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001240:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8001244:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001248:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800124c:	08017400 	.word	0x08017400
  ldr r2, =_sbss
 8001250:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8001254:	20005c20 	.word	0x20005c20

08001258 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001258:	e7fe      	b.n	8001258 <ADC1_IRQHandler>

0800125a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b082      	sub	sp, #8
 800125e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001260:	2300      	movs	r3, #0
 8001262:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001264:	2003      	movs	r0, #3
 8001266:	f000 f961 	bl	800152c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800126a:	200f      	movs	r0, #15
 800126c:	f000 f80e 	bl	800128c <HAL_InitTick>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d002      	beq.n	800127c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001276:	2301      	movs	r3, #1
 8001278:	71fb      	strb	r3, [r7, #7]
 800127a:	e001      	b.n	8001280 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800127c:	f7ff fe96 	bl	8000fac <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001280:	79fb      	ldrb	r3, [r7, #7]
}
 8001282:	4618      	mov	r0, r3
 8001284:	3708      	adds	r7, #8
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}
	...

0800128c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b084      	sub	sp, #16
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001294:	2300      	movs	r3, #0
 8001296:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001298:	4b17      	ldr	r3, [pc, #92]	@ (80012f8 <HAL_InitTick+0x6c>)
 800129a:	781b      	ldrb	r3, [r3, #0]
 800129c:	2b00      	cmp	r3, #0
 800129e:	d023      	beq.n	80012e8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 80012a0:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <HAL_InitTick+0x70>)
 80012a2:	681a      	ldr	r2, [r3, #0]
 80012a4:	4b14      	ldr	r3, [pc, #80]	@ (80012f8 <HAL_InitTick+0x6c>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	4619      	mov	r1, r3
 80012aa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012ae:	fbb3 f3f1 	udiv	r3, r3, r1
 80012b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 f96d 	bl	8001596 <HAL_SYSTICK_Config>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d10f      	bne.n	80012e2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	2b0f      	cmp	r3, #15
 80012c6:	d809      	bhi.n	80012dc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012c8:	2200      	movs	r2, #0
 80012ca:	6879      	ldr	r1, [r7, #4]
 80012cc:	f04f 30ff 	mov.w	r0, #4294967295
 80012d0:	f000 f937 	bl	8001542 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001300 <HAL_InitTick+0x74>)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e007      	b.n	80012ec <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80012dc:	2301      	movs	r3, #1
 80012de:	73fb      	strb	r3, [r7, #15]
 80012e0:	e004      	b.n	80012ec <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80012e2:	2301      	movs	r3, #1
 80012e4:	73fb      	strb	r3, [r7, #15]
 80012e6:	e001      	b.n	80012ec <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80012e8:	2301      	movs	r3, #1
 80012ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80012ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008
 80012fc:	20000000 	.word	0x20000000
 8001300:	20000004 	.word	0x20000004

08001304 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001304:	b480      	push	{r7}
 8001306:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001308:	4b06      	ldr	r3, [pc, #24]	@ (8001324 <HAL_IncTick+0x20>)
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	461a      	mov	r2, r3
 800130e:	4b06      	ldr	r3, [pc, #24]	@ (8001328 <HAL_IncTick+0x24>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	4413      	add	r3, r2
 8001314:	4a04      	ldr	r2, [pc, #16]	@ (8001328 <HAL_IncTick+0x24>)
 8001316:	6013      	str	r3, [r2, #0]
}
 8001318:	bf00      	nop
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	20000008 	.word	0x20000008
 8001328:	200030a0 	.word	0x200030a0

0800132c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800132c:	b480      	push	{r7}
 800132e:	af00      	add	r7, sp, #0
  return uwTick;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <HAL_GetTick+0x14>)
 8001332:	681b      	ldr	r3, [r3, #0]
}
 8001334:	4618      	mov	r0, r3
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
 800133e:	bf00      	nop
 8001340:	200030a0 	.word	0x200030a0

08001344 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b084      	sub	sp, #16
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800134c:	f7ff ffee 	bl	800132c <HAL_GetTick>
 8001350:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800135c:	d005      	beq.n	800136a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800135e:	4b0a      	ldr	r3, [pc, #40]	@ (8001388 <HAL_Delay+0x44>)
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	461a      	mov	r2, r3
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	4413      	add	r3, r2
 8001368:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800136a:	bf00      	nop
 800136c:	f7ff ffde 	bl	800132c <HAL_GetTick>
 8001370:	4602      	mov	r2, r0
 8001372:	68bb      	ldr	r3, [r7, #8]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	68fa      	ldr	r2, [r7, #12]
 8001378:	429a      	cmp	r2, r3
 800137a:	d8f7      	bhi.n	800136c <HAL_Delay+0x28>
  {
  }
}
 800137c:	bf00      	nop
 800137e:	bf00      	nop
 8001380:	3710      	adds	r7, #16
 8001382:	46bd      	mov	sp, r7
 8001384:	bd80      	pop	{r7, pc}
 8001386:	bf00      	nop
 8001388:	20000008 	.word	0x20000008

0800138c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	f003 0307 	and.w	r3, r3, #7
 800139a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800139c:	4b0c      	ldr	r3, [pc, #48]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 800139e:	68db      	ldr	r3, [r3, #12]
 80013a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013a2:	68ba      	ldr	r2, [r7, #8]
 80013a4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013b4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013b8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013be:	4a04      	ldr	r2, [pc, #16]	@ (80013d0 <__NVIC_SetPriorityGrouping+0x44>)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	60d3      	str	r3, [r2, #12]
}
 80013c4:	bf00      	nop
 80013c6:	3714      	adds	r7, #20
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	e000ed00 	.word	0xe000ed00

080013d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013d4:	b480      	push	{r7}
 80013d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013d8:	4b04      	ldr	r3, [pc, #16]	@ (80013ec <__NVIC_GetPriorityGrouping+0x18>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	0a1b      	lsrs	r3, r3, #8
 80013de:	f003 0307 	and.w	r3, r3, #7
}
 80013e2:	4618      	mov	r0, r3
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013fe:	2b00      	cmp	r3, #0
 8001400:	db0b      	blt.n	800141a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001402:	79fb      	ldrb	r3, [r7, #7]
 8001404:	f003 021f 	and.w	r2, r3, #31
 8001408:	4907      	ldr	r1, [pc, #28]	@ (8001428 <__NVIC_EnableIRQ+0x38>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	095b      	lsrs	r3, r3, #5
 8001410:	2001      	movs	r0, #1
 8001412:	fa00 f202 	lsl.w	r2, r0, r2
 8001416:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000e100 	.word	0xe000e100

0800142c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	6039      	str	r1, [r7, #0]
 8001436:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001438:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143c:	2b00      	cmp	r3, #0
 800143e:	db0a      	blt.n	8001456 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	b2da      	uxtb	r2, r3
 8001444:	490c      	ldr	r1, [pc, #48]	@ (8001478 <__NVIC_SetPriority+0x4c>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	0112      	lsls	r2, r2, #4
 800144c:	b2d2      	uxtb	r2, r2
 800144e:	440b      	add	r3, r1
 8001450:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001454:	e00a      	b.n	800146c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4908      	ldr	r1, [pc, #32]	@ (800147c <__NVIC_SetPriority+0x50>)
 800145c:	79fb      	ldrb	r3, [r7, #7]
 800145e:	f003 030f 	and.w	r3, r3, #15
 8001462:	3b04      	subs	r3, #4
 8001464:	0112      	lsls	r2, r2, #4
 8001466:	b2d2      	uxtb	r2, r2
 8001468:	440b      	add	r3, r1
 800146a:	761a      	strb	r2, [r3, #24]
}
 800146c:	bf00      	nop
 800146e:	370c      	adds	r7, #12
 8001470:	46bd      	mov	sp, r7
 8001472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001476:	4770      	bx	lr
 8001478:	e000e100 	.word	0xe000e100
 800147c:	e000ed00 	.word	0xe000ed00

08001480 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001480:	b480      	push	{r7}
 8001482:	b089      	sub	sp, #36	@ 0x24
 8001484:	af00      	add	r7, sp, #0
 8001486:	60f8      	str	r0, [r7, #12]
 8001488:	60b9      	str	r1, [r7, #8]
 800148a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800148c:	68fb      	ldr	r3, [r7, #12]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001494:	69fb      	ldr	r3, [r7, #28]
 8001496:	f1c3 0307 	rsb	r3, r3, #7
 800149a:	2b04      	cmp	r3, #4
 800149c:	bf28      	it	cs
 800149e:	2304      	movcs	r3, #4
 80014a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	3304      	adds	r3, #4
 80014a6:	2b06      	cmp	r3, #6
 80014a8:	d902      	bls.n	80014b0 <NVIC_EncodePriority+0x30>
 80014aa:	69fb      	ldr	r3, [r7, #28]
 80014ac:	3b03      	subs	r3, #3
 80014ae:	e000      	b.n	80014b2 <NVIC_EncodePriority+0x32>
 80014b0:	2300      	movs	r3, #0
 80014b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b4:	f04f 32ff 	mov.w	r2, #4294967295
 80014b8:	69bb      	ldr	r3, [r7, #24]
 80014ba:	fa02 f303 	lsl.w	r3, r2, r3
 80014be:	43da      	mvns	r2, r3
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	401a      	ands	r2, r3
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014c8:	f04f 31ff 	mov.w	r1, #4294967295
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43d9      	mvns	r1, r3
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014d8:	4313      	orrs	r3, r2
         );
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3724      	adds	r7, #36	@ 0x24
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
	...

080014e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b082      	sub	sp, #8
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	3b01      	subs	r3, #1
 80014f4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014f8:	d301      	bcc.n	80014fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014fa:	2301      	movs	r3, #1
 80014fc:	e00f      	b.n	800151e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014fe:	4a0a      	ldr	r2, [pc, #40]	@ (8001528 <SysTick_Config+0x40>)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	3b01      	subs	r3, #1
 8001504:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001506:	210f      	movs	r1, #15
 8001508:	f04f 30ff 	mov.w	r0, #4294967295
 800150c:	f7ff ff8e 	bl	800142c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001510:	4b05      	ldr	r3, [pc, #20]	@ (8001528 <SysTick_Config+0x40>)
 8001512:	2200      	movs	r2, #0
 8001514:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001516:	4b04      	ldr	r3, [pc, #16]	@ (8001528 <SysTick_Config+0x40>)
 8001518:	2207      	movs	r2, #7
 800151a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800151c:	2300      	movs	r3, #0
}
 800151e:	4618      	mov	r0, r3
 8001520:	3708      	adds	r7, #8
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	e000e010 	.word	0xe000e010

0800152c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001534:	6878      	ldr	r0, [r7, #4]
 8001536:	f7ff ff29 	bl	800138c <__NVIC_SetPriorityGrouping>
}
 800153a:	bf00      	nop
 800153c:	3708      	adds	r7, #8
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}

08001542 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001542:	b580      	push	{r7, lr}
 8001544:	b086      	sub	sp, #24
 8001546:	af00      	add	r7, sp, #0
 8001548:	4603      	mov	r3, r0
 800154a:	60b9      	str	r1, [r7, #8]
 800154c:	607a      	str	r2, [r7, #4]
 800154e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001550:	2300      	movs	r3, #0
 8001552:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001554:	f7ff ff3e 	bl	80013d4 <__NVIC_GetPriorityGrouping>
 8001558:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800155a:	687a      	ldr	r2, [r7, #4]
 800155c:	68b9      	ldr	r1, [r7, #8]
 800155e:	6978      	ldr	r0, [r7, #20]
 8001560:	f7ff ff8e 	bl	8001480 <NVIC_EncodePriority>
 8001564:	4602      	mov	r2, r0
 8001566:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800156a:	4611      	mov	r1, r2
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff ff5d 	bl	800142c <__NVIC_SetPriority>
}
 8001572:	bf00      	nop
 8001574:	3718      	adds	r7, #24
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}

0800157a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800157a:	b580      	push	{r7, lr}
 800157c:	b082      	sub	sp, #8
 800157e:	af00      	add	r7, sp, #0
 8001580:	4603      	mov	r3, r0
 8001582:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001588:	4618      	mov	r0, r3
 800158a:	f7ff ff31 	bl	80013f0 <__NVIC_EnableIRQ>
}
 800158e:	bf00      	nop
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}

08001596 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001596:	b580      	push	{r7, lr}
 8001598:	b082      	sub	sp, #8
 800159a:	af00      	add	r7, sp, #0
 800159c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800159e:	6878      	ldr	r0, [r7, #4]
 80015a0:	f7ff ffa2 	bl	80014e8 <SysTick_Config>
 80015a4:	4603      	mov	r3, r0
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3708      	adds	r7, #8
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bd80      	pop	{r7, pc}

080015ae <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015ae:	b480      	push	{r7}
 80015b0:	b085      	sub	sp, #20
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015b6:	2300      	movs	r3, #0
 80015b8:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	2b02      	cmp	r3, #2
 80015c4:	d008      	beq.n	80015d8 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	2204      	movs	r2, #4
 80015ca:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	2200      	movs	r2, #0
 80015d0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e040      	b.n	800165a <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	681a      	ldr	r2, [r3, #0]
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f022 020e 	bic.w	r2, r2, #14
 80015e6:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80015f2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80015f6:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f022 0201 	bic.w	r2, r2, #1
 8001606:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800160c:	f003 021c 	and.w	r2, r3, #28
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001614:	2101      	movs	r1, #1
 8001616:	fa01 f202 	lsl.w	r2, r1, r2
 800161a:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001620:	687a      	ldr	r2, [r7, #4]
 8001622:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8001624:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800162a:	2b00      	cmp	r3, #0
 800162c:	d00c      	beq.n	8001648 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001638:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800163c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8001646:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	2200      	movs	r2, #0
 8001654:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8001658:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 800165a:	4618      	mov	r0, r3
 800165c:	3714      	adds	r7, #20
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr

08001666 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001666:	b580      	push	{r7, lr}
 8001668:	b084      	sub	sp, #16
 800166a:	af00      	add	r7, sp, #0
 800166c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800166e:	2300      	movs	r3, #0
 8001670:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8001678:	b2db      	uxtb	r3, r3
 800167a:	2b02      	cmp	r3, #2
 800167c:	d005      	beq.n	800168a <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	2204      	movs	r2, #4
 8001682:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8001684:	2301      	movs	r3, #1
 8001686:	73fb      	strb	r3, [r7, #15]
 8001688:	e047      	b.n	800171a <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 020e 	bic.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f022 0201 	bic.w	r2, r2, #1
 80016a8:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80016b4:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016b8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016be:	f003 021c 	and.w	r2, r3, #28
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c6:	2101      	movs	r1, #1
 80016c8:	fa01 f202 	lsl.w	r2, r1, r2
 80016cc:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80016d2:	687a      	ldr	r2, [r7, #4]
 80016d4:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80016d6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d00c      	beq.n	80016fa <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016e4:	681a      	ldr	r2, [r3, #0]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ea:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80016ee:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80016f8:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	2201      	movs	r2, #1
 80016fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800170e:	2b00      	cmp	r3, #0
 8001710:	d003      	beq.n	800171a <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	4798      	blx	r3
    }
  }
  return status;
 800171a:	7bfb      	ldrb	r3, [r7, #15]
}
 800171c:	4618      	mov	r0, r3
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b087      	sub	sp, #28
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001732:	e166      	b.n	8001a02 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681a      	ldr	r2, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	fa01 f303 	lsl.w	r3, r1, r3
 8001740:	4013      	ands	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001744:	68fb      	ldr	r3, [r7, #12]
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 8158 	beq.w	80019fc <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	685b      	ldr	r3, [r3, #4]
 8001750:	f003 0303 	and.w	r3, r3, #3
 8001754:	2b01      	cmp	r3, #1
 8001756:	d005      	beq.n	8001764 <HAL_GPIO_Init+0x40>
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	f003 0303 	and.w	r3, r3, #3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d130      	bne.n	80017c6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	005b      	lsls	r3, r3, #1
 800176e:	2203      	movs	r2, #3
 8001770:	fa02 f303 	lsl.w	r3, r2, r3
 8001774:	43db      	mvns	r3, r3
 8001776:	693a      	ldr	r2, [r7, #16]
 8001778:	4013      	ands	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	697b      	ldr	r3, [r7, #20]
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800179a:	2201      	movs	r2, #1
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	43db      	mvns	r3, r3
 80017a4:	693a      	ldr	r2, [r7, #16]
 80017a6:	4013      	ands	r3, r2
 80017a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685b      	ldr	r3, [r3, #4]
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 0201 	and.w	r2, r3, #1
 80017b4:	697b      	ldr	r3, [r7, #20]
 80017b6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ba:	693a      	ldr	r2, [r7, #16]
 80017bc:	4313      	orrs	r3, r2
 80017be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f003 0303 	and.w	r3, r3, #3
 80017ce:	2b03      	cmp	r3, #3
 80017d0:	d017      	beq.n	8001802 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	68db      	ldr	r3, [r3, #12]
 80017d6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	2203      	movs	r2, #3
 80017de:	fa02 f303 	lsl.w	r3, r2, r3
 80017e2:	43db      	mvns	r3, r3
 80017e4:	693a      	ldr	r2, [r7, #16]
 80017e6:	4013      	ands	r3, r2
 80017e8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017ea:	683b      	ldr	r3, [r7, #0]
 80017ec:	689a      	ldr	r2, [r3, #8]
 80017ee:	697b      	ldr	r3, [r7, #20]
 80017f0:	005b      	lsls	r3, r3, #1
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	693a      	ldr	r2, [r7, #16]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001802:	683b      	ldr	r3, [r7, #0]
 8001804:	685b      	ldr	r3, [r3, #4]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d123      	bne.n	8001856 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800180e:	697b      	ldr	r3, [r7, #20]
 8001810:	08da      	lsrs	r2, r3, #3
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3208      	adds	r2, #8
 8001816:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800181a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	f003 0307 	and.w	r3, r3, #7
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	220f      	movs	r2, #15
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	43db      	mvns	r3, r3
 800182c:	693a      	ldr	r2, [r7, #16]
 800182e:	4013      	ands	r3, r2
 8001830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001832:	683b      	ldr	r3, [r7, #0]
 8001834:	691a      	ldr	r2, [r3, #16]
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001848:	697b      	ldr	r3, [r7, #20]
 800184a:	08da      	lsrs	r2, r3, #3
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3208      	adds	r2, #8
 8001850:	6939      	ldr	r1, [r7, #16]
 8001852:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	2203      	movs	r2, #3
 8001862:	fa02 f303 	lsl.w	r3, r2, r3
 8001866:	43db      	mvns	r3, r3
 8001868:	693a      	ldr	r2, [r7, #16]
 800186a:	4013      	ands	r3, r2
 800186c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	f003 0203 	and.w	r2, r3, #3
 8001876:	697b      	ldr	r3, [r7, #20]
 8001878:	005b      	lsls	r3, r3, #1
 800187a:	fa02 f303 	lsl.w	r3, r2, r3
 800187e:	693a      	ldr	r2, [r7, #16]
 8001880:	4313      	orrs	r3, r2
 8001882:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	693a      	ldr	r2, [r7, #16]
 8001888:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	685b      	ldr	r3, [r3, #4]
 800188e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80b2 	beq.w	80019fc <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001898:	4b61      	ldr	r3, [pc, #388]	@ (8001a20 <HAL_GPIO_Init+0x2fc>)
 800189a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800189c:	4a60      	ldr	r2, [pc, #384]	@ (8001a20 <HAL_GPIO_Init+0x2fc>)
 800189e:	f043 0301 	orr.w	r3, r3, #1
 80018a2:	6613      	str	r3, [r2, #96]	@ 0x60
 80018a4:	4b5e      	ldr	r3, [pc, #376]	@ (8001a20 <HAL_GPIO_Init+0x2fc>)
 80018a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80018a8:	f003 0301 	and.w	r3, r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018b0:	4a5c      	ldr	r2, [pc, #368]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	089b      	lsrs	r3, r3, #2
 80018b6:	3302      	adds	r3, #2
 80018b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	f003 0303 	and.w	r3, r3, #3
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	220f      	movs	r2, #15
 80018c8:	fa02 f303 	lsl.w	r3, r2, r3
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80018da:	d02b      	beq.n	8001934 <HAL_GPIO_Init+0x210>
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	4a52      	ldr	r2, [pc, #328]	@ (8001a28 <HAL_GPIO_Init+0x304>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d025      	beq.n	8001930 <HAL_GPIO_Init+0x20c>
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a51      	ldr	r2, [pc, #324]	@ (8001a2c <HAL_GPIO_Init+0x308>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d01f      	beq.n	800192c <HAL_GPIO_Init+0x208>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	4a50      	ldr	r2, [pc, #320]	@ (8001a30 <HAL_GPIO_Init+0x30c>)
 80018f0:	4293      	cmp	r3, r2
 80018f2:	d019      	beq.n	8001928 <HAL_GPIO_Init+0x204>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a4f      	ldr	r2, [pc, #316]	@ (8001a34 <HAL_GPIO_Init+0x310>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d013      	beq.n	8001924 <HAL_GPIO_Init+0x200>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a4e      	ldr	r2, [pc, #312]	@ (8001a38 <HAL_GPIO_Init+0x314>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d00d      	beq.n	8001920 <HAL_GPIO_Init+0x1fc>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a4d      	ldr	r2, [pc, #308]	@ (8001a3c <HAL_GPIO_Init+0x318>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d007      	beq.n	800191c <HAL_GPIO_Init+0x1f8>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a4c      	ldr	r2, [pc, #304]	@ (8001a40 <HAL_GPIO_Init+0x31c>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d101      	bne.n	8001918 <HAL_GPIO_Init+0x1f4>
 8001914:	2307      	movs	r3, #7
 8001916:	e00e      	b.n	8001936 <HAL_GPIO_Init+0x212>
 8001918:	2308      	movs	r3, #8
 800191a:	e00c      	b.n	8001936 <HAL_GPIO_Init+0x212>
 800191c:	2306      	movs	r3, #6
 800191e:	e00a      	b.n	8001936 <HAL_GPIO_Init+0x212>
 8001920:	2305      	movs	r3, #5
 8001922:	e008      	b.n	8001936 <HAL_GPIO_Init+0x212>
 8001924:	2304      	movs	r3, #4
 8001926:	e006      	b.n	8001936 <HAL_GPIO_Init+0x212>
 8001928:	2303      	movs	r3, #3
 800192a:	e004      	b.n	8001936 <HAL_GPIO_Init+0x212>
 800192c:	2302      	movs	r3, #2
 800192e:	e002      	b.n	8001936 <HAL_GPIO_Init+0x212>
 8001930:	2301      	movs	r3, #1
 8001932:	e000      	b.n	8001936 <HAL_GPIO_Init+0x212>
 8001934:	2300      	movs	r3, #0
 8001936:	697a      	ldr	r2, [r7, #20]
 8001938:	f002 0203 	and.w	r2, r2, #3
 800193c:	0092      	lsls	r2, r2, #2
 800193e:	4093      	lsls	r3, r2
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	4313      	orrs	r3, r2
 8001944:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001946:	4937      	ldr	r1, [pc, #220]	@ (8001a24 <HAL_GPIO_Init+0x300>)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	089b      	lsrs	r3, r3, #2
 800194c:	3302      	adds	r3, #2
 800194e:	693a      	ldr	r2, [r7, #16]
 8001950:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001954:	4b3b      	ldr	r3, [pc, #236]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800195a:	68fb      	ldr	r3, [r7, #12]
 800195c:	43db      	mvns	r3, r3
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	4013      	ands	r3, r2
 8001962:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800196c:	2b00      	cmp	r3, #0
 800196e:	d003      	beq.n	8001978 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001970:	693a      	ldr	r2, [r7, #16]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	4313      	orrs	r3, r2
 8001976:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001978:	4a32      	ldr	r2, [pc, #200]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800197e:	4b31      	ldr	r3, [pc, #196]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	43db      	mvns	r3, r3
 8001988:	693a      	ldr	r2, [r7, #16]
 800198a:	4013      	ands	r3, r2
 800198c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	685b      	ldr	r3, [r3, #4]
 8001992:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80019a2:	4a28      	ldr	r2, [pc, #160]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 80019a4:	693b      	ldr	r3, [r7, #16]
 80019a6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80019a8:	4b26      	ldr	r3, [pc, #152]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	43db      	mvns	r3, r3
 80019b2:	693a      	ldr	r2, [r7, #16]
 80019b4:	4013      	ands	r3, r2
 80019b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d003      	beq.n	80019cc <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80019c4:	693a      	ldr	r2, [r7, #16]
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4313      	orrs	r3, r2
 80019ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80019cc:	4a1d      	ldr	r2, [pc, #116]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 80019ce:	693b      	ldr	r3, [r7, #16]
 80019d0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80019d2:	4b1c      	ldr	r3, [pc, #112]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	43db      	mvns	r3, r3
 80019dc:	693a      	ldr	r2, [r7, #16]
 80019de:	4013      	ands	r3, r2
 80019e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d003      	beq.n	80019f6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 80019ee:	693a      	ldr	r2, [r7, #16]
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	4313      	orrs	r3, r2
 80019f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80019f6:	4a13      	ldr	r2, [pc, #76]	@ (8001a44 <HAL_GPIO_Init+0x320>)
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80019fc:	697b      	ldr	r3, [r7, #20]
 80019fe:	3301      	adds	r3, #1
 8001a00:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a02:	683b      	ldr	r3, [r7, #0]
 8001a04:	681a      	ldr	r2, [r3, #0]
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa22 f303 	lsr.w	r3, r2, r3
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	f47f ae91 	bne.w	8001734 <HAL_GPIO_Init+0x10>
  }
}
 8001a12:	bf00      	nop
 8001a14:	bf00      	nop
 8001a16:	371c      	adds	r7, #28
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	40010000 	.word	0x40010000
 8001a28:	48000400 	.word	0x48000400
 8001a2c:	48000800 	.word	0x48000800
 8001a30:	48000c00 	.word	0x48000c00
 8001a34:	48001000 	.word	0x48001000
 8001a38:	48001400 	.word	0x48001400
 8001a3c:	48001800 	.word	0x48001800
 8001a40:	48001c00 	.word	0x48001c00
 8001a44:	40010400 	.word	0x40010400

08001a48 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	460b      	mov	r3, r1
 8001a52:	807b      	strh	r3, [r7, #2]
 8001a54:	4613      	mov	r3, r2
 8001a56:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a58:	787b      	ldrb	r3, [r7, #1]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d003      	beq.n	8001a66 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a5e:	887a      	ldrh	r2, [r7, #2]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a64:	e002      	b.n	8001a6c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a66:	887a      	ldrh	r2, [r7, #2]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001a6c:	bf00      	nop
 8001a6e:	370c      	adds	r7, #12
 8001a70:	46bd      	mov	sp, r7
 8001a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a76:	4770      	bx	lr

08001a78 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8001ab4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001a88:	d102      	bne.n	8001a90 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001a8a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a8e:	e00b      	b.n	8001aa8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001a92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001a96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001a9e:	d102      	bne.n	8001aa6 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001aa0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001aa4:	e000      	b.n	8001aa8 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001aa6:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	40007000 	.word	0x40007000

08001ab8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d141      	bne.n	8001b4a <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001ac6:	4b4b      	ldr	r3, [pc, #300]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001ace:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ad2:	d131      	bne.n	8001b38 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001ad4:	4b47      	ldr	r3, [pc, #284]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ada:	4a46      	ldr	r2, [pc, #280]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001adc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ae0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001ae4:	4b43      	ldr	r3, [pc, #268]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001aec:	4a41      	ldr	r2, [pc, #260]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001af2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001af4:	4b40      	ldr	r3, [pc, #256]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	2232      	movs	r2, #50	@ 0x32
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	4a3f      	ldr	r2, [pc, #252]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b00:	fba2 2303 	umull	r2, r3, r2, r3
 8001b04:	0c9b      	lsrs	r3, r3, #18
 8001b06:	3301      	adds	r3, #1
 8001b08:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b0a:	e002      	b.n	8001b12 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	3b01      	subs	r3, #1
 8001b10:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b12:	4b38      	ldr	r3, [pc, #224]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b14:	695b      	ldr	r3, [r3, #20]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b1e:	d102      	bne.n	8001b26 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f2      	bne.n	8001b0c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001b26:	4b33      	ldr	r3, [pc, #204]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b28:	695b      	ldr	r3, [r3, #20]
 8001b2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001b2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b32:	d158      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001b34:	2303      	movs	r3, #3
 8001b36:	e057      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b38:	4b2e      	ldr	r3, [pc, #184]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b3e:	4a2d      	ldr	r2, [pc, #180]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b40:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001b44:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001b48:	e04d      	b.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001b50:	d141      	bne.n	8001bd6 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001b52:	4b28      	ldr	r3, [pc, #160]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001b5a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001b5e:	d131      	bne.n	8001bc4 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001b60:	4b24      	ldr	r3, [pc, #144]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001b66:	4a23      	ldr	r2, [pc, #140]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001b70:	4b20      	ldr	r3, [pc, #128]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001b78:	4a1e      	ldr	r2, [pc, #120]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001b7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001b80:	4b1d      	ldr	r3, [pc, #116]	@ (8001bf8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	2232      	movs	r2, #50	@ 0x32
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	4a1c      	ldr	r2, [pc, #112]	@ (8001bfc <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8001b90:	0c9b      	lsrs	r3, r3, #18
 8001b92:	3301      	adds	r3, #1
 8001b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b96:	e002      	b.n	8001b9e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3b01      	subs	r3, #1
 8001b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001b9e:	4b15      	ldr	r3, [pc, #84]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ba0:	695b      	ldr	r3, [r3, #20]
 8001ba2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001ba6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001baa:	d102      	bne.n	8001bb2 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f2      	bne.n	8001b98 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001bb2:	4b10      	ldr	r3, [pc, #64]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bb4:	695b      	ldr	r3, [r3, #20]
 8001bb6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001bba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bbe:	d112      	bne.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001bc0:	2303      	movs	r3, #3
 8001bc2:	e011      	b.n	8001be8 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001bc4:	4b0b      	ldr	r3, [pc, #44]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bca:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bcc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001bd0:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001bd4:	e007      	b.n	8001be6 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001bd6:	4b07      	ldr	r3, [pc, #28]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001bde:	4a05      	ldr	r2, [pc, #20]	@ (8001bf4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001be0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001be4:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001be6:	2300      	movs	r3, #0
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3714      	adds	r7, #20
 8001bec:	46bd      	mov	sp, r7
 8001bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf2:	4770      	bx	lr
 8001bf4:	40007000 	.word	0x40007000
 8001bf8:	20000000 	.word	0x20000000
 8001bfc:	431bde83 	.word	0x431bde83

08001c00 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001c00:	b480      	push	{r7}
 8001c02:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001c04:	4b05      	ldr	r3, [pc, #20]	@ (8001c1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001c0a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0e:	6053      	str	r3, [r2, #4]
}
 8001c10:	bf00      	nop
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr
 8001c1a:	bf00      	nop
 8001c1c:	40007000 	.word	0x40007000

08001c20 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b088      	sub	sp, #32
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d102      	bne.n	8001c34 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	f000 bc08 	b.w	8002444 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c34:	4b96      	ldr	r3, [pc, #600]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	f003 030c 	and.w	r3, r3, #12
 8001c3c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c3e:	4b94      	ldr	r3, [pc, #592]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f003 0303 	and.w	r3, r3, #3
 8001c46:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0310 	and.w	r3, r3, #16
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	f000 80e4 	beq.w	8001e1e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c56:	69bb      	ldr	r3, [r7, #24]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d007      	beq.n	8001c6c <HAL_RCC_OscConfig+0x4c>
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2b0c      	cmp	r3, #12
 8001c60:	f040 808b 	bne.w	8001d7a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001c64:	697b      	ldr	r3, [r7, #20]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	f040 8087 	bne.w	8001d7a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001c6c:	4b88      	ldr	r3, [pc, #544]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0302 	and.w	r3, r3, #2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d005      	beq.n	8001c84 <HAL_RCC_OscConfig+0x64>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	699b      	ldr	r3, [r3, #24]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d101      	bne.n	8001c84 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	e3df      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	6a1a      	ldr	r2, [r3, #32]
 8001c88:	4b81      	ldr	r3, [pc, #516]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0308 	and.w	r3, r3, #8
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d004      	beq.n	8001c9e <HAL_RCC_OscConfig+0x7e>
 8001c94:	4b7e      	ldr	r3, [pc, #504]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001c9c:	e005      	b.n	8001caa <HAL_RCC_OscConfig+0x8a>
 8001c9e:	4b7c      	ldr	r3, [pc, #496]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001ca0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ca4:	091b      	lsrs	r3, r3, #4
 8001ca6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d223      	bcs.n	8001cf6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a1b      	ldr	r3, [r3, #32]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f000 fdcc 	bl	8002850 <RCC_SetFlashLatencyFromMSIRange>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	e3c0      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cc2:	4b73      	ldr	r3, [pc, #460]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a72      	ldr	r2, [pc, #456]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cc8:	f043 0308 	orr.w	r3, r3, #8
 8001ccc:	6013      	str	r3, [r2, #0]
 8001cce:	4b70      	ldr	r3, [pc, #448]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a1b      	ldr	r3, [r3, #32]
 8001cda:	496d      	ldr	r1, [pc, #436]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cdc:	4313      	orrs	r3, r2
 8001cde:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001ce0:	4b6b      	ldr	r3, [pc, #428]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	69db      	ldr	r3, [r3, #28]
 8001cec:	021b      	lsls	r3, r3, #8
 8001cee:	4968      	ldr	r1, [pc, #416]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
 8001cf4:	e025      	b.n	8001d42 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001cf6:	4b66      	ldr	r3, [pc, #408]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4a65      	ldr	r2, [pc, #404]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001cfc:	f043 0308 	orr.w	r3, r3, #8
 8001d00:	6013      	str	r3, [r2, #0]
 8001d02:	4b63      	ldr	r3, [pc, #396]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	6a1b      	ldr	r3, [r3, #32]
 8001d0e:	4960      	ldr	r1, [pc, #384]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001d14:	4b5e      	ldr	r3, [pc, #376]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	69db      	ldr	r3, [r3, #28]
 8001d20:	021b      	lsls	r3, r3, #8
 8001d22:	495b      	ldr	r1, [pc, #364]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d109      	bne.n	8001d42 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6a1b      	ldr	r3, [r3, #32]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f000 fd8c 	bl	8002850 <RCC_SetFlashLatencyFromMSIRange>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e380      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d42:	f000 fcc1 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8001d46:	4602      	mov	r2, r0
 8001d48:	4b51      	ldr	r3, [pc, #324]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	091b      	lsrs	r3, r3, #4
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	4950      	ldr	r1, [pc, #320]	@ (8001e94 <HAL_RCC_OscConfig+0x274>)
 8001d54:	5ccb      	ldrb	r3, [r1, r3]
 8001d56:	f003 031f 	and.w	r3, r3, #31
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a4e      	ldr	r2, [pc, #312]	@ (8001e98 <HAL_RCC_OscConfig+0x278>)
 8001d60:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001d62:	4b4e      	ldr	r3, [pc, #312]	@ (8001e9c <HAL_RCC_OscConfig+0x27c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff fa90 	bl	800128c <HAL_InitTick>
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001d70:	7bfb      	ldrb	r3, [r7, #15]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d052      	beq.n	8001e1c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001d76:	7bfb      	ldrb	r3, [r7, #15]
 8001d78:	e364      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d032      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001d82:	4b43      	ldr	r3, [pc, #268]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a42      	ldr	r2, [pc, #264]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001d8e:	f7ff facd 	bl	800132c <HAL_GetTick>
 8001d92:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001d94:	e008      	b.n	8001da8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001d96:	f7ff fac9 	bl	800132c <HAL_GetTick>
 8001d9a:	4602      	mov	r2, r0
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	1ad3      	subs	r3, r2, r3
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	d901      	bls.n	8001da8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001da4:	2303      	movs	r3, #3
 8001da6:	e34d      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001da8:	4b39      	ldr	r3, [pc, #228]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 0302 	and.w	r3, r3, #2
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d0f0      	beq.n	8001d96 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001db4:	4b36      	ldr	r3, [pc, #216]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a35      	ldr	r2, [pc, #212]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dba:	f043 0308 	orr.w	r3, r3, #8
 8001dbe:	6013      	str	r3, [r2, #0]
 8001dc0:	4b33      	ldr	r3, [pc, #204]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6a1b      	ldr	r3, [r3, #32]
 8001dcc:	4930      	ldr	r1, [pc, #192]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001dd2:	4b2f      	ldr	r3, [pc, #188]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	69db      	ldr	r3, [r3, #28]
 8001dde:	021b      	lsls	r3, r3, #8
 8001de0:	492b      	ldr	r1, [pc, #172]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001de2:	4313      	orrs	r3, r2
 8001de4:	604b      	str	r3, [r1, #4]
 8001de6:	e01a      	b.n	8001e1e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001de8:	4b29      	ldr	r3, [pc, #164]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	4a28      	ldr	r2, [pc, #160]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fa9a 	bl	800132c <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fa96 	bl	800132c <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e31a      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001e0e:	4b20      	ldr	r3, [pc, #128]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1dc>
 8001e1a:	e000      	b.n	8001e1e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001e1c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d073      	beq.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001e2a:	69bb      	ldr	r3, [r7, #24]
 8001e2c:	2b08      	cmp	r3, #8
 8001e2e:	d005      	beq.n	8001e3c <HAL_RCC_OscConfig+0x21c>
 8001e30:	69bb      	ldr	r3, [r7, #24]
 8001e32:	2b0c      	cmp	r3, #12
 8001e34:	d10e      	bne.n	8001e54 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b03      	cmp	r3, #3
 8001e3a:	d10b      	bne.n	8001e54 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e3c:	4b14      	ldr	r3, [pc, #80]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d063      	beq.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d15f      	bne.n	8001f10 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e2f7      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e5c:	d106      	bne.n	8001e6c <HAL_RCC_OscConfig+0x24c>
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a0b      	ldr	r2, [pc, #44]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	e025      	b.n	8001eb8 <HAL_RCC_OscConfig+0x298>
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e74:	d114      	bne.n	8001ea0 <HAL_RCC_OscConfig+0x280>
 8001e76:	4b06      	ldr	r3, [pc, #24]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	4a05      	ldr	r2, [pc, #20]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e7c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e80:	6013      	str	r3, [r2, #0]
 8001e82:	4b03      	ldr	r3, [pc, #12]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	4a02      	ldr	r2, [pc, #8]	@ (8001e90 <HAL_RCC_OscConfig+0x270>)
 8001e88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e8c:	6013      	str	r3, [r2, #0]
 8001e8e:	e013      	b.n	8001eb8 <HAL_RCC_OscConfig+0x298>
 8001e90:	40021000 	.word	0x40021000
 8001e94:	08017368 	.word	0x08017368
 8001e98:	20000000 	.word	0x20000000
 8001e9c:	20000004 	.word	0x20000004
 8001ea0:	4ba0      	ldr	r3, [pc, #640]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a9f      	ldr	r2, [pc, #636]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ea6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001eaa:	6013      	str	r3, [r2, #0]
 8001eac:	4b9d      	ldr	r3, [pc, #628]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a9c      	ldr	r2, [pc, #624]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001eb2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001eb6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	685b      	ldr	r3, [r3, #4]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d013      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec0:	f7ff fa34 	bl	800132c <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7ff fa30 	bl	800132c <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	@ 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e2b4      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eda:	4b92      	ldr	r3, [pc, #584]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d0f0      	beq.n	8001ec8 <HAL_RCC_OscConfig+0x2a8>
 8001ee6:	e014      	b.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee8:	f7ff fa20 	bl	800132c <HAL_GetTick>
 8001eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001eee:	e008      	b.n	8001f02 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ef0:	f7ff fa1c 	bl	800132c <HAL_GetTick>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	1ad3      	subs	r3, r2, r3
 8001efa:	2b64      	cmp	r3, #100	@ 0x64
 8001efc:	d901      	bls.n	8001f02 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e2a0      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f02:	4b88      	ldr	r3, [pc, #544]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d1f0      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x2d0>
 8001f0e:	e000      	b.n	8001f12 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f10:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 0302 	and.w	r3, r3, #2
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d060      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001f1e:	69bb      	ldr	r3, [r7, #24]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d005      	beq.n	8001f30 <HAL_RCC_OscConfig+0x310>
 8001f24:	69bb      	ldr	r3, [r7, #24]
 8001f26:	2b0c      	cmp	r3, #12
 8001f28:	d119      	bne.n	8001f5e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d116      	bne.n	8001f5e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f30:	4b7c      	ldr	r3, [pc, #496]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_OscConfig+0x328>
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d101      	bne.n	8001f48 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001f44:	2301      	movs	r3, #1
 8001f46:	e27d      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f48:	4b76      	ldr	r3, [pc, #472]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	061b      	lsls	r3, r3, #24
 8001f56:	4973      	ldr	r1, [pc, #460]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f5c:	e040      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d023      	beq.n	8001fae <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f66:	4b6f      	ldr	r3, [pc, #444]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4a6e      	ldr	r2, [pc, #440]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001f70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f72:	f7ff f9db 	bl	800132c <HAL_GetTick>
 8001f76:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f78:	e008      	b.n	8001f8c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f7a:	f7ff f9d7 	bl	800132c <HAL_GetTick>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	1ad3      	subs	r3, r2, r3
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d901      	bls.n	8001f8c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001f88:	2303      	movs	r3, #3
 8001f8a:	e25b      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f8c:	4b65      	ldr	r3, [pc, #404]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d0f0      	beq.n	8001f7a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f98:	4b62      	ldr	r3, [pc, #392]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001f9a:	685b      	ldr	r3, [r3, #4]
 8001f9c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	061b      	lsls	r3, r3, #24
 8001fa6:	495f      	ldr	r1, [pc, #380]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	604b      	str	r3, [r1, #4]
 8001fac:	e018      	b.n	8001fe0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001fae:	4b5d      	ldr	r3, [pc, #372]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a5c      	ldr	r2, [pc, #368]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001fb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fba:	f7ff f9b7 	bl	800132c <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fc0:	e008      	b.n	8001fd4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fc2:	f7ff f9b3 	bl	800132c <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d901      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001fd0:	2303      	movs	r3, #3
 8001fd2:	e237      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001fd4:	4b53      	ldr	r3, [pc, #332]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1f0      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0308 	and.w	r3, r3, #8
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d03c      	beq.n	8002066 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d01c      	beq.n	800202e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ff4:	4b4b      	ldr	r3, [pc, #300]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ff6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001ffa:	4a4a      	ldr	r2, [pc, #296]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002004:	f7ff f992 	bl	800132c <HAL_GetTick>
 8002008:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800200a:	e008      	b.n	800201e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800200c:	f7ff f98e 	bl	800132c <HAL_GetTick>
 8002010:	4602      	mov	r2, r0
 8002012:	693b      	ldr	r3, [r7, #16]
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	2b02      	cmp	r3, #2
 8002018:	d901      	bls.n	800201e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800201a:	2303      	movs	r3, #3
 800201c:	e212      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800201e:	4b41      	ldr	r3, [pc, #260]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002020:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002024:	f003 0302 	and.w	r3, r3, #2
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0ef      	beq.n	800200c <HAL_RCC_OscConfig+0x3ec>
 800202c:	e01b      	b.n	8002066 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800202e:	4b3d      	ldr	r3, [pc, #244]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002030:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002034:	4a3b      	ldr	r2, [pc, #236]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002036:	f023 0301 	bic.w	r3, r3, #1
 800203a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff f975 	bl	800132c <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002046:	f7ff f971 	bl	800132c <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e1f5      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002058:	4b32      	ldr	r3, [pc, #200]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 800205a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1ef      	bne.n	8002046 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f003 0304 	and.w	r3, r3, #4
 800206e:	2b00      	cmp	r3, #0
 8002070:	f000 80a6 	beq.w	80021c0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002074:	2300      	movs	r3, #0
 8002076:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002078:	4b2a      	ldr	r3, [pc, #168]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 800207a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800207c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10d      	bne.n	80020a0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	4b27      	ldr	r3, [pc, #156]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002086:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002088:	4a26      	ldr	r2, [pc, #152]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 800208a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002090:	4b24      	ldr	r3, [pc, #144]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002092:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002098:	60bb      	str	r3, [r7, #8]
 800209a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800209c:	2301      	movs	r3, #1
 800209e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020a0:	4b21      	ldr	r3, [pc, #132]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d118      	bne.n	80020de <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020ac:	4b1e      	ldr	r3, [pc, #120]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a1d      	ldr	r2, [pc, #116]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020b8:	f7ff f938 	bl	800132c <HAL_GetTick>
 80020bc:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020be:	e008      	b.n	80020d2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c0:	f7ff f934 	bl	800132c <HAL_GetTick>
 80020c4:	4602      	mov	r2, r0
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	1ad3      	subs	r3, r2, r3
 80020ca:	2b02      	cmp	r3, #2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e1b8      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80020d2:	4b15      	ldr	r3, [pc, #84]	@ (8002128 <HAL_RCC_OscConfig+0x508>)
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0f0      	beq.n	80020c0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	689b      	ldr	r3, [r3, #8]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d108      	bne.n	80020f8 <HAL_RCC_OscConfig+0x4d8>
 80020e6:	4b0f      	ldr	r3, [pc, #60]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 80020e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80020ec:	4a0d      	ldr	r2, [pc, #52]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 80020ee:	f043 0301 	orr.w	r3, r3, #1
 80020f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80020f6:	e029      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	2b05      	cmp	r3, #5
 80020fe:	d115      	bne.n	800212c <HAL_RCC_OscConfig+0x50c>
 8002100:	4b08      	ldr	r3, [pc, #32]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002102:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002106:	4a07      	ldr	r2, [pc, #28]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002108:	f043 0304 	orr.w	r3, r3, #4
 800210c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002110:	4b04      	ldr	r3, [pc, #16]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002112:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002116:	4a03      	ldr	r2, [pc, #12]	@ (8002124 <HAL_RCC_OscConfig+0x504>)
 8002118:	f043 0301 	orr.w	r3, r3, #1
 800211c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002120:	e014      	b.n	800214c <HAL_RCC_OscConfig+0x52c>
 8002122:	bf00      	nop
 8002124:	40021000 	.word	0x40021000
 8002128:	40007000 	.word	0x40007000
 800212c:	4b9d      	ldr	r3, [pc, #628]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800212e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002132:	4a9c      	ldr	r2, [pc, #624]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002134:	f023 0301 	bic.w	r3, r3, #1
 8002138:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800213c:	4b99      	ldr	r3, [pc, #612]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800213e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002142:	4a98      	ldr	r2, [pc, #608]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002144:	f023 0304 	bic.w	r3, r3, #4
 8002148:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	689b      	ldr	r3, [r3, #8]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d016      	beq.n	8002182 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002154:	f7ff f8ea 	bl	800132c <HAL_GetTick>
 8002158:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800215a:	e00a      	b.n	8002172 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800215c:	f7ff f8e6 	bl	800132c <HAL_GetTick>
 8002160:	4602      	mov	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	f241 3288 	movw	r2, #5000	@ 0x1388
 800216a:	4293      	cmp	r3, r2
 800216c:	d901      	bls.n	8002172 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800216e:	2303      	movs	r3, #3
 8002170:	e168      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002172:	4b8c      	ldr	r3, [pc, #560]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002174:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002178:	f003 0302 	and.w	r3, r3, #2
 800217c:	2b00      	cmp	r3, #0
 800217e:	d0ed      	beq.n	800215c <HAL_RCC_OscConfig+0x53c>
 8002180:	e015      	b.n	80021ae <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002182:	f7ff f8d3 	bl	800132c <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002188:	e00a      	b.n	80021a0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800218a:	f7ff f8cf 	bl	800132c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	693b      	ldr	r3, [r7, #16]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002198:	4293      	cmp	r3, r2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e151      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80021a0:	4b80      	ldr	r3, [pc, #512]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80021a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80021a6:	f003 0302 	and.w	r3, r3, #2
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d1ed      	bne.n	800218a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021ae:	7ffb      	ldrb	r3, [r7, #31]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d105      	bne.n	80021c0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021b4:	4b7b      	ldr	r3, [pc, #492]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80021b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80021b8:	4a7a      	ldr	r2, [pc, #488]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80021ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80021be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0320 	and.w	r3, r3, #32
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d03c      	beq.n	8002246 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d01c      	beq.n	800220e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80021d4:	4b73      	ldr	r3, [pc, #460]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80021d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80021da:	4a72      	ldr	r2, [pc, #456]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021e4:	f7ff f8a2 	bl	800132c <HAL_GetTick>
 80021e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021ea:	e008      	b.n	80021fe <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021ec:	f7ff f89e 	bl	800132c <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	2b02      	cmp	r3, #2
 80021f8:	d901      	bls.n	80021fe <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80021fa:	2303      	movs	r3, #3
 80021fc:	e122      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80021fe:	4b69      	ldr	r3, [pc, #420]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002200:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002204:	f003 0302 	and.w	r3, r3, #2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0ef      	beq.n	80021ec <HAL_RCC_OscConfig+0x5cc>
 800220c:	e01b      	b.n	8002246 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800220e:	4b65      	ldr	r3, [pc, #404]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002210:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002214:	4a63      	ldr	r2, [pc, #396]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002216:	f023 0301 	bic.w	r3, r3, #1
 800221a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800221e:	f7ff f885 	bl	800132c <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002226:	f7ff f881 	bl	800132c <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e105      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002238:	4b5a      	ldr	r3, [pc, #360]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800223a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b00      	cmp	r3, #0
 8002244:	d1ef      	bne.n	8002226 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800224a:	2b00      	cmp	r3, #0
 800224c:	f000 80f9 	beq.w	8002442 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002254:	2b02      	cmp	r3, #2
 8002256:	f040 80cf 	bne.w	80023f8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800225a:	4b52      	ldr	r3, [pc, #328]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800225c:	68db      	ldr	r3, [r3, #12]
 800225e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f003 0203 	and.w	r2, r3, #3
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800226a:	429a      	cmp	r2, r3
 800226c:	d12c      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002278:	3b01      	subs	r3, #1
 800227a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800227c:	429a      	cmp	r2, r3
 800227e:	d123      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002280:	697b      	ldr	r3, [r7, #20]
 8002282:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800228a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800228c:	429a      	cmp	r2, r3
 800228e:	d11b      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002290:	697b      	ldr	r3, [r7, #20]
 8002292:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800229a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800229c:	429a      	cmp	r2, r3
 800229e:	d113      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022aa:	085b      	lsrs	r3, r3, #1
 80022ac:	3b01      	subs	r3, #1
 80022ae:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d109      	bne.n	80022c8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022be:	085b      	lsrs	r3, r3, #1
 80022c0:	3b01      	subs	r3, #1
 80022c2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d071      	beq.n	80023ac <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	2b0c      	cmp	r3, #12
 80022cc:	d068      	beq.n	80023a0 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80022ce:	4b35      	ldr	r3, [pc, #212]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d105      	bne.n	80022e6 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80022da:	4b32      	ldr	r3, [pc, #200]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80022e6:	2301      	movs	r3, #1
 80022e8:	e0ac      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80022ea:	4b2e      	ldr	r3, [pc, #184]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a2d      	ldr	r2, [pc, #180]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 80022f0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80022f4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80022f6:	f7ff f819 	bl	800132c <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022fc:	e008      	b.n	8002310 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022fe:	f7ff f815 	bl	800132c <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d901      	bls.n	8002310 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e099      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002310:	4b24      	ldr	r3, [pc, #144]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f0      	bne.n	80022fe <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800231c:	4b21      	ldr	r3, [pc, #132]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800231e:	68da      	ldr	r2, [r3, #12]
 8002320:	4b21      	ldr	r3, [pc, #132]	@ (80023a8 <HAL_RCC_OscConfig+0x788>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800232c:	3a01      	subs	r2, #1
 800232e:	0112      	lsls	r2, r2, #4
 8002330:	4311      	orrs	r1, r2
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002336:	0212      	lsls	r2, r2, #8
 8002338:	4311      	orrs	r1, r2
 800233a:	687a      	ldr	r2, [r7, #4]
 800233c:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800233e:	0852      	lsrs	r2, r2, #1
 8002340:	3a01      	subs	r2, #1
 8002342:	0552      	lsls	r2, r2, #21
 8002344:	4311      	orrs	r1, r2
 8002346:	687a      	ldr	r2, [r7, #4]
 8002348:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 800234a:	0852      	lsrs	r2, r2, #1
 800234c:	3a01      	subs	r2, #1
 800234e:	0652      	lsls	r2, r2, #25
 8002350:	4311      	orrs	r1, r2
 8002352:	687a      	ldr	r2, [r7, #4]
 8002354:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002356:	06d2      	lsls	r2, r2, #27
 8002358:	430a      	orrs	r2, r1
 800235a:	4912      	ldr	r1, [pc, #72]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800235c:	4313      	orrs	r3, r2
 800235e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002360:	4b10      	ldr	r3, [pc, #64]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a0f      	ldr	r2, [pc, #60]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002366:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800236a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800236c:	4b0d      	ldr	r3, [pc, #52]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 800236e:	68db      	ldr	r3, [r3, #12]
 8002370:	4a0c      	ldr	r2, [pc, #48]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002372:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002376:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002378:	f7fe ffd8 	bl	800132c <HAL_GetTick>
 800237c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800237e:	e008      	b.n	8002392 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002380:	f7fe ffd4 	bl	800132c <HAL_GetTick>
 8002384:	4602      	mov	r2, r0
 8002386:	693b      	ldr	r3, [r7, #16]
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	2b02      	cmp	r3, #2
 800238c:	d901      	bls.n	8002392 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800238e:	2303      	movs	r3, #3
 8002390:	e058      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002392:	4b04      	ldr	r3, [pc, #16]	@ (80023a4 <HAL_RCC_OscConfig+0x784>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800239a:	2b00      	cmp	r3, #0
 800239c:	d0f0      	beq.n	8002380 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800239e:	e050      	b.n	8002442 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80023a0:	2301      	movs	r3, #1
 80023a2:	e04f      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
 80023a4:	40021000 	.word	0x40021000
 80023a8:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ac:	4b27      	ldr	r3, [pc, #156]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d144      	bne.n	8002442 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80023b8:	4b24      	ldr	r3, [pc, #144]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4a23      	ldr	r2, [pc, #140]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 80023be:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023c2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80023c4:	4b21      	ldr	r3, [pc, #132]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	4a20      	ldr	r2, [pc, #128]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 80023ca:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80023ce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80023d0:	f7fe ffac 	bl	800132c <HAL_GetTick>
 80023d4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023d6:	e008      	b.n	80023ea <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d8:	f7fe ffa8 	bl	800132c <HAL_GetTick>
 80023dc:	4602      	mov	r2, r0
 80023de:	693b      	ldr	r3, [r7, #16]
 80023e0:	1ad3      	subs	r3, r2, r3
 80023e2:	2b02      	cmp	r3, #2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e02c      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80023ea:	4b18      	ldr	r3, [pc, #96]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d0f0      	beq.n	80023d8 <HAL_RCC_OscConfig+0x7b8>
 80023f6:	e024      	b.n	8002442 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80023f8:	69bb      	ldr	r3, [r7, #24]
 80023fa:	2b0c      	cmp	r3, #12
 80023fc:	d01f      	beq.n	800243e <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023fe:	4b13      	ldr	r3, [pc, #76]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a12      	ldr	r2, [pc, #72]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 8002404:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002408:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800240a:	f7fe ff8f 	bl	800132c <HAL_GetTick>
 800240e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002410:	e008      	b.n	8002424 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002412:	f7fe ff8b 	bl	800132c <HAL_GetTick>
 8002416:	4602      	mov	r2, r0
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	1ad3      	subs	r3, r2, r3
 800241c:	2b02      	cmp	r3, #2
 800241e:	d901      	bls.n	8002424 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8002420:	2303      	movs	r3, #3
 8002422:	e00f      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002424:	4b09      	ldr	r3, [pc, #36]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800242c:	2b00      	cmp	r3, #0
 800242e:	d1f0      	bne.n	8002412 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 8002432:	68da      	ldr	r2, [r3, #12]
 8002434:	4905      	ldr	r1, [pc, #20]	@ (800244c <HAL_RCC_OscConfig+0x82c>)
 8002436:	4b06      	ldr	r3, [pc, #24]	@ (8002450 <HAL_RCC_OscConfig+0x830>)
 8002438:	4013      	ands	r3, r2
 800243a:	60cb      	str	r3, [r1, #12]
 800243c:	e001      	b.n	8002442 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800243e:	2301      	movs	r3, #1
 8002440:	e000      	b.n	8002444 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8002442:	2300      	movs	r3, #0
}
 8002444:	4618      	mov	r0, r3
 8002446:	3720      	adds	r7, #32
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40021000 	.word	0x40021000
 8002450:	feeefffc 	.word	0xfeeefffc

08002454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b086      	sub	sp, #24
 8002458:	af00      	add	r7, sp, #0
 800245a:	6078      	str	r0, [r7, #4]
 800245c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800245e:	2300      	movs	r3, #0
 8002460:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b00      	cmp	r3, #0
 8002466:	d101      	bne.n	800246c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002468:	2301      	movs	r3, #1
 800246a:	e11d      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800246c:	4b90      	ldr	r3, [pc, #576]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 030f 	and.w	r3, r3, #15
 8002474:	683a      	ldr	r2, [r7, #0]
 8002476:	429a      	cmp	r2, r3
 8002478:	d910      	bls.n	800249c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800247a:	4b8d      	ldr	r3, [pc, #564]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f023 020f 	bic.w	r2, r3, #15
 8002482:	498b      	ldr	r1, [pc, #556]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	4313      	orrs	r3, r2
 8002488:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800248a:	4b89      	ldr	r3, [pc, #548]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 030f 	and.w	r3, r3, #15
 8002492:	683a      	ldr	r2, [r7, #0]
 8002494:	429a      	cmp	r2, r3
 8002496:	d001      	beq.n	800249c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002498:	2301      	movs	r3, #1
 800249a:	e105      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d010      	beq.n	80024ca <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689a      	ldr	r2, [r3, #8]
 80024ac:	4b81      	ldr	r3, [pc, #516]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024ae:	689b      	ldr	r3, [r3, #8]
 80024b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80024b4:	429a      	cmp	r2, r3
 80024b6:	d908      	bls.n	80024ca <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024b8:	4b7e      	ldr	r3, [pc, #504]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	497b      	ldr	r1, [pc, #492]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024c6:	4313      	orrs	r3, r2
 80024c8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d079      	beq.n	80025ca <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b03      	cmp	r3, #3
 80024dc:	d11e      	bne.n	800251c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80024de:	4b75      	ldr	r3, [pc, #468]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d101      	bne.n	80024ee <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 80024ea:	2301      	movs	r3, #1
 80024ec:	e0dc      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 80024ee:	f000 fa09 	bl	8002904 <RCC_GetSysClockFreqFromPLLSource>
 80024f2:	4603      	mov	r3, r0
 80024f4:	4a70      	ldr	r2, [pc, #448]	@ (80026b8 <HAL_RCC_ClockConfig+0x264>)
 80024f6:	4293      	cmp	r3, r2
 80024f8:	d946      	bls.n	8002588 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80024fa:	4b6e      	ldr	r3, [pc, #440]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002502:	2b00      	cmp	r3, #0
 8002504:	d140      	bne.n	8002588 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002506:	4b6b      	ldr	r3, [pc, #428]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800250e:	4a69      	ldr	r2, [pc, #420]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002510:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002514:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002516:	2380      	movs	r3, #128	@ 0x80
 8002518:	617b      	str	r3, [r7, #20]
 800251a:	e035      	b.n	8002588 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	2b02      	cmp	r3, #2
 8002522:	d107      	bne.n	8002534 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002524:	4b63      	ldr	r3, [pc, #396]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d115      	bne.n	800255c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0b9      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	685b      	ldr	r3, [r3, #4]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d107      	bne.n	800254c <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800253c:	4b5d      	ldr	r3, [pc, #372]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 0302 	and.w	r3, r3, #2
 8002544:	2b00      	cmp	r3, #0
 8002546:	d109      	bne.n	800255c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e0ad      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800254c:	4b59      	ldr	r3, [pc, #356]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002554:	2b00      	cmp	r3, #0
 8002556:	d101      	bne.n	800255c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e0a5      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800255c:	f000 f8b4 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8002560:	4603      	mov	r3, r0
 8002562:	4a55      	ldr	r2, [pc, #340]	@ (80026b8 <HAL_RCC_ClockConfig+0x264>)
 8002564:	4293      	cmp	r3, r2
 8002566:	d90f      	bls.n	8002588 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002568:	4b52      	ldr	r3, [pc, #328]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800256a:	689b      	ldr	r3, [r3, #8]
 800256c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002570:	2b00      	cmp	r3, #0
 8002572:	d109      	bne.n	8002588 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002574:	4b4f      	ldr	r3, [pc, #316]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800257c:	4a4d      	ldr	r2, [pc, #308]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800257e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002582:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002584:	2380      	movs	r3, #128	@ 0x80
 8002586:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002588:	4b4a      	ldr	r3, [pc, #296]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 800258a:	689b      	ldr	r3, [r3, #8]
 800258c:	f023 0203 	bic.w	r2, r3, #3
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	4947      	ldr	r1, [pc, #284]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002596:	4313      	orrs	r3, r2
 8002598:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800259a:	f7fe fec7 	bl	800132c <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025a0:	e00a      	b.n	80025b8 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025a2:	f7fe fec3 	bl	800132c <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025b0:	4293      	cmp	r3, r2
 80025b2:	d901      	bls.n	80025b8 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80025b4:	2303      	movs	r3, #3
 80025b6:	e077      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025b8:	4b3e      	ldr	r3, [pc, #248]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	f003 020c 	and.w	r2, r3, #12
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	009b      	lsls	r3, r3, #2
 80025c6:	429a      	cmp	r2, r3
 80025c8:	d1eb      	bne.n	80025a2 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80025ca:	697b      	ldr	r3, [r7, #20]
 80025cc:	2b80      	cmp	r3, #128	@ 0x80
 80025ce:	d105      	bne.n	80025dc <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80025d0:	4b38      	ldr	r3, [pc, #224]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025d2:	689b      	ldr	r3, [r3, #8]
 80025d4:	4a37      	ldr	r2, [pc, #220]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025d6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80025da:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f003 0302 	and.w	r3, r3, #2
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d010      	beq.n	800260a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	689a      	ldr	r2, [r3, #8]
 80025ec:	4b31      	ldr	r3, [pc, #196]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025f4:	429a      	cmp	r2, r3
 80025f6:	d208      	bcs.n	800260a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025f8:	4b2e      	ldr	r3, [pc, #184]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 80025fa:	689b      	ldr	r3, [r3, #8]
 80025fc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	492b      	ldr	r1, [pc, #172]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002606:	4313      	orrs	r3, r2
 8002608:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800260a:	4b29      	ldr	r3, [pc, #164]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 030f 	and.w	r3, r3, #15
 8002612:	683a      	ldr	r2, [r7, #0]
 8002614:	429a      	cmp	r2, r3
 8002616:	d210      	bcs.n	800263a <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002618:	4b25      	ldr	r3, [pc, #148]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f023 020f 	bic.w	r2, r3, #15
 8002620:	4923      	ldr	r1, [pc, #140]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	4313      	orrs	r3, r2
 8002626:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002628:	4b21      	ldr	r3, [pc, #132]	@ (80026b0 <HAL_RCC_ClockConfig+0x25c>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	683a      	ldr	r2, [r7, #0]
 8002632:	429a      	cmp	r2, r3
 8002634:	d001      	beq.n	800263a <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8002636:	2301      	movs	r3, #1
 8002638:	e036      	b.n	80026a8 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002646:	4b1b      	ldr	r3, [pc, #108]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002648:	689b      	ldr	r3, [r3, #8]
 800264a:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	68db      	ldr	r3, [r3, #12]
 8002652:	4918      	ldr	r1, [pc, #96]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002654:	4313      	orrs	r3, r2
 8002656:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f003 0308 	and.w	r3, r3, #8
 8002660:	2b00      	cmp	r3, #0
 8002662:	d009      	beq.n	8002678 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002664:	4b13      	ldr	r3, [pc, #76]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	691b      	ldr	r3, [r3, #16]
 8002670:	00db      	lsls	r3, r3, #3
 8002672:	4910      	ldr	r1, [pc, #64]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002674:	4313      	orrs	r3, r2
 8002676:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002678:	f000 f826 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 800267c:	4602      	mov	r2, r0
 800267e:	4b0d      	ldr	r3, [pc, #52]	@ (80026b4 <HAL_RCC_ClockConfig+0x260>)
 8002680:	689b      	ldr	r3, [r3, #8]
 8002682:	091b      	lsrs	r3, r3, #4
 8002684:	f003 030f 	and.w	r3, r3, #15
 8002688:	490c      	ldr	r1, [pc, #48]	@ (80026bc <HAL_RCC_ClockConfig+0x268>)
 800268a:	5ccb      	ldrb	r3, [r1, r3]
 800268c:	f003 031f 	and.w	r3, r3, #31
 8002690:	fa22 f303 	lsr.w	r3, r2, r3
 8002694:	4a0a      	ldr	r2, [pc, #40]	@ (80026c0 <HAL_RCC_ClockConfig+0x26c>)
 8002696:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002698:	4b0a      	ldr	r3, [pc, #40]	@ (80026c4 <HAL_RCC_ClockConfig+0x270>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4618      	mov	r0, r3
 800269e:	f7fe fdf5 	bl	800128c <HAL_InitTick>
 80026a2:	4603      	mov	r3, r0
 80026a4:	73fb      	strb	r3, [r7, #15]

  return status;
 80026a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	3718      	adds	r7, #24
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40022000 	.word	0x40022000
 80026b4:	40021000 	.word	0x40021000
 80026b8:	04c4b400 	.word	0x04c4b400
 80026bc:	08017368 	.word	0x08017368
 80026c0:	20000000 	.word	0x20000000
 80026c4:	20000004 	.word	0x20000004

080026c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b089      	sub	sp, #36	@ 0x24
 80026cc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80026ce:	2300      	movs	r3, #0
 80026d0:	61fb      	str	r3, [r7, #28]
 80026d2:	2300      	movs	r3, #0
 80026d4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026d6:	4b3e      	ldr	r3, [pc, #248]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e0:	4b3b      	ldr	r3, [pc, #236]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026e2:	68db      	ldr	r3, [r3, #12]
 80026e4:	f003 0303 	and.w	r3, r3, #3
 80026e8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d005      	beq.n	80026fc <HAL_RCC_GetSysClockFreq+0x34>
 80026f0:	693b      	ldr	r3, [r7, #16]
 80026f2:	2b0c      	cmp	r3, #12
 80026f4:	d121      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2b01      	cmp	r3, #1
 80026fa:	d11e      	bne.n	800273a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80026fc:	4b34      	ldr	r3, [pc, #208]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f003 0308 	and.w	r3, r3, #8
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002708:	4b31      	ldr	r3, [pc, #196]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800270a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800270e:	0a1b      	lsrs	r3, r3, #8
 8002710:	f003 030f 	and.w	r3, r3, #15
 8002714:	61fb      	str	r3, [r7, #28]
 8002716:	e005      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002718:	4b2d      	ldr	r3, [pc, #180]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	091b      	lsrs	r3, r3, #4
 800271e:	f003 030f 	and.w	r3, r3, #15
 8002722:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002724:	4a2b      	ldr	r2, [pc, #172]	@ (80027d4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800272c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800272e:	693b      	ldr	r3, [r7, #16]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d10d      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002738:	e00a      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	2b04      	cmp	r3, #4
 800273e:	d102      	bne.n	8002746 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002740:	4b25      	ldr	r3, [pc, #148]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002742:	61bb      	str	r3, [r7, #24]
 8002744:	e004      	b.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	2b08      	cmp	r3, #8
 800274a:	d101      	bne.n	8002750 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800274c:	4b23      	ldr	r3, [pc, #140]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x114>)
 800274e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002750:	693b      	ldr	r3, [r7, #16]
 8002752:	2b0c      	cmp	r3, #12
 8002754:	d134      	bne.n	80027c0 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002756:	4b1e      	ldr	r3, [pc, #120]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002758:	68db      	ldr	r3, [r3, #12]
 800275a:	f003 0303 	and.w	r3, r3, #3
 800275e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2b02      	cmp	r3, #2
 8002764:	d003      	beq.n	800276e <HAL_RCC_GetSysClockFreq+0xa6>
 8002766:	68bb      	ldr	r3, [r7, #8]
 8002768:	2b03      	cmp	r3, #3
 800276a:	d003      	beq.n	8002774 <HAL_RCC_GetSysClockFreq+0xac>
 800276c:	e005      	b.n	800277a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800276e:	4b1a      	ldr	r3, [pc, #104]	@ (80027d8 <HAL_RCC_GetSysClockFreq+0x110>)
 8002770:	617b      	str	r3, [r7, #20]
      break;
 8002772:	e005      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002774:	4b19      	ldr	r3, [pc, #100]	@ (80027dc <HAL_RCC_GetSysClockFreq+0x114>)
 8002776:	617b      	str	r3, [r7, #20]
      break;
 8002778:	e002      	b.n	8002780 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	617b      	str	r3, [r7, #20]
      break;
 800277e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002780:	4b13      	ldr	r3, [pc, #76]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	091b      	lsrs	r3, r3, #4
 8002786:	f003 030f 	and.w	r3, r3, #15
 800278a:	3301      	adds	r3, #1
 800278c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800278e:	4b10      	ldr	r3, [pc, #64]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 8002790:	68db      	ldr	r3, [r3, #12]
 8002792:	0a1b      	lsrs	r3, r3, #8
 8002794:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002798:	697a      	ldr	r2, [r7, #20]
 800279a:	fb03 f202 	mul.w	r2, r3, r2
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80027a4:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80027a6:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <HAL_RCC_GetSysClockFreq+0x108>)
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	0e5b      	lsrs	r3, r3, #25
 80027ac:	f003 0303 	and.w	r3, r3, #3
 80027b0:	3301      	adds	r3, #1
 80027b2:	005b      	lsls	r3, r3, #1
 80027b4:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80027b6:	697a      	ldr	r2, [r7, #20]
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80027be:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80027c0:	69bb      	ldr	r3, [r7, #24]
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	3724      	adds	r7, #36	@ 0x24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
 80027ce:	bf00      	nop
 80027d0:	40021000 	.word	0x40021000
 80027d4:	08017380 	.word	0x08017380
 80027d8:	00f42400 	.word	0x00f42400
 80027dc:	007a1200 	.word	0x007a1200

080027e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80027e0:	b480      	push	{r7}
 80027e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80027e4:	4b03      	ldr	r3, [pc, #12]	@ (80027f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80027e6:	681b      	ldr	r3, [r3, #0]
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	46bd      	mov	sp, r7
 80027ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f0:	4770      	bx	lr
 80027f2:	bf00      	nop
 80027f4:	20000000 	.word	0x20000000

080027f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80027fc:	f7ff fff0 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 8002800:	4602      	mov	r2, r0
 8002802:	4b06      	ldr	r3, [pc, #24]	@ (800281c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	0a1b      	lsrs	r3, r3, #8
 8002808:	f003 0307 	and.w	r3, r3, #7
 800280c:	4904      	ldr	r1, [pc, #16]	@ (8002820 <HAL_RCC_GetPCLK1Freq+0x28>)
 800280e:	5ccb      	ldrb	r3, [r1, r3]
 8002810:	f003 031f 	and.w	r3, r3, #31
 8002814:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002818:	4618      	mov	r0, r3
 800281a:	bd80      	pop	{r7, pc}
 800281c:	40021000 	.word	0x40021000
 8002820:	08017378 	.word	0x08017378

08002824 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002828:	f7ff ffda 	bl	80027e0 <HAL_RCC_GetHCLKFreq>
 800282c:	4602      	mov	r2, r0
 800282e:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	0adb      	lsrs	r3, r3, #11
 8002834:	f003 0307 	and.w	r3, r3, #7
 8002838:	4904      	ldr	r1, [pc, #16]	@ (800284c <HAL_RCC_GetPCLK2Freq+0x28>)
 800283a:	5ccb      	ldrb	r3, [r1, r3]
 800283c:	f003 031f 	and.w	r3, r3, #31
 8002840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002844:	4618      	mov	r0, r3
 8002846:	bd80      	pop	{r7, pc}
 8002848:	40021000 	.word	0x40021000
 800284c:	08017378 	.word	0x08017378

08002850 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b086      	sub	sp, #24
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002858:	2300      	movs	r3, #0
 800285a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800285c:	4b27      	ldr	r3, [pc, #156]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800285e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002868:	f7ff f906 	bl	8001a78 <HAL_PWREx_GetVoltageRange>
 800286c:	6178      	str	r0, [r7, #20]
 800286e:	e014      	b.n	800289a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002870:	4b22      	ldr	r3, [pc, #136]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002872:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002874:	4a21      	ldr	r2, [pc, #132]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002876:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800287a:	6593      	str	r3, [r2, #88]	@ 0x58
 800287c:	4b1f      	ldr	r3, [pc, #124]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800287e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002880:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002884:	60fb      	str	r3, [r7, #12]
 8002886:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002888:	f7ff f8f6 	bl	8001a78 <HAL_PWREx_GetVoltageRange>
 800288c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800288e:	4b1b      	ldr	r3, [pc, #108]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002890:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002892:	4a1a      	ldr	r2, [pc, #104]	@ (80028fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002894:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002898:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028a0:	d10b      	bne.n	80028ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2b80      	cmp	r3, #128	@ 0x80
 80028a6:	d913      	bls.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2ba0      	cmp	r3, #160	@ 0xa0
 80028ac:	d902      	bls.n	80028b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80028ae:	2302      	movs	r3, #2
 80028b0:	613b      	str	r3, [r7, #16]
 80028b2:	e00d      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028b4:	2301      	movs	r3, #1
 80028b6:	613b      	str	r3, [r7, #16]
 80028b8:	e00a      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80028be:	d902      	bls.n	80028c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80028c0:	2302      	movs	r3, #2
 80028c2:	613b      	str	r3, [r7, #16]
 80028c4:	e004      	b.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2b70      	cmp	r3, #112	@ 0x70
 80028ca:	d101      	bne.n	80028d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80028cc:	2301      	movs	r3, #1
 80028ce:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002900 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f023 020f 	bic.w	r2, r3, #15
 80028d8:	4909      	ldr	r1, [pc, #36]	@ (8002900 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	4313      	orrs	r3, r2
 80028de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028e0:	4b07      	ldr	r3, [pc, #28]	@ (8002900 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	693a      	ldr	r2, [r7, #16]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d001      	beq.n	80028f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e000      	b.n	80028f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80028f2:	2300      	movs	r3, #0
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}
 80028fc:	40021000 	.word	0x40021000
 8002900:	40022000 	.word	0x40022000

08002904 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002904:	b480      	push	{r7}
 8002906:	b087      	sub	sp, #28
 8002908:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800290a:	4b2d      	ldr	r3, [pc, #180]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800290c:	68db      	ldr	r3, [r3, #12]
 800290e:	f003 0303 	and.w	r3, r3, #3
 8002912:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	2b03      	cmp	r3, #3
 8002918:	d00b      	beq.n	8002932 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2b03      	cmp	r3, #3
 800291e:	d825      	bhi.n	800296c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d008      	beq.n	8002938 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	2b02      	cmp	r3, #2
 800292a:	d11f      	bne.n	800296c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800292c:	4b25      	ldr	r3, [pc, #148]	@ (80029c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800292e:	613b      	str	r3, [r7, #16]
    break;
 8002930:	e01f      	b.n	8002972 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002932:	4b25      	ldr	r3, [pc, #148]	@ (80029c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002934:	613b      	str	r3, [r7, #16]
    break;
 8002936:	e01c      	b.n	8002972 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002938:	4b21      	ldr	r3, [pc, #132]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0308 	and.w	r3, r3, #8
 8002940:	2b00      	cmp	r3, #0
 8002942:	d107      	bne.n	8002954 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002944:	4b1e      	ldr	r3, [pc, #120]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002946:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800294a:	0a1b      	lsrs	r3, r3, #8
 800294c:	f003 030f 	and.w	r3, r3, #15
 8002950:	617b      	str	r3, [r7, #20]
 8002952:	e005      	b.n	8002960 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002954:	4b1a      	ldr	r3, [pc, #104]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	091b      	lsrs	r3, r3, #4
 800295a:	f003 030f 	and.w	r3, r3, #15
 800295e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002960:	4a1a      	ldr	r2, [pc, #104]	@ (80029cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002968:	613b      	str	r3, [r7, #16]
    break;
 800296a:	e002      	b.n	8002972 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800296c:	2300      	movs	r3, #0
 800296e:	613b      	str	r3, [r7, #16]
    break;
 8002970:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002972:	4b13      	ldr	r3, [pc, #76]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002974:	68db      	ldr	r3, [r3, #12]
 8002976:	091b      	lsrs	r3, r3, #4
 8002978:	f003 030f 	and.w	r3, r3, #15
 800297c:	3301      	adds	r3, #1
 800297e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002980:	4b0f      	ldr	r3, [pc, #60]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002982:	68db      	ldr	r3, [r3, #12]
 8002984:	0a1b      	lsrs	r3, r3, #8
 8002986:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800298a:	693a      	ldr	r2, [r7, #16]
 800298c:	fb03 f202 	mul.w	r2, r3, r2
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002998:	4b09      	ldr	r3, [pc, #36]	@ (80029c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800299a:	68db      	ldr	r3, [r3, #12]
 800299c:	0e5b      	lsrs	r3, r3, #25
 800299e:	f003 0303 	and.w	r3, r3, #3
 80029a2:	3301      	adds	r3, #1
 80029a4:	005b      	lsls	r3, r3, #1
 80029a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80029a8:	693a      	ldr	r2, [r7, #16]
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80029b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80029b2:	683b      	ldr	r3, [r7, #0]
}
 80029b4:	4618      	mov	r0, r3
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	40021000 	.word	0x40021000
 80029c4:	00f42400 	.word	0x00f42400
 80029c8:	007a1200 	.word	0x007a1200
 80029cc:	08017380 	.word	0x08017380

080029d0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b086      	sub	sp, #24
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80029d8:	2300      	movs	r3, #0
 80029da:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80029dc:	2300      	movs	r3, #0
 80029de:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d040      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80029f0:	2b80      	cmp	r3, #128	@ 0x80
 80029f2:	d02a      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029f4:	2b80      	cmp	r3, #128	@ 0x80
 80029f6:	d825      	bhi.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80029f8:	2b60      	cmp	r3, #96	@ 0x60
 80029fa:	d026      	beq.n	8002a4a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80029fc:	2b60      	cmp	r3, #96	@ 0x60
 80029fe:	d821      	bhi.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a00:	2b40      	cmp	r3, #64	@ 0x40
 8002a02:	d006      	beq.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8002a04:	2b40      	cmp	r3, #64	@ 0x40
 8002a06:	d81d      	bhi.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d009      	beq.n	8002a20 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002a0c:	2b20      	cmp	r3, #32
 8002a0e:	d010      	beq.n	8002a32 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002a10:	e018      	b.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002a12:	4b89      	ldr	r3, [pc, #548]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	4a88      	ldr	r2, [pc, #544]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a1c:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a1e:	e015      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	3304      	adds	r3, #4
 8002a24:	2100      	movs	r1, #0
 8002a26:	4618      	mov	r0, r3
 8002a28:	f000 fb62 	bl	80030f0 <RCCEx_PLLSAI1_Config>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a30:	e00c      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	3320      	adds	r3, #32
 8002a36:	2100      	movs	r1, #0
 8002a38:	4618      	mov	r0, r3
 8002a3a:	f000 fc4d 	bl	80032d8 <RCCEx_PLLSAI2_Config>
 8002a3e:	4603      	mov	r3, r0
 8002a40:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002a42:	e003      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002a44:	2301      	movs	r3, #1
 8002a46:	74fb      	strb	r3, [r7, #19]
      break;
 8002a48:	e000      	b.n	8002a4c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8002a4a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002a4c:	7cfb      	ldrb	r3, [r7, #19]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d10b      	bne.n	8002a6a <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002a52:	4b79      	ldr	r3, [pc, #484]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a54:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002a58:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002a60:	4975      	ldr	r1, [pc, #468]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002a62:	4313      	orrs	r3, r2
 8002a64:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002a68:	e001      	b.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a6a:	7cfb      	ldrb	r3, [r7, #19]
 8002a6c:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d047      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002a7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a82:	d030      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a84:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a88:	d82a      	bhi.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a8a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a8e:	d02a      	beq.n	8002ae6 <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002a90:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a94:	d824      	bhi.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002a96:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a9a:	d008      	beq.n	8002aae <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa0:	d81e      	bhi.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d00a      	beq.n	8002abc <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002aa6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002aaa:	d010      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002aac:	e018      	b.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002aae:	4b62      	ldr	r3, [pc, #392]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab0:	68db      	ldr	r3, [r3, #12]
 8002ab2:	4a61      	ldr	r2, [pc, #388]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ab4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ab8:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002aba:	e015      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	3304      	adds	r3, #4
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f000 fb14 	bl	80030f0 <RCCEx_PLLSAI1_Config>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002acc:	e00c      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	3320      	adds	r3, #32
 8002ad2:	2100      	movs	r1, #0
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f000 fbff 	bl	80032d8 <RCCEx_PLLSAI2_Config>
 8002ada:	4603      	mov	r3, r0
 8002adc:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002ade:	e003      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	74fb      	strb	r3, [r7, #19]
      break;
 8002ae4:	e000      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8002ae6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002ae8:	7cfb      	ldrb	r3, [r7, #19]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d10b      	bne.n	8002b06 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002aee:	4b52      	ldr	r3, [pc, #328]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002af4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002afc:	494e      	ldr	r1, [pc, #312]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002afe:	4313      	orrs	r3, r2
 8002b00:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8002b04:	e001      	b.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b06:	7cfb      	ldrb	r3, [r7, #19]
 8002b08:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 809f 	beq.w	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002b1c:	4b46      	ldr	r3, [pc, #280]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e000      	b.n	8002b2e <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00d      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b32:	4b41      	ldr	r3, [pc, #260]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b36:	4a40      	ldr	r2, [pc, #256]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b3e:	4b3e      	ldr	r3, [pc, #248]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b46:	60bb      	str	r3, [r7, #8]
 8002b48:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b4e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a3a      	ldr	r2, [pc, #232]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b58:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe fbe7 	bl	800132c <HAL_GetTick>
 8002b5e:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b60:	e009      	b.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b62:	f7fe fbe3 	bl	800132c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	2b02      	cmp	r3, #2
 8002b6e:	d902      	bls.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002b70:	2303      	movs	r3, #3
 8002b72:	74fb      	strb	r3, [r7, #19]
        break;
 8002b74:	e005      	b.n	8002b82 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002b76:	4b31      	ldr	r3, [pc, #196]	@ (8002c3c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d0ef      	beq.n	8002b62 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002b82:	7cfb      	ldrb	r3, [r7, #19]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d15b      	bne.n	8002c40 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002b88:	4b2b      	ldr	r3, [pc, #172]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002b8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002b8e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b92:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002b94:	697b      	ldr	r3, [r7, #20]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d01f      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002ba0:	697a      	ldr	r2, [r7, #20]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d019      	beq.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002ba6:	4b24      	ldr	r3, [pc, #144]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bb0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bb2:	4b21      	ldr	r3, [pc, #132]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002bbe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bc8:	4a1b      	ldr	r2, [pc, #108]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bce:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bd2:	4a19      	ldr	r2, [pc, #100]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002bda:	697b      	ldr	r3, [r7, #20]
 8002bdc:	f003 0301 	and.w	r3, r3, #1
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d016      	beq.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fba2 	bl	800132c <HAL_GetTick>
 8002be8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002bea:	e00b      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bec:	f7fe fb9e 	bl	800132c <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d902      	bls.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	74fb      	strb	r3, [r7, #19]
            break;
 8002c02:	e006      	b.n	8002c12 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c04:	4b0c      	ldr	r3, [pc, #48]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d0ec      	beq.n	8002bec <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002c12:	7cfb      	ldrb	r3, [r7, #19]
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d10c      	bne.n	8002c32 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c18:	4b07      	ldr	r3, [pc, #28]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c1e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002c28:	4903      	ldr	r1, [pc, #12]	@ (8002c38 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002c2a:	4313      	orrs	r3, r2
 8002c2c:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c30:	e008      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c32:	7cfb      	ldrb	r3, [r7, #19]
 8002c34:	74bb      	strb	r3, [r7, #18]
 8002c36:	e005      	b.n	8002c44 <HAL_RCCEx_PeriphCLKConfig+0x274>
 8002c38:	40021000 	.word	0x40021000
 8002c3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c40:	7cfb      	ldrb	r3, [r7, #19]
 8002c42:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c44:	7c7b      	ldrb	r3, [r7, #17]
 8002c46:	2b01      	cmp	r3, #1
 8002c48:	d105      	bne.n	8002c56 <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4a:	4ba0      	ldr	r3, [pc, #640]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c4e:	4a9f      	ldr	r2, [pc, #636]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c54:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d00a      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c62:	4b9a      	ldr	r3, [pc, #616]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c68:	f023 0203 	bic.w	r2, r3, #3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c70:	4996      	ldr	r1, [pc, #600]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c72:	4313      	orrs	r3, r2
 8002c74:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d00a      	beq.n	8002c9a <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002c84:	4b91      	ldr	r3, [pc, #580]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c8a:	f023 020c 	bic.w	r2, r3, #12
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c92:	498e      	ldr	r1, [pc, #568]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0304 	and.w	r3, r3, #4
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00a      	beq.n	8002cbc <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002ca6:	4b89      	ldr	r3, [pc, #548]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ca8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cac:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb4:	4985      	ldr	r1, [pc, #532]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0308 	and.w	r3, r3, #8
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d00a      	beq.n	8002cde <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cc8:	4b80      	ldr	r3, [pc, #512]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cce:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002cd6:	497d      	ldr	r1, [pc, #500]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0310 	and.w	r3, r3, #16
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00a      	beq.n	8002d00 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002cea:	4b78      	ldr	r3, [pc, #480]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf0:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cf8:	4974      	ldr	r1, [pc, #464]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f003 0320 	and.w	r3, r3, #32
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d00a      	beq.n	8002d22 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d0c:	4b6f      	ldr	r3, [pc, #444]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d12:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d1a:	496c      	ldr	r1, [pc, #432]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00a      	beq.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002d2e:	4b67      	ldr	r3, [pc, #412]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d30:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d34:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002d3c:	4963      	ldr	r1, [pc, #396]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d00a      	beq.n	8002d66 <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002d50:	4b5e      	ldr	r3, [pc, #376]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d56:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002d5e:	495b      	ldr	r1, [pc, #364]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d72:	4b56      	ldr	r3, [pc, #344]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d78:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d80:	4952      	ldr	r1, [pc, #328]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d82:	4313      	orrs	r3, r2
 8002d84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00a      	beq.n	8002daa <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d94:	4b4d      	ldr	r3, [pc, #308]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d9a:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002da2:	494a      	ldr	r1, [pc, #296]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d00a      	beq.n	8002dcc <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002db6:	4b45      	ldr	r3, [pc, #276]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002dbc:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002dc4:	4941      	ldr	r1, [pc, #260]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dc6:	4313      	orrs	r3, r2
 8002dc8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d00a      	beq.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dd8:	4b3c      	ldr	r3, [pc, #240]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dda:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dde:	f023 0203 	bic.w	r2, r3, #3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002de6:	4939      	ldr	r1, [pc, #228]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002de8:	4313      	orrs	r3, r2
 8002dea:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d028      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002dfa:	4b34      	ldr	r3, [pc, #208]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002dfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e00:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e08:	4930      	ldr	r1, [pc, #192]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e0a:	4313      	orrs	r3, r2
 8002e0c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e14:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002e18:	d106      	bne.n	8002e28 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e1a:	4b2c      	ldr	r3, [pc, #176]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e1c:	68db      	ldr	r3, [r3, #12]
 8002e1e:	4a2b      	ldr	r2, [pc, #172]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e20:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e24:	60d3      	str	r3, [r2, #12]
 8002e26:	e011      	b.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002e30:	d10c      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	3304      	adds	r3, #4
 8002e36:	2101      	movs	r1, #1
 8002e38:	4618      	mov	r0, r3
 8002e3a:	f000 f959 	bl	80030f0 <RCCEx_PLLSAI1_Config>
 8002e3e:	4603      	mov	r3, r0
 8002e40:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002e42:	7cfb      	ldrb	r3, [r7, #19]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8002e48:	7cfb      	ldrb	r3, [r7, #19]
 8002e4a:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d04d      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e5c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002e60:	d108      	bne.n	8002e74 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002e62:	4b1a      	ldr	r3, [pc, #104]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e64:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e68:	4a18      	ldr	r2, [pc, #96]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e6e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e72:	e012      	b.n	8002e9a <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002e74:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e76:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002e7a:	4a14      	ldr	r2, [pc, #80]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e7c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e80:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002e84:	4b11      	ldr	r3, [pc, #68]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e86:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e8a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e92:	490e      	ldr	r1, [pc, #56]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002e94:	4313      	orrs	r3, r2
 8002e96:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002e9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ea4:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ea6:	68db      	ldr	r3, [r3, #12]
 8002ea8:	4a08      	ldr	r2, [pc, #32]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002eaa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002eae:	60d3      	str	r3, [r2, #12]
 8002eb0:	e020      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002eb6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002eba:	d109      	bne.n	8002ed0 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002ebc:	4b03      	ldr	r3, [pc, #12]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ebe:	68db      	ldr	r3, [r3, #12]
 8002ec0:	4a02      	ldr	r2, [pc, #8]	@ (8002ecc <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002ec2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ec6:	60d3      	str	r3, [r2, #12]
 8002ec8:	e014      	b.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002ed4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002ed8:	d10c      	bne.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3304      	adds	r3, #4
 8002ede:	2101      	movs	r1, #1
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	f000 f905 	bl	80030f0 <RCCEx_PLLSAI1_Config>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002eea:	7cfb      	ldrb	r3, [r7, #19]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d001      	beq.n	8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8002ef0:	7cfb      	ldrb	r3, [r7, #19]
 8002ef2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d028      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002f00:	4b7a      	ldr	r3, [pc, #488]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f06:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f0e:	4977      	ldr	r1, [pc, #476]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f10:	4313      	orrs	r3, r2
 8002f12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f1a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002f1e:	d106      	bne.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f20:	4b72      	ldr	r3, [pc, #456]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f22:	68db      	ldr	r3, [r3, #12]
 8002f24:	4a71      	ldr	r2, [pc, #452]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f2a:	60d3      	str	r3, [r2, #12]
 8002f2c:	e011      	b.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002f32:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002f36:	d10c      	bne.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3304      	adds	r3, #4
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	4618      	mov	r0, r3
 8002f40:	f000 f8d6 	bl	80030f0 <RCCEx_PLLSAI1_Config>
 8002f44:	4603      	mov	r3, r0
 8002f46:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f48:	7cfb      	ldrb	r3, [r7, #19]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d001      	beq.n	8002f52 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002f4e:	7cfb      	ldrb	r3, [r7, #19]
 8002f50:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d01e      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002f5e:	4b63      	ldr	r3, [pc, #396]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f64:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f6e:	495f      	ldr	r1, [pc, #380]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002f70:	4313      	orrs	r3, r2
 8002f72:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002f7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	3304      	adds	r3, #4
 8002f86:	2102      	movs	r1, #2
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f000 f8b1 	bl	80030f0 <RCCEx_PLLSAI1_Config>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002f92:	7cfb      	ldrb	r3, [r7, #19]
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d001      	beq.n	8002f9c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8002f98:	7cfb      	ldrb	r3, [r7, #19]
 8002f9a:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002fa8:	4b50      	ldr	r3, [pc, #320]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002faa:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fae:	f023 0204 	bic.w	r2, r3, #4
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002fb8:	494c      	ldr	r1, [pc, #304]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d00b      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002fcc:	4b47      	ldr	r3, [pc, #284]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002fce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002fd2:	f023 0218 	bic.w	r2, r3, #24
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fdc:	4943      	ldr	r1, [pc, #268]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002fec:	2b00      	cmp	r3, #0
 8002fee:	d035      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x68c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ff0:	4b3e      	ldr	r3, [pc, #248]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4a3d      	ldr	r2, [pc, #244]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 8002ff6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ffa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ffc:	f7fe f996 	bl	800132c <HAL_GetTick>
 8003000:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003002:	e009      	b.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x648>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003004:	f7fe f992 	bl	800132c <HAL_GetTick>
 8003008:	4602      	mov	r2, r0
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	1ad3      	subs	r3, r2, r3
 800300e:	2b02      	cmp	r3, #2
 8003010:	d902      	bls.n	8003018 <HAL_RCCEx_PeriphCLKConfig+0x648>
      {
        ret = HAL_TIMEOUT;
 8003012:	2303      	movs	r3, #3
 8003014:	74fb      	strb	r3, [r7, #19]
        break;
 8003016:	e005      	b.n	8003024 <HAL_RCCEx_PeriphCLKConfig+0x654>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003018:	4b34      	ldr	r3, [pc, #208]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1ef      	bne.n	8003004 <HAL_RCCEx_PeriphCLKConfig+0x634>
      }
    }

    if(ret == HAL_OK)
 8003024:	7cfb      	ldrb	r3, [r7, #19]
 8003026:	2b00      	cmp	r3, #0
 8003028:	d113      	bne.n	8003052 <HAL_RCCEx_PeriphCLKConfig+0x682>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800302a:	4b30      	ldr	r3, [pc, #192]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800302c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8003030:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800303a:	492c      	ldr	r1, [pc, #176]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800303c:	4313      	orrs	r3, r2
 800303e:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	3320      	adds	r3, #32
 8003046:	2102      	movs	r1, #2
 8003048:	4618      	mov	r0, r3
 800304a:	f000 f945 	bl	80032d8 <RCCEx_PLLSAI2_Config>
 800304e:	4603      	mov	r3, r0
 8003050:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003052:	7cfb      	ldrb	r3, [r7, #19]
 8003054:	2b00      	cmp	r3, #0
 8003056:	d001      	beq.n	800305c <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* set overall return value */
      status = ret;
 8003058:	7cfb      	ldrb	r3, [r7, #19]
 800305a:	74bb      	strb	r3, [r7, #18]
#endif /* LTDC */

#if defined(DSI)

  /*-------------------------- DSI clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003064:	2b00      	cmp	r3, #0
 8003066:	d01e      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DSICLKSOURCE(PeriphClkInit->DsiClockSelection));

    /* Configure the DSI clock source */
    __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8003068:	4b20      	ldr	r3, [pc, #128]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800306a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800306e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003078:	491c      	ldr	r1, [pc, #112]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 800307a:	4313      	orrs	r3, r2
 800307c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->DsiClockSelection == RCC_DSICLKSOURCE_PLLSAI2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003086:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800308a:	d10c      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
    {
      /* PLLSAI2 input clock, parameters M, N & Q configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_Q_UPDATE);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	3320      	adds	r3, #32
 8003090:	2101      	movs	r1, #1
 8003092:	4618      	mov	r0, r3
 8003094:	f000 f920 	bl	80032d8 <RCCEx_PLLSAI2_Config>
 8003098:	4603      	mov	r3, r0
 800309a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800309c:	7cfb      	ldrb	r3, [r7, #19]
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d001      	beq.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x6d6>
      {
        /* set overall return value */
        status = ret;
 80030a2:	7cfb      	ldrb	r3, [r7, #19]
 80030a4:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d017      	beq.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x712>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80030b2:	4b0e      	ldr	r3, [pc, #56]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80030b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80030b8:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030c2:	490a      	ldr	r1, [pc, #40]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80030d0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80030d4:	d105      	bne.n	80030e2 <HAL_RCCEx_PeriphCLKConfig+0x712>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80030d6:	4b05      	ldr	r3, [pc, #20]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80030d8:	68db      	ldr	r3, [r3, #12]
 80030da:	4a04      	ldr	r2, [pc, #16]	@ (80030ec <HAL_RCCEx_PeriphCLKConfig+0x71c>)
 80030dc:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80030e0:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030e2:	7cbb      	ldrb	r3, [r7, #18]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3718      	adds	r7, #24
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}
 80030ec:	40021000 	.word	0x40021000

080030f0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030f0:	b580      	push	{r7, lr}
 80030f2:	b084      	sub	sp, #16
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80030fa:	2300      	movs	r3, #0
 80030fc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80030fe:	4b72      	ldr	r3, [pc, #456]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	f003 0303 	and.w	r3, r3, #3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00e      	beq.n	8003128 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800310a:	4b6f      	ldr	r3, [pc, #444]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0203 	and.w	r2, r3, #3
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d103      	bne.n	8003122 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
       ||
 800311e:	2b00      	cmp	r3, #0
 8003120:	d142      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8003122:	2301      	movs	r3, #1
 8003124:	73fb      	strb	r3, [r7, #15]
 8003126:	e03f      	b.n	80031a8 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	2b03      	cmp	r3, #3
 800312e:	d018      	beq.n	8003162 <RCCEx_PLLSAI1_Config+0x72>
 8003130:	2b03      	cmp	r3, #3
 8003132:	d825      	bhi.n	8003180 <RCCEx_PLLSAI1_Config+0x90>
 8003134:	2b01      	cmp	r3, #1
 8003136:	d002      	beq.n	800313e <RCCEx_PLLSAI1_Config+0x4e>
 8003138:	2b02      	cmp	r3, #2
 800313a:	d009      	beq.n	8003150 <RCCEx_PLLSAI1_Config+0x60>
 800313c:	e020      	b.n	8003180 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800313e:	4b62      	ldr	r3, [pc, #392]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b00      	cmp	r3, #0
 8003148:	d11d      	bne.n	8003186 <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800314e:	e01a      	b.n	8003186 <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003150:	4b5d      	ldr	r3, [pc, #372]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003158:	2b00      	cmp	r3, #0
 800315a:	d116      	bne.n	800318a <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003160:	e013      	b.n	800318a <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003162:	4b59      	ldr	r3, [pc, #356]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800316a:	2b00      	cmp	r3, #0
 800316c:	d10f      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800316e:	4b56      	ldr	r3, [pc, #344]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003176:	2b00      	cmp	r3, #0
 8003178:	d109      	bne.n	800318e <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 800317a:	2301      	movs	r3, #1
 800317c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800317e:	e006      	b.n	800318e <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	73fb      	strb	r3, [r7, #15]
      break;
 8003184:	e004      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8003186:	bf00      	nop
 8003188:	e002      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800318a:	bf00      	nop
 800318c:	e000      	b.n	8003190 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 800318e:	bf00      	nop
    }

    if(status == HAL_OK)
 8003190:	7bfb      	ldrb	r3, [r7, #15]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d108      	bne.n	80031a8 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003196:	4b4c      	ldr	r3, [pc, #304]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003198:	68db      	ldr	r3, [r3, #12]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4949      	ldr	r1, [pc, #292]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80031a8:	7bfb      	ldrb	r3, [r7, #15]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	f040 8086 	bne.w	80032bc <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031b0:	4b45      	ldr	r3, [pc, #276]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a44      	ldr	r2, [pc, #272]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031b6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80031ba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031bc:	f7fe f8b6 	bl	800132c <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031c2:	e009      	b.n	80031d8 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031c4:	f7fe f8b2 	bl	800132c <HAL_GetTick>
 80031c8:	4602      	mov	r2, r0
 80031ca:	68bb      	ldr	r3, [r7, #8]
 80031cc:	1ad3      	subs	r3, r2, r3
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d902      	bls.n	80031d8 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80031d2:	2303      	movs	r3, #3
 80031d4:	73fb      	strb	r3, [r7, #15]
        break;
 80031d6:	e005      	b.n	80031e4 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031d8:	4b3b      	ldr	r3, [pc, #236]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1ef      	bne.n	80031c4 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80031e4:	7bfb      	ldrb	r3, [r7, #15]
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d168      	bne.n	80032bc <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d113      	bne.n	8003218 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80031f0:	4b35      	ldr	r3, [pc, #212]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80031f2:	691a      	ldr	r2, [r3, #16]
 80031f4:	4b35      	ldr	r3, [pc, #212]	@ (80032cc <RCCEx_PLLSAI1_Config+0x1dc>)
 80031f6:	4013      	ands	r3, r2
 80031f8:	687a      	ldr	r2, [r7, #4]
 80031fa:	6892      	ldr	r2, [r2, #8]
 80031fc:	0211      	lsls	r1, r2, #8
 80031fe:	687a      	ldr	r2, [r7, #4]
 8003200:	68d2      	ldr	r2, [r2, #12]
 8003202:	06d2      	lsls	r2, r2, #27
 8003204:	4311      	orrs	r1, r2
 8003206:	687a      	ldr	r2, [r7, #4]
 8003208:	6852      	ldr	r2, [r2, #4]
 800320a:	3a01      	subs	r2, #1
 800320c:	0112      	lsls	r2, r2, #4
 800320e:	430a      	orrs	r2, r1
 8003210:	492d      	ldr	r1, [pc, #180]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003212:	4313      	orrs	r3, r2
 8003214:	610b      	str	r3, [r1, #16]
 8003216:	e02d      	b.n	8003274 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	2b01      	cmp	r3, #1
 800321c:	d115      	bne.n	800324a <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800321e:	4b2a      	ldr	r3, [pc, #168]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003220:	691a      	ldr	r2, [r3, #16]
 8003222:	4b2b      	ldr	r3, [pc, #172]	@ (80032d0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8003224:	4013      	ands	r3, r2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	6892      	ldr	r2, [r2, #8]
 800322a:	0211      	lsls	r1, r2, #8
 800322c:	687a      	ldr	r2, [r7, #4]
 800322e:	6912      	ldr	r2, [r2, #16]
 8003230:	0852      	lsrs	r2, r2, #1
 8003232:	3a01      	subs	r2, #1
 8003234:	0552      	lsls	r2, r2, #21
 8003236:	4311      	orrs	r1, r2
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	6852      	ldr	r2, [r2, #4]
 800323c:	3a01      	subs	r2, #1
 800323e:	0112      	lsls	r2, r2, #4
 8003240:	430a      	orrs	r2, r1
 8003242:	4921      	ldr	r1, [pc, #132]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003244:	4313      	orrs	r3, r2
 8003246:	610b      	str	r3, [r1, #16]
 8003248:	e014      	b.n	8003274 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800324a:	4b1f      	ldr	r3, [pc, #124]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800324c:	691a      	ldr	r2, [r3, #16]
 800324e:	4b21      	ldr	r3, [pc, #132]	@ (80032d4 <RCCEx_PLLSAI1_Config+0x1e4>)
 8003250:	4013      	ands	r3, r2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6892      	ldr	r2, [r2, #8]
 8003256:	0211      	lsls	r1, r2, #8
 8003258:	687a      	ldr	r2, [r7, #4]
 800325a:	6952      	ldr	r2, [r2, #20]
 800325c:	0852      	lsrs	r2, r2, #1
 800325e:	3a01      	subs	r2, #1
 8003260:	0652      	lsls	r2, r2, #25
 8003262:	4311      	orrs	r1, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	6852      	ldr	r2, [r2, #4]
 8003268:	3a01      	subs	r2, #1
 800326a:	0112      	lsls	r2, r2, #4
 800326c:	430a      	orrs	r2, r1
 800326e:	4916      	ldr	r1, [pc, #88]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003270:	4313      	orrs	r3, r2
 8003272:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003274:	4b14      	ldr	r3, [pc, #80]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	4a13      	ldr	r2, [pc, #76]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800327a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800327e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003280:	f7fe f854 	bl	800132c <HAL_GetTick>
 8003284:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003286:	e009      	b.n	800329c <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003288:	f7fe f850 	bl	800132c <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	2b02      	cmp	r3, #2
 8003294:	d902      	bls.n	800329c <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	73fb      	strb	r3, [r7, #15]
          break;
 800329a:	e005      	b.n	80032a8 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800329c:	4b0a      	ldr	r3, [pc, #40]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0ef      	beq.n	8003288 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80032a8:	7bfb      	ldrb	r3, [r7, #15]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d106      	bne.n	80032bc <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032ae:	4b06      	ldr	r3, [pc, #24]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032b0:	691a      	ldr	r2, [r3, #16]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	699b      	ldr	r3, [r3, #24]
 80032b6:	4904      	ldr	r1, [pc, #16]	@ (80032c8 <RCCEx_PLLSAI1_Config+0x1d8>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3710      	adds	r7, #16
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	40021000 	.word	0x40021000
 80032cc:	07ff800f 	.word	0x07ff800f
 80032d0:	ff9f800f 	.word	0xff9f800f
 80032d4:	f9ff800f 	.word	0xf9ff800f

080032d8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b084      	sub	sp, #16
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80032e2:	2300      	movs	r3, #0
 80032e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80032e6:	4b72      	ldr	r3, [pc, #456]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032e8:	68db      	ldr	r3, [r3, #12]
 80032ea:	f003 0303 	and.w	r3, r3, #3
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d00e      	beq.n	8003310 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80032f2:	4b6f      	ldr	r3, [pc, #444]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	f003 0203 	and.w	r2, r3, #3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d103      	bne.n	800330a <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
       ||
 8003306:	2b00      	cmp	r3, #0
 8003308:	d142      	bne.n	8003390 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	73fb      	strb	r3, [r7, #15]
 800330e:	e03f      	b.n	8003390 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2b03      	cmp	r3, #3
 8003316:	d018      	beq.n	800334a <RCCEx_PLLSAI2_Config+0x72>
 8003318:	2b03      	cmp	r3, #3
 800331a:	d825      	bhi.n	8003368 <RCCEx_PLLSAI2_Config+0x90>
 800331c:	2b01      	cmp	r3, #1
 800331e:	d002      	beq.n	8003326 <RCCEx_PLLSAI2_Config+0x4e>
 8003320:	2b02      	cmp	r3, #2
 8003322:	d009      	beq.n	8003338 <RCCEx_PLLSAI2_Config+0x60>
 8003324:	e020      	b.n	8003368 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003326:	4b62      	ldr	r3, [pc, #392]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0302 	and.w	r3, r3, #2
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11d      	bne.n	800336e <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003336:	e01a      	b.n	800336e <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003338:	4b5d      	ldr	r3, [pc, #372]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003340:	2b00      	cmp	r3, #0
 8003342:	d116      	bne.n	8003372 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8003344:	2301      	movs	r3, #1
 8003346:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003348:	e013      	b.n	8003372 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800334a:	4b59      	ldr	r3, [pc, #356]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003352:	2b00      	cmp	r3, #0
 8003354:	d10f      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003356:	4b56      	ldr	r3, [pc, #344]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d109      	bne.n	8003376 <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8003362:	2301      	movs	r3, #1
 8003364:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003366:	e006      	b.n	8003376 <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8003368:	2301      	movs	r3, #1
 800336a:	73fb      	strb	r3, [r7, #15]
      break;
 800336c:	e004      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 800336e:	bf00      	nop
 8003370:	e002      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003372:	bf00      	nop
 8003374:	e000      	b.n	8003378 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8003376:	bf00      	nop
    }

    if(status == HAL_OK)
 8003378:	7bfb      	ldrb	r3, [r7, #15]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d108      	bne.n	8003390 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 800337e:	4b4c      	ldr	r3, [pc, #304]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003380:	68db      	ldr	r3, [r3, #12]
 8003382:	f023 0203 	bic.w	r2, r3, #3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	4949      	ldr	r1, [pc, #292]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800338c:	4313      	orrs	r3, r2
 800338e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	f040 8086 	bne.w	80034a4 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003398:	4b45      	ldr	r3, [pc, #276]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a44      	ldr	r2, [pc, #272]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800339e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80033a4:	f7fd ffc2 	bl	800132c <HAL_GetTick>
 80033a8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033aa:	e009      	b.n	80033c0 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80033ac:	f7fd ffbe 	bl	800132c <HAL_GetTick>
 80033b0:	4602      	mov	r2, r0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d902      	bls.n	80033c0 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 80033ba:	2303      	movs	r3, #3
 80033bc:	73fb      	strb	r3, [r7, #15]
        break;
 80033be:	e005      	b.n	80033cc <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80033c0:	4b3b      	ldr	r3, [pc, #236]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ef      	bne.n	80033ac <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 80033cc:	7bfb      	ldrb	r3, [r7, #15]
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d168      	bne.n	80034a4 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80033d2:	683b      	ldr	r3, [r7, #0]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d113      	bne.n	8003400 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80033d8:	4b35      	ldr	r3, [pc, #212]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033da:	695a      	ldr	r2, [r3, #20]
 80033dc:	4b35      	ldr	r3, [pc, #212]	@ (80034b4 <RCCEx_PLLSAI2_Config+0x1dc>)
 80033de:	4013      	ands	r3, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6892      	ldr	r2, [r2, #8]
 80033e4:	0211      	lsls	r1, r2, #8
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68d2      	ldr	r2, [r2, #12]
 80033ea:	06d2      	lsls	r2, r2, #27
 80033ec:	4311      	orrs	r1, r2
 80033ee:	687a      	ldr	r2, [r7, #4]
 80033f0:	6852      	ldr	r2, [r2, #4]
 80033f2:	3a01      	subs	r2, #1
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	430a      	orrs	r2, r1
 80033f8:	492d      	ldr	r1, [pc, #180]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80033fa:	4313      	orrs	r3, r2
 80033fc:	614b      	str	r3, [r1, #20]
 80033fe:	e02d      	b.n	800345c <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d115      	bne.n	8003432 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003406:	4b2a      	ldr	r3, [pc, #168]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003408:	695a      	ldr	r2, [r3, #20]
 800340a:	4b2b      	ldr	r3, [pc, #172]	@ (80034b8 <RCCEx_PLLSAI2_Config+0x1e0>)
 800340c:	4013      	ands	r3, r2
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	6892      	ldr	r2, [r2, #8]
 8003412:	0211      	lsls	r1, r2, #8
 8003414:	687a      	ldr	r2, [r7, #4]
 8003416:	6912      	ldr	r2, [r2, #16]
 8003418:	0852      	lsrs	r2, r2, #1
 800341a:	3a01      	subs	r2, #1
 800341c:	0552      	lsls	r2, r2, #21
 800341e:	4311      	orrs	r1, r2
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6852      	ldr	r2, [r2, #4]
 8003424:	3a01      	subs	r2, #1
 8003426:	0112      	lsls	r2, r2, #4
 8003428:	430a      	orrs	r2, r1
 800342a:	4921      	ldr	r1, [pc, #132]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800342c:	4313      	orrs	r3, r2
 800342e:	614b      	str	r3, [r1, #20]
 8003430:	e014      	b.n	800345c <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003432:	4b1f      	ldr	r3, [pc, #124]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003434:	695a      	ldr	r2, [r3, #20]
 8003436:	4b21      	ldr	r3, [pc, #132]	@ (80034bc <RCCEx_PLLSAI2_Config+0x1e4>)
 8003438:	4013      	ands	r3, r2
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	6892      	ldr	r2, [r2, #8]
 800343e:	0211      	lsls	r1, r2, #8
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	6952      	ldr	r2, [r2, #20]
 8003444:	0852      	lsrs	r2, r2, #1
 8003446:	3a01      	subs	r2, #1
 8003448:	0652      	lsls	r2, r2, #25
 800344a:	4311      	orrs	r1, r2
 800344c:	687a      	ldr	r2, [r7, #4]
 800344e:	6852      	ldr	r2, [r2, #4]
 8003450:	3a01      	subs	r2, #1
 8003452:	0112      	lsls	r2, r2, #4
 8003454:	430a      	orrs	r2, r1
 8003456:	4916      	ldr	r1, [pc, #88]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003458:	4313      	orrs	r3, r2
 800345a:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 800345c:	4b14      	ldr	r3, [pc, #80]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a13      	ldr	r2, [pc, #76]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003462:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003466:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003468:	f7fd ff60 	bl	800132c <HAL_GetTick>
 800346c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800346e:	e009      	b.n	8003484 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003470:	f7fd ff5c 	bl	800132c <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	68bb      	ldr	r3, [r7, #8]
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d902      	bls.n	8003484 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	73fb      	strb	r3, [r7, #15]
          break;
 8003482:	e005      	b.n	8003490 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003484:	4b0a      	ldr	r3, [pc, #40]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0ef      	beq.n	8003470 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8003490:	7bfb      	ldrb	r3, [r7, #15]
 8003492:	2b00      	cmp	r3, #0
 8003494:	d106      	bne.n	80034a4 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003496:	4b06      	ldr	r3, [pc, #24]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003498:	695a      	ldr	r2, [r3, #20]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	4904      	ldr	r1, [pc, #16]	@ (80034b0 <RCCEx_PLLSAI2_Config+0x1d8>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80034a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3710      	adds	r7, #16
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40021000 	.word	0x40021000
 80034b4:	07ff800f 	.word	0x07ff800f
 80034b8:	ff9f800f 	.word	0xff9f800f
 80034bc:	f9ff800f 	.word	0xf9ff800f

080034c0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80034c0:	b580      	push	{r7, lr}
 80034c2:	b084      	sub	sp, #16
 80034c4:	af00      	add	r7, sp, #0
 80034c6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80034ce:	2301      	movs	r3, #1
 80034d0:	e095      	b.n	80035fe <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d108      	bne.n	80034ec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	685b      	ldr	r3, [r3, #4]
 80034de:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034e2:	d009      	beq.n	80034f8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2200      	movs	r2, #0
 80034e8:	61da      	str	r2, [r3, #28]
 80034ea:	e005      	b.n	80034f8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	2200      	movs	r2, #0
 80034f0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2200      	movs	r2, #0
 80034fc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fd fcfe 	bl	8000f14 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	681a      	ldr	r2, [r3, #0]
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800352e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	68db      	ldr	r3, [r3, #12]
 8003534:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003538:	d902      	bls.n	8003540 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800353a:	2300      	movs	r3, #0
 800353c:	60fb      	str	r3, [r7, #12]
 800353e:	e002      	b.n	8003546 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003544:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 800354e:	d007      	beq.n	8003560 <HAL_SPI_Init+0xa0>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003558:	d002      	beq.n	8003560 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	2200      	movs	r2, #0
 800355e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003570:	431a      	orrs	r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	f003 0302 	and.w	r3, r3, #2
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	695b      	ldr	r3, [r3, #20]
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	431a      	orrs	r2, r3
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800358e:	431a      	orrs	r2, r3
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003598:	431a      	orrs	r2, r3
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6a1b      	ldr	r3, [r3, #32]
 800359e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035a2:	ea42 0103 	orr.w	r1, r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035aa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	699b      	ldr	r3, [r3, #24]
 80035ba:	0c1b      	lsrs	r3, r3, #16
 80035bc:	f003 0204 	and.w	r2, r3, #4
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035c4:	f003 0310 	and.w	r3, r3, #16
 80035c8:	431a      	orrs	r2, r3
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035ce:	f003 0308 	and.w	r3, r3, #8
 80035d2:	431a      	orrs	r2, r3
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	68db      	ldr	r3, [r3, #12]
 80035d8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80035dc:	ea42 0103 	orr.w	r1, r2, r3
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2200      	movs	r2, #0
 80035f2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2201      	movs	r2, #1
 80035f8:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 80035fc:	2300      	movs	r3, #0
}
 80035fe:	4618      	mov	r0, r3
 8003600:	3710      	adds	r7, #16
 8003602:	46bd      	mov	sp, r7
 8003604:	bd80      	pop	{r7, pc}

08003606 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003606:	b580      	push	{r7, lr}
 8003608:	b088      	sub	sp, #32
 800360a:	af00      	add	r7, sp, #0
 800360c:	60f8      	str	r0, [r7, #12]
 800360e:	60b9      	str	r1, [r7, #8]
 8003610:	603b      	str	r3, [r7, #0]
 8003612:	4613      	mov	r3, r2
 8003614:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003616:	f7fd fe89 	bl	800132c <HAL_GetTick>
 800361a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 800361c:	88fb      	ldrh	r3, [r7, #6]
 800361e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003626:	b2db      	uxtb	r3, r3
 8003628:	2b01      	cmp	r3, #1
 800362a:	d001      	beq.n	8003630 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 800362c:	2302      	movs	r3, #2
 800362e:	e15c      	b.n	80038ea <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d002      	beq.n	800363c <HAL_SPI_Transmit+0x36>
 8003636:	88fb      	ldrh	r3, [r7, #6]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e154      	b.n	80038ea <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_SPI_Transmit+0x48>
 800364a:	2302      	movs	r3, #2
 800364c:	e14d      	b.n	80038ea <HAL_SPI_Transmit+0x2e4>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	2203      	movs	r2, #3
 800365a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	2200      	movs	r2, #0
 8003662:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	68ba      	ldr	r2, [r7, #8]
 8003668:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	88fa      	ldrh	r2, [r7, #6]
 800366e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	88fa      	ldrh	r2, [r7, #6]
 8003674:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	2200      	movs	r2, #0
 800367a:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	2200      	movs	r2, #0
 8003680:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2200      	movs	r2, #0
 8003690:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2200      	movs	r2, #0
 8003696:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036a0:	d10f      	bne.n	80036c2 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	681a      	ldr	r2, [r3, #0]
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036b0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036cc:	2b40      	cmp	r3, #64	@ 0x40
 80036ce:	d007      	beq.n	80036e0 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80036e8:	d952      	bls.n	8003790 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	685b      	ldr	r3, [r3, #4]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d002      	beq.n	80036f8 <HAL_SPI_Transmit+0xf2>
 80036f2:	8b7b      	ldrh	r3, [r7, #26]
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d145      	bne.n	8003784 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80036fc:	881a      	ldrh	r2, [r3, #0]
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003708:	1c9a      	adds	r2, r3, #2
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800371c:	e032      	b.n	8003784 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b02      	cmp	r3, #2
 800372a:	d112      	bne.n	8003752 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003730:	881a      	ldrh	r2, [r3, #0]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800373c:	1c9a      	adds	r2, r3, #2
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003746:	b29b      	uxth	r3, r3
 8003748:	3b01      	subs	r3, #1
 800374a:	b29a      	uxth	r2, r3
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003750:	e018      	b.n	8003784 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003752:	f7fd fdeb 	bl	800132c <HAL_GetTick>
 8003756:	4602      	mov	r2, r0
 8003758:	69fb      	ldr	r3, [r7, #28]
 800375a:	1ad3      	subs	r3, r2, r3
 800375c:	683a      	ldr	r2, [r7, #0]
 800375e:	429a      	cmp	r2, r3
 8003760:	d803      	bhi.n	800376a <HAL_SPI_Transmit+0x164>
 8003762:	683b      	ldr	r3, [r7, #0]
 8003764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003768:	d102      	bne.n	8003770 <HAL_SPI_Transmit+0x16a>
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d109      	bne.n	8003784 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003780:	2303      	movs	r3, #3
 8003782:	e0b2      	b.n	80038ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003788:	b29b      	uxth	r3, r3
 800378a:	2b00      	cmp	r3, #0
 800378c:	d1c7      	bne.n	800371e <HAL_SPI_Transmit+0x118>
 800378e:	e083      	b.n	8003898 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <HAL_SPI_Transmit+0x198>
 8003798:	8b7b      	ldrh	r3, [r7, #26]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d177      	bne.n	800388e <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037a2:	b29b      	uxth	r3, r3
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d912      	bls.n	80037ce <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ac:	881a      	ldrh	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037b8:	1c9a      	adds	r2, r3, #2
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037c2:	b29b      	uxth	r3, r3
 80037c4:	3b02      	subs	r3, #2
 80037c6:	b29a      	uxth	r2, r3
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80037cc:	e05f      	b.n	800388e <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	330c      	adds	r3, #12
 80037d8:	7812      	ldrb	r2, [r2, #0]
 80037da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037e0:	1c5a      	adds	r2, r3, #1
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037ea:	b29b      	uxth	r3, r3
 80037ec:	3b01      	subs	r3, #1
 80037ee:	b29a      	uxth	r2, r3
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80037f4:	e04b      	b.n	800388e <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	2b02      	cmp	r3, #2
 8003802:	d12b      	bne.n	800385c <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003808:	b29b      	uxth	r3, r3
 800380a:	2b01      	cmp	r3, #1
 800380c:	d912      	bls.n	8003834 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003812:	881a      	ldrh	r2, [r3, #0]
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381e:	1c9a      	adds	r2, r3, #2
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	3b02      	subs	r3, #2
 800382c:	b29a      	uxth	r2, r3
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003832:	e02c      	b.n	800388e <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	330c      	adds	r3, #12
 800383e:	7812      	ldrb	r2, [r2, #0]
 8003840:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003846:	1c5a      	adds	r2, r3, #1
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003850:	b29b      	uxth	r3, r3
 8003852:	3b01      	subs	r3, #1
 8003854:	b29a      	uxth	r2, r3
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800385a:	e018      	b.n	800388e <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800385c:	f7fd fd66 	bl	800132c <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	69fb      	ldr	r3, [r7, #28]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	429a      	cmp	r2, r3
 800386a:	d803      	bhi.n	8003874 <HAL_SPI_Transmit+0x26e>
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003872:	d102      	bne.n	800387a <HAL_SPI_Transmit+0x274>
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d109      	bne.n	800388e <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2200      	movs	r2, #0
 8003886:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 800388a:	2303      	movs	r3, #3
 800388c:	e02d      	b.n	80038ea <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003892:	b29b      	uxth	r3, r3
 8003894:	2b00      	cmp	r3, #0
 8003896:	d1ae      	bne.n	80037f6 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003898:	69fa      	ldr	r2, [r7, #28]
 800389a:	6839      	ldr	r1, [r7, #0]
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f000 fe15 	bl	80044cc <SPI_EndRxTxTransaction>
 80038a2:	4603      	mov	r3, r0
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d002      	beq.n	80038ae <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2220      	movs	r2, #32
 80038ac:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	689b      	ldr	r3, [r3, #8]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d10a      	bne.n	80038cc <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68db      	ldr	r3, [r3, #12]
 80038c0:	617b      	str	r3, [r7, #20]
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	617b      	str	r3, [r7, #20]
 80038ca:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2201      	movs	r2, #1
 80038d0:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d001      	beq.n	80038e8 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 80038e4:	2301      	movs	r3, #1
 80038e6:	e000      	b.n	80038ea <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 80038e8:	2300      	movs	r3, #0
  }
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3720      	adds	r7, #32
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038f2:	b580      	push	{r7, lr}
 80038f4:	b088      	sub	sp, #32
 80038f6:	af02      	add	r7, sp, #8
 80038f8:	60f8      	str	r0, [r7, #12]
 80038fa:	60b9      	str	r1, [r7, #8]
 80038fc:	603b      	str	r3, [r7, #0]
 80038fe:	4613      	mov	r3, r2
 8003900:	80fb      	strh	r3, [r7, #6]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b01      	cmp	r3, #1
 800390c:	d001      	beq.n	8003912 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
 8003910:	e123      	b.n	8003b5a <HAL_SPI_Receive+0x268>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800391a:	d112      	bne.n	8003942 <HAL_SPI_Receive+0x50>
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b00      	cmp	r3, #0
 8003922:	d10e      	bne.n	8003942 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	2204      	movs	r2, #4
 8003928:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800392c:	88fa      	ldrh	r2, [r7, #6]
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	9300      	str	r3, [sp, #0]
 8003932:	4613      	mov	r3, r2
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	68b9      	ldr	r1, [r7, #8]
 8003938:	68f8      	ldr	r0, [r7, #12]
 800393a:	f000 f912 	bl	8003b62 <HAL_SPI_TransmitReceive>
 800393e:	4603      	mov	r3, r0
 8003940:	e10b      	b.n	8003b5a <HAL_SPI_Receive+0x268>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003942:	f7fd fcf3 	bl	800132c <HAL_GetTick>
 8003946:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d002      	beq.n	8003954 <HAL_SPI_Receive+0x62>
 800394e:	88fb      	ldrh	r3, [r7, #6]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d101      	bne.n	8003958 <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e100      	b.n	8003b5a <HAL_SPI_Receive+0x268>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 800395e:	2b01      	cmp	r3, #1
 8003960:	d101      	bne.n	8003966 <HAL_SPI_Receive+0x74>
 8003962:	2302      	movs	r3, #2
 8003964:	e0f9      	b.n	8003b5a <HAL_SPI_Receive+0x268>
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2201      	movs	r2, #1
 800396a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	2204      	movs	r2, #4
 8003972:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2200      	movs	r2, #0
 800397a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	68ba      	ldr	r2, [r7, #8]
 8003980:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = Size;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	88fa      	ldrh	r2, [r7, #6]
 8003986:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = Size;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	88fa      	ldrh	r2, [r7, #6]
 800398e:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	2200      	movs	r2, #0
 8003996:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = 0U;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = 0U;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	2200      	movs	r2, #0
 80039a2:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxISR       = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	651a      	str	r2, [r3, #80]	@ 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80039b8:	d908      	bls.n	80039cc <HAL_SPI_Receive+0xda>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80039c8:	605a      	str	r2, [r3, #4]
 80039ca:	e007      	b.n	80039dc <HAL_SPI_Receive+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	685a      	ldr	r2, [r3, #4]
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80039da:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	689b      	ldr	r3, [r3, #8]
 80039e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80039e4:	d10f      	bne.n	8003a06 <HAL_SPI_Receive+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80039f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	681a      	ldr	r2, [r3, #0]
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003a04:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003a10:	2b40      	cmp	r3, #64	@ 0x40
 8003a12:	d007      	beq.n	8003a24 <HAL_SPI_Receive+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a22:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003a2c:	d875      	bhi.n	8003b1a <HAL_SPI_Receive+0x228>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003a2e:	e037      	b.n	8003aa0 <HAL_SPI_Receive+0x1ae>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	689b      	ldr	r3, [r3, #8]
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b01      	cmp	r3, #1
 8003a3c:	d117      	bne.n	8003a6e <HAL_SPI_Receive+0x17c>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f103 020c 	add.w	r2, r3, #12
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a4a:	7812      	ldrb	r2, [r2, #0]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a54:	1c5a      	adds	r2, r3, #1
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003a60:	b29b      	uxth	r3, r3
 8003a62:	3b01      	subs	r3, #1
 8003a64:	b29a      	uxth	r2, r3
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003a6c:	e018      	b.n	8003aa0 <HAL_SPI_Receive+0x1ae>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a6e:	f7fd fc5d 	bl	800132c <HAL_GetTick>
 8003a72:	4602      	mov	r2, r0
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	1ad3      	subs	r3, r2, r3
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d803      	bhi.n	8003a86 <HAL_SPI_Receive+0x194>
 8003a7e:	683b      	ldr	r3, [r7, #0]
 8003a80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a84:	d102      	bne.n	8003a8c <HAL_SPI_Receive+0x19a>
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d109      	bne.n	8003aa0 <HAL_SPI_Receive+0x1ae>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	2200      	movs	r2, #0
 8003a98:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e05c      	b.n	8003b5a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003aa6:	b29b      	uxth	r3, r3
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1c1      	bne.n	8003a30 <HAL_SPI_Receive+0x13e>
 8003aac:	e03b      	b.n	8003b26 <HAL_SPI_Receive+0x234>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	689b      	ldr	r3, [r3, #8]
 8003ab4:	f003 0301 	and.w	r3, r3, #1
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d115      	bne.n	8003ae8 <HAL_SPI_Receive+0x1f6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	68da      	ldr	r2, [r3, #12]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ac6:	b292      	uxth	r2, r2
 8003ac8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ace:	1c9a      	adds	r2, r3, #2
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	3b01      	subs	r3, #1
 8003ade:	b29a      	uxth	r2, r3
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
 8003ae6:	e018      	b.n	8003b1a <HAL_SPI_Receive+0x228>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ae8:	f7fd fc20 	bl	800132c <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d803      	bhi.n	8003b00 <HAL_SPI_Receive+0x20e>
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003afe:	d102      	bne.n	8003b06 <HAL_SPI_Receive+0x214>
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d109      	bne.n	8003b1a <HAL_SPI_Receive+0x228>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	2200      	movs	r2, #0
 8003b12:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e01f      	b.n	8003b5a <HAL_SPI_Receive+0x268>
    while (hspi->RxXferCount > 0U)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003b20:	b29b      	uxth	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d1c3      	bne.n	8003aae <HAL_SPI_Receive+0x1bc>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003b26:	697a      	ldr	r2, [r7, #20]
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	68f8      	ldr	r0, [r7, #12]
 8003b2c:	f000 fc76 	bl	800441c <SPI_EndRxTransaction>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d002      	beq.n	8003b3c <HAL_SPI_Receive+0x24a>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	661a      	str	r2, [r3, #96]	@ 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <HAL_SPI_Receive+0x266>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e000      	b.n	8003b5a <HAL_SPI_Receive+0x268>
  }
  else
  {
    return HAL_OK;
 8003b58:	2300      	movs	r3, #0
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b08a      	sub	sp, #40	@ 0x28
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
 8003b6e:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b70:	2301      	movs	r3, #1
 8003b72:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b74:	f7fd fbda 	bl	800132c <HAL_GetTick>
 8003b78:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003b80:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b88:	887b      	ldrh	r3, [r7, #2]
 8003b8a:	82fb      	strh	r3, [r7, #22]
  initial_RxXferCount = Size;
 8003b8c:	887b      	ldrh	r3, [r7, #2]
 8003b8e:	82bb      	strh	r3, [r7, #20]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b90:	7ffb      	ldrb	r3, [r7, #31]
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d00c      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x4e>
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b9c:	d106      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x4a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d102      	bne.n	8003bac <HAL_SPI_TransmitReceive+0x4a>
 8003ba6:	7ffb      	ldrb	r3, [r7, #31]
 8003ba8:	2b04      	cmp	r3, #4
 8003baa:	d001      	beq.n	8003bb0 <HAL_SPI_TransmitReceive+0x4e>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003bac:	2302      	movs	r3, #2
 8003bae:	e1f3      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d005      	beq.n	8003bc2 <HAL_SPI_TransmitReceive+0x60>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_SPI_TransmitReceive+0x60>
 8003bbc:	887b      	ldrh	r3, [r7, #2]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d101      	bne.n	8003bc6 <HAL_SPI_TransmitReceive+0x64>
  {
    return HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	e1e8      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_SPI_TransmitReceive+0x72>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e1e1      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8003be2:	b2db      	uxtb	r3, r3
 8003be4:	2b04      	cmp	r3, #4
 8003be6:	d003      	beq.n	8003bf0 <HAL_SPI_TransmitReceive+0x8e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2205      	movs	r2, #5
 8003bec:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	687a      	ldr	r2, [r7, #4]
 8003bfa:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferCount = Size;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	887a      	ldrh	r2, [r7, #2]
 8003c00:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->RxXferSize  = Size;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	68ba      	ldr	r2, [r7, #8]
 8003c10:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferCount = Size;
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	887a      	ldrh	r2, [r7, #2]
 8003c16:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferSize  = Size;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	887a      	ldrh	r2, [r7, #2]
 8003c1c:	879a      	strh	r2, [r3, #60]	@ 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi->TxISR       = NULL;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2200      	movs	r2, #0
 8003c28:	651a      	str	r2, [r3, #80]	@ 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	68db      	ldr	r3, [r3, #12]
 8003c2e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c32:	d802      	bhi.n	8003c3a <HAL_SPI_TransmitReceive+0xd8>
 8003c34:	8abb      	ldrh	r3, [r7, #20]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d908      	bls.n	8003c4c <HAL_SPI_TransmitReceive+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	685a      	ldr	r2, [r3, #4]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8003c48:	605a      	str	r2, [r3, #4]
 8003c4a:	e007      	b.n	8003c5c <HAL_SPI_TransmitReceive+0xfa>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003c5a:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c66:	2b40      	cmp	r3, #64	@ 0x40
 8003c68:	d007      	beq.n	8003c7a <HAL_SPI_TransmitReceive+0x118>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	681a      	ldr	r2, [r3, #0]
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c78:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	68db      	ldr	r3, [r3, #12]
 8003c7e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003c82:	f240 8083 	bls.w	8003d8c <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d002      	beq.n	8003c94 <HAL_SPI_TransmitReceive+0x132>
 8003c8e:	8afb      	ldrh	r3, [r7, #22]
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d16f      	bne.n	8003d74 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c98:	881a      	ldrh	r2, [r3, #0]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ca4:	1c9a      	adds	r2, r3, #2
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cae:	b29b      	uxth	r3, r3
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003cb8:	e05c      	b.n	8003d74 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	689b      	ldr	r3, [r3, #8]
 8003cc0:	f003 0302 	and.w	r3, r3, #2
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d11b      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x19e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d016      	beq.n	8003d00 <HAL_SPI_TransmitReceive+0x19e>
 8003cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d113      	bne.n	8003d00 <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	881a      	ldrh	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003ce8:	1c9a      	adds	r2, r3, #2
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	3b01      	subs	r3, #1
 8003cf6:	b29a      	uxth	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	689b      	ldr	r3, [r3, #8]
 8003d06:	f003 0301 	and.w	r3, r3, #1
 8003d0a:	2b01      	cmp	r3, #1
 8003d0c:	d11c      	bne.n	8003d48 <HAL_SPI_TransmitReceive+0x1e6>
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d14:	b29b      	uxth	r3, r3
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d016      	beq.n	8003d48 <HAL_SPI_TransmitReceive+0x1e6>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d24:	b292      	uxth	r2, r2
 8003d26:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2c:	1c9a      	adds	r2, r3, #2
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	641a      	str	r2, [r3, #64]	@ 0x40
        hspi->RxXferCount--;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	3b01      	subs	r3, #1
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003d44:	2301      	movs	r3, #1
 8003d46:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003d48:	f7fd faf0 	bl	800132c <HAL_GetTick>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	6a3b      	ldr	r3, [r7, #32]
 8003d50:	1ad3      	subs	r3, r2, r3
 8003d52:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d54:	429a      	cmp	r2, r3
 8003d56:	d80d      	bhi.n	8003d74 <HAL_SPI_TransmitReceive+0x212>
 8003d58:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d5e:	d009      	beq.n	8003d74 <HAL_SPI_TransmitReceive+0x212>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	2201      	movs	r2, #1
 8003d64:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003d70:	2303      	movs	r3, #3
 8003d72:	e111      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d19d      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x158>
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d197      	bne.n	8003cba <HAL_SPI_TransmitReceive+0x158>
 8003d8a:	e0e5      	b.n	8003f58 <HAL_SPI_TransmitReceive+0x3f6>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d003      	beq.n	8003d9c <HAL_SPI_TransmitReceive+0x23a>
 8003d94:	8afb      	ldrh	r3, [r7, #22]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	f040 80d1 	bne.w	8003f3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      if (hspi->TxXferCount > 1U)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	2b01      	cmp	r3, #1
 8003da4:	d912      	bls.n	8003dcc <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003daa:	881a      	ldrh	r2, [r3, #0]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003db6:	1c9a      	adds	r2, r3, #2
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	3b02      	subs	r3, #2
 8003dc4:	b29a      	uxth	r2, r3
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003dca:	e0b8      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x3dc>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	330c      	adds	r3, #12
 8003dd6:	7812      	ldrb	r2, [r2, #0]
 8003dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dde:	1c5a      	adds	r2, r3, #1
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	3b01      	subs	r3, #1
 8003dec:	b29a      	uxth	r2, r3
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	87da      	strh	r2, [r3, #62]	@ 0x3e
          SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
        }
#endif /* USE_SPI_CRC */
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003df2:	e0a4      	b.n	8003f3e <HAL_SPI_TransmitReceive+0x3dc>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b02      	cmp	r3, #2
 8003e00:	d134      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x30a>
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e06:	b29b      	uxth	r3, r3
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d02f      	beq.n	8003e6c <HAL_SPI_TransmitReceive+0x30a>
 8003e0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d12c      	bne.n	8003e6c <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d912      	bls.n	8003e42 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e20:	881a      	ldrh	r2, [r3, #0]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e2c:	1c9a      	adds	r2, r3, #2
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e36:	b29b      	uxth	r3, r3
 8003e38:	3b02      	subs	r3, #2
 8003e3a:	b29a      	uxth	r2, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003e40:	e012      	b.n	8003e68 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	7812      	ldrb	r2, [r2, #0]
 8003e4e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e54:	1c5a      	adds	r2, r3, #1
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	f003 0301 	and.w	r3, r3, #1
 8003e76:	2b01      	cmp	r3, #1
 8003e78:	d148      	bne.n	8003f0c <HAL_SPI_TransmitReceive+0x3aa>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e80:	b29b      	uxth	r3, r3
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d042      	beq.n	8003f0c <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	2b01      	cmp	r3, #1
 8003e90:	d923      	bls.n	8003eda <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	68da      	ldr	r2, [r3, #12]
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e9c:	b292      	uxth	r2, r2
 8003e9e:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea4:	1c9a      	adds	r2, r3, #2
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount -= 2U;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003eb0:	b29b      	uxth	r3, r3
 8003eb2:	3b02      	subs	r3, #2
 8003eb4:	b29a      	uxth	r2, r3
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
          if (hspi->RxXferCount <= 1U)
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003ec2:	b29b      	uxth	r3, r3
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d81f      	bhi.n	8003f08 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8003ed6:	605a      	str	r2, [r3, #4]
 8003ed8:	e016      	b.n	8003f08 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f103 020c 	add.w	r2, r3, #12
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ee6:	7812      	ldrb	r2, [r2, #0]
 8003ee8:	b2d2      	uxtb	r2, r2
 8003eea:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	641a      	str	r2, [r3, #64]	@ 0x40
          hspi->RxXferCount--;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003efc:	b29b      	uxth	r3, r3
 8003efe:	3b01      	subs	r3, #1
 8003f00:	b29a      	uxth	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003f0c:	f7fd fa0e 	bl	800132c <HAL_GetTick>
 8003f10:	4602      	mov	r2, r0
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	d803      	bhi.n	8003f24 <HAL_SPI_TransmitReceive+0x3c2>
 8003f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f22:	d102      	bne.n	8003f2a <HAL_SPI_TransmitReceive+0x3c8>
 8003f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d109      	bne.n	8003f3e <HAL_SPI_TransmitReceive+0x3dc>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	2201      	movs	r2, #1
 8003f2e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
        __HAL_UNLOCK(hspi);
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
        return HAL_TIMEOUT;
 8003f3a:	2303      	movs	r3, #3
 8003f3c:	e02c      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	f47f af55 	bne.w	8003df4 <HAL_SPI_TransmitReceive+0x292>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	@ 0x46
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	f47f af4e 	bne.w	8003df4 <HAL_SPI_TransmitReceive+0x292>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f58:	6a3a      	ldr	r2, [r7, #32]
 8003f5a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003f5c:	68f8      	ldr	r0, [r7, #12]
 8003f5e:	f000 fab5 	bl	80044cc <SPI_EndRxTxTransaction>
 8003f62:	4603      	mov	r3, r0
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_SPI_TransmitReceive+0x418>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	2220      	movs	r2, #32
 8003f6c:	661a      	str	r2, [r3, #96]	@ 0x60
    __HAL_UNLOCK(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
    return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e00e      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d001      	beq.n	8003f96 <HAL_SPI_TransmitReceive+0x434>
  {
    return HAL_ERROR;
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_SPI_TransmitReceive+0x436>
  }
  else
  {
    return HAL_OK;
 8003f96:	2300      	movs	r3, #0
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3728      	adds	r7, #40	@ 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b088      	sub	sp, #32
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	689b      	ldr	r3, [r3, #8]
 8003fb6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	099b      	lsrs	r3, r3, #6
 8003fbc:	f003 0301 	and.w	r3, r3, #1
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d10f      	bne.n	8003fe4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d00a      	beq.n	8003fe4 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003fce:	69fb      	ldr	r3, [r7, #28]
 8003fd0:	099b      	lsrs	r3, r3, #6
 8003fd2:	f003 0301 	and.w	r3, r3, #1
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d004      	beq.n	8003fe4 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003fde:	6878      	ldr	r0, [r7, #4]
 8003fe0:	4798      	blx	r3
    return;
 8003fe2:	e0d7      	b.n	8004194 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	085b      	lsrs	r3, r3, #1
 8003fe8:	f003 0301 	and.w	r3, r3, #1
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00a      	beq.n	8004006 <HAL_SPI_IRQHandler+0x66>
 8003ff0:	69fb      	ldr	r3, [r7, #28]
 8003ff2:	09db      	lsrs	r3, r3, #7
 8003ff4:	f003 0301 	and.w	r3, r3, #1
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d004      	beq.n	8004006 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	4798      	blx	r3
    return;
 8004004:	e0c6      	b.n	8004194 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	095b      	lsrs	r3, r3, #5
 800400a:	f003 0301 	and.w	r3, r3, #1
 800400e:	2b00      	cmp	r3, #0
 8004010:	d10c      	bne.n	800402c <HAL_SPI_IRQHandler+0x8c>
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	099b      	lsrs	r3, r3, #6
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b00      	cmp	r3, #0
 800401c:	d106      	bne.n	800402c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800401e:	69bb      	ldr	r3, [r7, #24]
 8004020:	0a1b      	lsrs	r3, r3, #8
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	f000 80b4 	beq.w	8004194 <HAL_SPI_IRQHandler+0x1f4>
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	095b      	lsrs	r3, r3, #5
 8004030:	f003 0301 	and.w	r3, r3, #1
 8004034:	2b00      	cmp	r3, #0
 8004036:	f000 80ad 	beq.w	8004194 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	099b      	lsrs	r3, r3, #6
 800403e:	f003 0301 	and.w	r3, r3, #1
 8004042:	2b00      	cmp	r3, #0
 8004044:	d023      	beq.n	800408e <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 800404c:	b2db      	uxtb	r3, r3
 800404e:	2b03      	cmp	r3, #3
 8004050:	d011      	beq.n	8004076 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004056:	f043 0204 	orr.w	r2, r3, #4
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	661a      	str	r2, [r3, #96]	@ 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800405e:	2300      	movs	r3, #0
 8004060:	617b      	str	r3, [r7, #20]
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	68db      	ldr	r3, [r3, #12]
 8004068:	617b      	str	r3, [r7, #20]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689b      	ldr	r3, [r3, #8]
 8004070:	617b      	str	r3, [r7, #20]
 8004072:	697b      	ldr	r3, [r7, #20]
 8004074:	e00b      	b.n	800408e <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004076:	2300      	movs	r3, #0
 8004078:	613b      	str	r3, [r7, #16]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	613b      	str	r3, [r7, #16]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	613b      	str	r3, [r7, #16]
 800408a:	693b      	ldr	r3, [r7, #16]
        return;
 800408c:	e082      	b.n	8004194 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	095b      	lsrs	r3, r3, #5
 8004092:	f003 0301 	and.w	r3, r3, #1
 8004096:	2b00      	cmp	r3, #0
 8004098:	d014      	beq.n	80040c4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800409e:	f043 0201 	orr.w	r2, r3, #1
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	60fb      	str	r3, [r7, #12]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80040c0:	601a      	str	r2, [r3, #0]
 80040c2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80040c4:	69bb      	ldr	r3, [r7, #24]
 80040c6:	0a1b      	lsrs	r3, r3, #8
 80040c8:	f003 0301 	and.w	r3, r3, #1
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d00c      	beq.n	80040ea <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040d4:	f043 0208 	orr.w	r2, r3, #8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	661a      	str	r2, [r3, #96]	@ 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80040dc:	2300      	movs	r3, #0
 80040de:	60bb      	str	r3, [r7, #8]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	689b      	ldr	r3, [r3, #8]
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d04f      	beq.n	8004192 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	685a      	ldr	r2, [r3, #4]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004100:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800410a:	69fb      	ldr	r3, [r7, #28]
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d104      	bne.n	800411e <HAL_SPI_IRQHandler+0x17e>
 8004114:	69fb      	ldr	r3, [r7, #28]
 8004116:	f003 0301 	and.w	r3, r3, #1
 800411a:	2b00      	cmp	r3, #0
 800411c:	d034      	beq.n	8004188 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	685a      	ldr	r2, [r3, #4]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f022 0203 	bic.w	r2, r2, #3
 800412c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004132:	2b00      	cmp	r3, #0
 8004134:	d011      	beq.n	800415a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800413a:	4a18      	ldr	r2, [pc, #96]	@ (800419c <HAL_SPI_IRQHandler+0x1fc>)
 800413c:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004142:	4618      	mov	r0, r3
 8004144:	f7fd fa8f 	bl	8001666 <HAL_DMA_Abort_IT>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d005      	beq.n	800415a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004152:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	661a      	str	r2, [r3, #96]	@ 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800415e:	2b00      	cmp	r3, #0
 8004160:	d016      	beq.n	8004190 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004166:	4a0d      	ldr	r2, [pc, #52]	@ (800419c <HAL_SPI_IRQHandler+0x1fc>)
 8004168:	639a      	str	r2, [r3, #56]	@ 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800416e:	4618      	mov	r0, r3
 8004170:	f7fd fa79 	bl	8001666 <HAL_DMA_Abort_IT>
 8004174:	4603      	mov	r3, r0
 8004176:	2b00      	cmp	r3, #0
 8004178:	d00a      	beq.n	8004190 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800417e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	661a      	str	r2, [r3, #96]	@ 0x60
        if (hspi->hdmatx != NULL)
 8004186:	e003      	b.n	8004190 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004188:	6878      	ldr	r0, [r7, #4]
 800418a:	f000 f809 	bl	80041a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800418e:	e000      	b.n	8004192 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8004190:	bf00      	nop
    return;
 8004192:	bf00      	nop
  }
}
 8004194:	3720      	adds	r7, #32
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}
 800419a:	bf00      	nop
 800419c:	080041b5 	.word	0x080041b5

080041a0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80041a8:	bf00      	nop
 80041aa:	370c      	adds	r7, #12
 80041ac:	46bd      	mov	sp, r7
 80041ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b2:	4770      	bx	lr

080041b4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041c0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxXferCount = 0U;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80041d0:	68f8      	ldr	r0, [r7, #12]
 80041d2:	f7ff ffe5 	bl	80041a0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80041d6:	bf00      	nop
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
	...

080041e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80041e0:	b580      	push	{r7, lr}
 80041e2:	b088      	sub	sp, #32
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	603b      	str	r3, [r7, #0]
 80041ec:	4613      	mov	r3, r2
 80041ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80041f0:	f7fd f89c 	bl	800132c <HAL_GetTick>
 80041f4:	4602      	mov	r2, r0
 80041f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041f8:	1a9b      	subs	r3, r3, r2
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	4413      	add	r3, r2
 80041fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004200:	f7fd f894 	bl	800132c <HAL_GetTick>
 8004204:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004206:	4b39      	ldr	r3, [pc, #228]	@ (80042ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	015b      	lsls	r3, r3, #5
 800420c:	0d1b      	lsrs	r3, r3, #20
 800420e:	69fa      	ldr	r2, [r7, #28]
 8004210:	fb02 f303 	mul.w	r3, r2, r3
 8004214:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004216:	e054      	b.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800421e:	d050      	beq.n	80042c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004220:	f7fd f884 	bl	800132c <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	69bb      	ldr	r3, [r7, #24]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	69fa      	ldr	r2, [r7, #28]
 800422c:	429a      	cmp	r2, r3
 800422e:	d902      	bls.n	8004236 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d13d      	bne.n	80042b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004244:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800424e:	d111      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004258:	d004      	beq.n	8004264 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	689b      	ldr	r3, [r3, #8]
 800425e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004262:	d107      	bne.n	8004274 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	681a      	ldr	r2, [r3, #0]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004272:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004278:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800427c:	d10f      	bne.n	800429e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	681a      	ldr	r2, [r3, #0]
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800428c:	601a      	str	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	681a      	ldr	r2, [r3, #0]
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800429c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	2201      	movs	r2, #1
 80042a2:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2200      	movs	r2, #0
 80042aa:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80042ae:	2303      	movs	r3, #3
 80042b0:	e017      	b.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d101      	bne.n	80042bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	3b01      	subs	r3, #1
 80042c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	4013      	ands	r3, r2
 80042cc:	68ba      	ldr	r2, [r7, #8]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	bf0c      	ite	eq
 80042d2:	2301      	moveq	r3, #1
 80042d4:	2300      	movne	r3, #0
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	461a      	mov	r2, r3
 80042da:	79fb      	ldrb	r3, [r7, #7]
 80042dc:	429a      	cmp	r2, r3
 80042de:	d19b      	bne.n	8004218 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80042e0:	2300      	movs	r3, #0
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}
 80042ea:	bf00      	nop
 80042ec:	20000000 	.word	0x20000000

080042f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b08a      	sub	sp, #40	@ 0x28
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	60f8      	str	r0, [r7, #12]
 80042f8:	60b9      	str	r1, [r7, #8]
 80042fa:	607a      	str	r2, [r7, #4]
 80042fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80042fe:	2300      	movs	r3, #0
 8004300:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004302:	f7fd f813 	bl	800132c <HAL_GetTick>
 8004306:	4602      	mov	r2, r0
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	1a9b      	subs	r3, r3, r2
 800430c:	683a      	ldr	r2, [r7, #0]
 800430e:	4413      	add	r3, r2
 8004310:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8004312:	f7fd f80b 	bl	800132c <HAL_GetTick>
 8004316:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	330c      	adds	r3, #12
 800431e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004320:	4b3d      	ldr	r3, [pc, #244]	@ (8004418 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	4613      	mov	r3, r2
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	4413      	add	r3, r2
 800432a:	00da      	lsls	r2, r3, #3
 800432c:	1ad3      	subs	r3, r2, r3
 800432e:	0d1b      	lsrs	r3, r3, #20
 8004330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004332:	fb02 f303 	mul.w	r3, r2, r3
 8004336:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004338:	e060      	b.n	80043fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004340:	d107      	bne.n	8004352 <SPI_WaitFifoStateUntilTimeout+0x62>
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d104      	bne.n	8004352 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004348:	69fb      	ldr	r3, [r7, #28]
 800434a:	781b      	ldrb	r3, [r3, #0]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004350:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004358:	d050      	beq.n	80043fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800435a:	f7fc ffe7 	bl	800132c <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004366:	429a      	cmp	r2, r3
 8004368:	d902      	bls.n	8004370 <SPI_WaitFifoStateUntilTimeout+0x80>
 800436a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800436c:	2b00      	cmp	r3, #0
 800436e:	d13d      	bne.n	80043ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800437e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004388:	d111      	bne.n	80043ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	689b      	ldr	r3, [r3, #8]
 800438e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004392:	d004      	beq.n	800439e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	689b      	ldr	r3, [r3, #8]
 8004398:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800439c:	d107      	bne.n	80043ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80043ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043b6:	d10f      	bne.n	80043d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80043c6:	601a      	str	r2, [r3, #0]
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2201      	movs	r2, #1
 80043dc:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	2200      	movs	r2, #0
 80043e4:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 80043e8:	2303      	movs	r3, #3
 80043ea:	e010      	b.n	800440e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80043ec:	69bb      	ldr	r3, [r7, #24]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d101      	bne.n	80043f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80043f2:	2300      	movs	r3, #0
 80043f4:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	3b01      	subs	r3, #1
 80043fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	689a      	ldr	r2, [r3, #8]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	4013      	ands	r3, r2
 8004406:	687a      	ldr	r2, [r7, #4]
 8004408:	429a      	cmp	r2, r3
 800440a:	d196      	bne.n	800433a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800440c:	2300      	movs	r3, #0
}
 800440e:	4618      	mov	r0, r3
 8004410:	3728      	adds	r7, #40	@ 0x28
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	20000000 	.word	0x20000000

0800441c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b086      	sub	sp, #24
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004430:	d111      	bne.n	8004456 <SPI_EndRxTransaction+0x3a>
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800443a:	d004      	beq.n	8004446 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004444:	d107      	bne.n	8004456 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	9300      	str	r3, [sp, #0]
 800445a:	68bb      	ldr	r3, [r7, #8]
 800445c:	2200      	movs	r2, #0
 800445e:	2180      	movs	r1, #128	@ 0x80
 8004460:	68f8      	ldr	r0, [r7, #12]
 8004462:	f7ff febd 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d007      	beq.n	800447c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004470:	f043 0220 	orr.w	r2, r3, #32
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e023      	b.n	80044c4 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004484:	d11d      	bne.n	80044c2 <SPI_EndRxTransaction+0xa6>
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	689b      	ldr	r3, [r3, #8]
 800448a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800448e:	d004      	beq.n	800449a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004498:	d113      	bne.n	80044c2 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	9300      	str	r3, [sp, #0]
 800449e:	68bb      	ldr	r3, [r7, #8]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80044a6:	68f8      	ldr	r0, [r7, #12]
 80044a8:	f7ff ff22 	bl	80042f0 <SPI_WaitFifoStateUntilTimeout>
 80044ac:	4603      	mov	r3, r0
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044b6:	f043 0220 	orr.w	r2, r3, #32
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	661a      	str	r2, [r3, #96]	@ 0x60
      return HAL_TIMEOUT;
 80044be:	2303      	movs	r3, #3
 80044c0:	e000      	b.n	80044c4 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 80044c2:	2300      	movs	r3, #0
}
 80044c4:	4618      	mov	r0, r3
 80044c6:	3710      	adds	r7, #16
 80044c8:	46bd      	mov	sp, r7
 80044ca:	bd80      	pop	{r7, pc}

080044cc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af02      	add	r7, sp, #8
 80044d2:	60f8      	str	r0, [r7, #12]
 80044d4:	60b9      	str	r1, [r7, #8]
 80044d6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f7ff ff03 	bl	80042f0 <SPI_WaitFifoStateUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d007      	beq.n	8004500 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80044f4:	f043 0220 	orr.w	r2, r3, #32
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80044fc:	2303      	movs	r3, #3
 80044fe:	e027      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	@ 0x80
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff fe68 	bl	80041e0 <SPI_WaitFlagStateUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e014      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	9300      	str	r3, [sp, #0]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	2200      	movs	r2, #0
 800452e:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 8004532:	68f8      	ldr	r0, [r7, #12]
 8004534:	f7ff fedc 	bl	80042f0 <SPI_WaitFifoStateUntilTimeout>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004542:	f043 0220 	orr.w	r2, r3, #32
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e000      	b.n	8004550 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800454e:	2300      	movs	r3, #0
}
 8004550:	4618      	mov	r0, r3
 8004552:	3710      	adds	r7, #16
 8004554:	46bd      	mov	sp, r7
 8004556:	bd80      	pop	{r7, pc}

08004558 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004558:	b580      	push	{r7, lr}
 800455a:	b082      	sub	sp, #8
 800455c:	af00      	add	r7, sp, #0
 800455e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2b00      	cmp	r3, #0
 8004564:	d101      	bne.n	800456a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	e042      	b.n	80045f0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004570:	2b00      	cmp	r3, #0
 8004572:	d106      	bne.n	8004582 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2200      	movs	r2, #0
 8004578:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800457c:	6878      	ldr	r0, [r7, #4]
 800457e:	f7fc fddb 	bl	8001138 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2224      	movs	r2, #36	@ 0x24
 8004586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d002      	beq.n	80045a8 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80045a2:	6878      	ldr	r0, [r7, #4]
 80045a4:	f000 ff14 	bl	80053d0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80045a8:	6878      	ldr	r0, [r7, #4]
 80045aa:	f000 fc15 	bl	8004dd8 <UART_SetConfig>
 80045ae:	4603      	mov	r3, r0
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e01b      	b.n	80045f0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80045c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	689a      	ldr	r2, [r3, #8]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80045d6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681a      	ldr	r2, [r3, #0]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f042 0201 	orr.w	r2, r2, #1
 80045e6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f000 ff93 	bl	8005514 <UART_CheckIdleState>
 80045ee:	4603      	mov	r3, r0
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3708      	adds	r7, #8
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b08a      	sub	sp, #40	@ 0x28
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	4613      	mov	r3, r2
 8004606:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800460e:	2b20      	cmp	r3, #32
 8004610:	d17b      	bne.n	800470a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d002      	beq.n	800461e <HAL_UART_Transmit+0x26>
 8004618:	88fb      	ldrh	r3, [r7, #6]
 800461a:	2b00      	cmp	r3, #0
 800461c:	d101      	bne.n	8004622 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800461e:	2301      	movs	r3, #1
 8004620:	e074      	b.n	800470c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2200      	movs	r2, #0
 8004626:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2221      	movs	r2, #33	@ 0x21
 800462e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004632:	f7fc fe7b 	bl	800132c <HAL_GetTick>
 8004636:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	88fa      	ldrh	r2, [r7, #6]
 800463c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	88fa      	ldrh	r2, [r7, #6]
 8004644:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004650:	d108      	bne.n	8004664 <HAL_UART_Transmit+0x6c>
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d104      	bne.n	8004664 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800465a:	2300      	movs	r3, #0
 800465c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	61bb      	str	r3, [r7, #24]
 8004662:	e003      	b.n	800466c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004664:	68bb      	ldr	r3, [r7, #8]
 8004666:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004668:	2300      	movs	r3, #0
 800466a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800466c:	e030      	b.n	80046d0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	9300      	str	r3, [sp, #0]
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	2200      	movs	r2, #0
 8004676:	2180      	movs	r1, #128	@ 0x80
 8004678:	68f8      	ldr	r0, [r7, #12]
 800467a:	f000 fff5 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 800467e:	4603      	mov	r3, r0
 8004680:	2b00      	cmp	r3, #0
 8004682:	d005      	beq.n	8004690 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	2220      	movs	r2, #32
 8004688:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e03d      	b.n	800470c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8004690:	69fb      	ldr	r3, [r7, #28]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d10b      	bne.n	80046ae <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004696:	69bb      	ldr	r3, [r7, #24]
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046a2:	b292      	uxth	r2, r2
 80046a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80046a6:	69bb      	ldr	r3, [r7, #24]
 80046a8:	3302      	adds	r3, #2
 80046aa:	61bb      	str	r3, [r7, #24]
 80046ac:	e007      	b.n	80046be <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80046ae:	69fb      	ldr	r3, [r7, #28]
 80046b0:	781a      	ldrb	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 80046b8:	69fb      	ldr	r3, [r7, #28]
 80046ba:	3301      	adds	r3, #1
 80046bc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046c4:	b29b      	uxth	r3, r3
 80046c6:	3b01      	subs	r3, #1
 80046c8:	b29a      	uxth	r2, r3
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80046d6:	b29b      	uxth	r3, r3
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d1c8      	bne.n	800466e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80046dc:	683b      	ldr	r3, [r7, #0]
 80046de:	9300      	str	r3, [sp, #0]
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	2200      	movs	r2, #0
 80046e4:	2140      	movs	r1, #64	@ 0x40
 80046e6:	68f8      	ldr	r0, [r7, #12]
 80046e8:	f000 ffbe 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d005      	beq.n	80046fe <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2220      	movs	r2, #32
 80046f6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e006      	b.n	800470c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2220      	movs	r2, #32
 8004702:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8004706:	2300      	movs	r3, #0
 8004708:	e000      	b.n	800470c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800470a:	2302      	movs	r3, #2
  }
}
 800470c:	4618      	mov	r0, r3
 800470e:	3720      	adds	r7, #32
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b0ba      	sub	sp, #232	@ 0xe8
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	69db      	ldr	r3, [r3, #28]
 8004722:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	689b      	ldr	r3, [r3, #8]
 8004736:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800473a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800473e:	f640 030f 	movw	r3, #2063	@ 0x80f
 8004742:	4013      	ands	r3, r2
 8004744:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8004748:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800474c:	2b00      	cmp	r3, #0
 800474e:	d11b      	bne.n	8004788 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8004750:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004754:	f003 0320 	and.w	r3, r3, #32
 8004758:	2b00      	cmp	r3, #0
 800475a:	d015      	beq.n	8004788 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800475c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004760:	f003 0320 	and.w	r3, r3, #32
 8004764:	2b00      	cmp	r3, #0
 8004766:	d105      	bne.n	8004774 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8004768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800476c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004770:	2b00      	cmp	r3, #0
 8004772:	d009      	beq.n	8004788 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004778:	2b00      	cmp	r3, #0
 800477a:	f000 8300 	beq.w	8004d7e <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	4798      	blx	r3
      }
      return;
 8004786:	e2fa      	b.n	8004d7e <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 8004788:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8123 	beq.w	80049d8 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8004792:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004796:	4b8d      	ldr	r3, [pc, #564]	@ (80049cc <HAL_UART_IRQHandler+0x2b8>)
 8004798:	4013      	ands	r3, r2
 800479a:	2b00      	cmp	r3, #0
 800479c:	d106      	bne.n	80047ac <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800479e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80047a2:	4b8b      	ldr	r3, [pc, #556]	@ (80049d0 <HAL_UART_IRQHandler+0x2bc>)
 80047a4:	4013      	ands	r3, r2
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	f000 8116 	beq.w	80049d8 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80047ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047b0:	f003 0301 	and.w	r3, r3, #1
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d011      	beq.n	80047dc <HAL_UART_IRQHandler+0xc8>
 80047b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80047bc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d00b      	beq.n	80047dc <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	2201      	movs	r2, #1
 80047ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80047d2:	f043 0201 	orr.w	r2, r3, #1
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80047dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d011      	beq.n	800480c <HAL_UART_IRQHandler+0xf8>
 80047e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80047ec:	f003 0301 	and.w	r3, r3, #1
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d00b      	beq.n	800480c <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2202      	movs	r2, #2
 80047fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004802:	f043 0204 	orr.w	r2, r3, #4
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800480c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004810:	f003 0304 	and.w	r3, r3, #4
 8004814:	2b00      	cmp	r3, #0
 8004816:	d011      	beq.n	800483c <HAL_UART_IRQHandler+0x128>
 8004818:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800481c:	f003 0301 	and.w	r3, r3, #1
 8004820:	2b00      	cmp	r3, #0
 8004822:	d00b      	beq.n	800483c <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	2204      	movs	r2, #4
 800482a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004832:	f043 0202 	orr.w	r2, r3, #2
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 800483c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004840:	f003 0308 	and.w	r3, r3, #8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d017      	beq.n	8004878 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8004848:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800484c:	f003 0320 	and.w	r3, r3, #32
 8004850:	2b00      	cmp	r3, #0
 8004852:	d105      	bne.n	8004860 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8004854:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8004858:	4b5c      	ldr	r3, [pc, #368]	@ (80049cc <HAL_UART_IRQHandler+0x2b8>)
 800485a:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00b      	beq.n	8004878 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2208      	movs	r2, #8
 8004866:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800486e:	f043 0208 	orr.w	r2, r3, #8
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004878:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800487c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004880:	2b00      	cmp	r3, #0
 8004882:	d012      	beq.n	80048aa <HAL_UART_IRQHandler+0x196>
 8004884:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004888:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800488c:	2b00      	cmp	r3, #0
 800488e:	d00c      	beq.n	80048aa <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004898:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048a0:	f043 0220 	orr.w	r2, r3, #32
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	f000 8266 	beq.w	8004d82 <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80048b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048ba:	f003 0320 	and.w	r3, r3, #32
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d013      	beq.n	80048ea <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80048c2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80048c6:	f003 0320 	and.w	r3, r3, #32
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d105      	bne.n	80048da <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80048ce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d007      	beq.n	80048ea <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f0:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048fe:	2b40      	cmp	r3, #64	@ 0x40
 8004900:	d005      	beq.n	800490e <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004902:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004906:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800490a:	2b00      	cmp	r3, #0
 800490c:	d054      	beq.n	80049b8 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f000 ff17 	bl	8005742 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800491e:	2b40      	cmp	r3, #64	@ 0x40
 8004920:	d146      	bne.n	80049b0 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	3308      	adds	r3, #8
 8004928:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004938:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800493c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004940:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	3308      	adds	r3, #8
 800494a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800494e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004952:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800495a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800495e:	e841 2300 	strex	r3, r2, [r1]
 8004962:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004966:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800496a:	2b00      	cmp	r3, #0
 800496c:	d1d9      	bne.n	8004922 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004974:	2b00      	cmp	r3, #0
 8004976:	d017      	beq.n	80049a8 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497e:	4a15      	ldr	r2, [pc, #84]	@ (80049d4 <HAL_UART_IRQHandler+0x2c0>)
 8004980:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004988:	4618      	mov	r0, r3
 800498a:	f7fc fe6c 	bl	8001666 <HAL_DMA_Abort_IT>
 800498e:	4603      	mov	r3, r0
 8004990:	2b00      	cmp	r3, #0
 8004992:	d019      	beq.n	80049c8 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800499a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80049a2:	4610      	mov	r0, r2
 80049a4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049a6:	e00f      	b.n	80049c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80049a8:	6878      	ldr	r0, [r7, #4]
 80049aa:	f000 f9ff 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049ae:	e00b      	b.n	80049c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80049b0:	6878      	ldr	r0, [r7, #4]
 80049b2:	f000 f9fb 	bl	8004dac <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049b6:	e007      	b.n	80049c8 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80049b8:	6878      	ldr	r0, [r7, #4]
 80049ba:	f000 f9f7 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2200      	movs	r2, #0
 80049c2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80049c6:	e1dc      	b.n	8004d82 <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049c8:	bf00      	nop
    return;
 80049ca:	e1da      	b.n	8004d82 <HAL_UART_IRQHandler+0x66e>
 80049cc:	10000001 	.word	0x10000001
 80049d0:	04000120 	.word	0x04000120
 80049d4:	0800580f 	.word	0x0800580f

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80049dc:	2b01      	cmp	r3, #1
 80049de:	f040 8170 	bne.w	8004cc2 <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80049e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80049e6:	f003 0310 	and.w	r3, r3, #16
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	f000 8169 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80049f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80049f4:	f003 0310 	and.w	r3, r3, #16
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	f000 8162 	beq.w	8004cc2 <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	2210      	movs	r2, #16
 8004a04:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	689b      	ldr	r3, [r3, #8]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a10:	2b40      	cmp	r3, #64	@ 0x40
 8004a12:	f040 80d8 	bne.w	8004bc6 <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a24:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	f000 80af 	beq.w	8004b8c <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004a34:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	f080 80a7 	bcs.w	8004b8c <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a44:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	f003 0320 	and.w	r3, r3, #32
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	f040 8087 	bne.w	8004b6a <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004a68:	e853 3f00 	ldrex	r3, [r3]
 8004a6c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004a70:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004a74:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a78:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	461a      	mov	r2, r3
 8004a82:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8004a86:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8004a8a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004a92:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004a96:	e841 2300 	strex	r3, r2, [r1]
 8004a9a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004a9e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d1da      	bne.n	8004a5c <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	3308      	adds	r3, #8
 8004aac:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ab0:	e853 3f00 	ldrex	r3, [r3]
 8004ab4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004ab6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004ab8:	f023 0301 	bic.w	r3, r3, #1
 8004abc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	3308      	adds	r3, #8
 8004ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004aca:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004ace:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004ad2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004adc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e1      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004af4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004af8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	3308      	adds	r3, #8
 8004b02:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b06:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b08:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b0a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b0c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b0e:	e841 2300 	strex	r3, r2, [r1]
 8004b12:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d1e3      	bne.n	8004ae2 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b30:	e853 3f00 	ldrex	r3, [r3]
 8004b34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b38:	f023 0310 	bic.w	r3, r3, #16
 8004b3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	461a      	mov	r2, r3
 8004b46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8004b4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004b4c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004b50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004b52:	e841 2300 	strex	r3, r2, [r1]
 8004b56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004b58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d1e4      	bne.n	8004b28 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b64:	4618      	mov	r0, r3
 8004b66:	f7fc fd22 	bl	80015ae <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2202      	movs	r2, #2
 8004b6e:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	b29b      	uxth	r3, r3
 8004b82:	4619      	mov	r1, r3
 8004b84:	6878      	ldr	r0, [r7, #4]
 8004b86:	f000 f91b 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004b8a:	e0fc      	b.n	8004d86 <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004b92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004b96:	429a      	cmp	r2, r3
 8004b98:	f040 80f5 	bne.w	8004d86 <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f003 0320 	and.w	r3, r3, #32
 8004baa:	2b20      	cmp	r3, #32
 8004bac:	f040 80eb 	bne.w	8004d86 <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004bbc:	4619      	mov	r1, r3
 8004bbe:	6878      	ldr	r0, [r7, #4]
 8004bc0:	f000 f8fe 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
      return;
 8004bc4:	e0df      	b.n	8004d86 <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	1ad3      	subs	r3, r2, r3
 8004bd6:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8004be0:	b29b      	uxth	r3, r3
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	f000 80d1 	beq.w	8004d8a <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8004be8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	f000 80cc 	beq.w	8004d8a <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bfa:	e853 3f00 	ldrex	r3, [r3]
 8004bfe:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c02:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	461a      	mov	r2, r3
 8004c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8004c14:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c16:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c18:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c1c:	e841 2300 	strex	r3, r2, [r1]
 8004c20:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	d1e4      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	3308      	adds	r3, #8
 8004c2e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c32:	e853 3f00 	ldrex	r3, [r3]
 8004c36:	623b      	str	r3, [r7, #32]
   return(result);
 8004c38:	6a3b      	ldr	r3, [r7, #32]
 8004c3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c3e:	f023 0301 	bic.w	r3, r3, #1
 8004c42:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	3308      	adds	r3, #8
 8004c4c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c50:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c52:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c54:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004c56:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c58:	e841 2300 	strex	r3, r2, [r1]
 8004c5c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004c5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1e1      	bne.n	8004c28 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2220      	movs	r2, #32
 8004c68:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f023 0310 	bic.w	r3, r3, #16
 8004c8c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	461a      	mov	r2, r3
 8004c96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8004c9a:	61fb      	str	r3, [r7, #28]
 8004c9c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	69b9      	ldr	r1, [r7, #24]
 8004ca0:	69fa      	ldr	r2, [r7, #28]
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	617b      	str	r3, [r7, #20]
   return(result);
 8004ca8:	697b      	ldr	r3, [r7, #20]
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e4      	bne.n	8004c78 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2202      	movs	r2, #2
 8004cb2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cb8:	4619      	mov	r1, r3
 8004cba:	6878      	ldr	r0, [r7, #4]
 8004cbc:	f000 f880 	bl	8004dc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004cc0:	e063      	b.n	8004d8a <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004cc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d00e      	beq.n	8004cec <HAL_UART_IRQHandler+0x5d8>
 8004cce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cd2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d008      	beq.n	8004cec <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004ce2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004ce4:	6878      	ldr	r0, [r7, #4]
 8004ce6:	f000 fdd3 	bl	8005890 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004cea:	e051      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cf0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d014      	beq.n	8004d22 <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8004cf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d105      	bne.n	8004d10 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8004d04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d08:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d008      	beq.n	8004d22 <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d03a      	beq.n	8004d8e <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	4798      	blx	r3
    }
    return;
 8004d20:	e035      	b.n	8004d8e <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d009      	beq.n	8004d42 <HAL_UART_IRQHandler+0x62e>
 8004d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8004d3a:	6878      	ldr	r0, [r7, #4]
 8004d3c:	f000 fd7d 	bl	800583a <UART_EndTransmit_IT>
    return;
 8004d40:	e026      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8004d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d009      	beq.n	8004d62 <HAL_UART_IRQHandler+0x64e>
 8004d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d52:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d003      	beq.n	8004d62 <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 fdac 	bl	80058b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d60:	e016      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d010      	beq.n	8004d90 <HAL_UART_IRQHandler+0x67c>
 8004d6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	da0c      	bge.n	8004d90 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8004d76:	6878      	ldr	r0, [r7, #4]
 8004d78:	f000 fd94 	bl	80058a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004d7c:	e008      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
      return;
 8004d7e:	bf00      	nop
 8004d80:	e006      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
    return;
 8004d82:	bf00      	nop
 8004d84:	e004      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
      return;
 8004d86:	bf00      	nop
 8004d88:	e002      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
      return;
 8004d8a:	bf00      	nop
 8004d8c:	e000      	b.n	8004d90 <HAL_UART_IRQHandler+0x67c>
    return;
 8004d8e:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8004d90:	37e8      	adds	r7, #232	@ 0xe8
 8004d92:	46bd      	mov	sp, r7
 8004d94:	bd80      	pop	{r7, pc}
 8004d96:	bf00      	nop

08004d98 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d98:	b480      	push	{r7}
 8004d9a:	b083      	sub	sp, #12
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dac:	b480      	push	{r7}
 8004dae:	b083      	sub	sp, #12
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004db4:	bf00      	nop
 8004db6:	370c      	adds	r7, #12
 8004db8:	46bd      	mov	sp, r7
 8004dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dbe:	4770      	bx	lr

08004dc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
 8004dc8:	460b      	mov	r3, r1
 8004dca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dcc:	bf00      	nop
 8004dce:	370c      	adds	r7, #12
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd6:	4770      	bx	lr

08004dd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b08c      	sub	sp, #48	@ 0x30
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004de2:	2300      	movs	r3, #0
 8004de4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004de8:	697b      	ldr	r3, [r7, #20]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	697b      	ldr	r3, [r7, #20]
 8004dee:	691b      	ldr	r3, [r3, #16]
 8004df0:	431a      	orrs	r2, r3
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	695b      	ldr	r3, [r3, #20]
 8004df6:	431a      	orrs	r2, r3
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	69db      	ldr	r3, [r3, #28]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e00:	697b      	ldr	r3, [r7, #20]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4baa      	ldr	r3, [pc, #680]	@ (80050b0 <UART_SetConfig+0x2d8>)
 8004e08:	4013      	ands	r3, r2
 8004e0a:	697a      	ldr	r2, [r7, #20]
 8004e0c:	6812      	ldr	r2, [r2, #0]
 8004e0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e10:	430b      	orrs	r3, r1
 8004e12:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	68da      	ldr	r2, [r3, #12]
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	699b      	ldr	r3, [r3, #24]
 8004e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4a9f      	ldr	r2, [pc, #636]	@ (80050b4 <UART_SetConfig+0x2dc>)
 8004e36:	4293      	cmp	r3, r2
 8004e38:	d004      	beq.n	8004e44 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004e40:	4313      	orrs	r3, r2
 8004e42:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e44:	697b      	ldr	r3, [r7, #20]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	689b      	ldr	r3, [r3, #8]
 8004e4a:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8004e4e:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	6812      	ldr	r2, [r2, #0]
 8004e56:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e58:	430b      	orrs	r3, r1
 8004e5a:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e62:	f023 010f 	bic.w	r1, r3, #15
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8004e6a:	697b      	ldr	r3, [r7, #20]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	430a      	orrs	r2, r1
 8004e70:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a90      	ldr	r2, [pc, #576]	@ (80050b8 <UART_SetConfig+0x2e0>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d125      	bne.n	8004ec8 <UART_SetConfig+0xf0>
 8004e7c:	4b8f      	ldr	r3, [pc, #572]	@ (80050bc <UART_SetConfig+0x2e4>)
 8004e7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e82:	f003 0303 	and.w	r3, r3, #3
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	d81a      	bhi.n	8004ec0 <UART_SetConfig+0xe8>
 8004e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004e90 <UART_SetConfig+0xb8>)
 8004e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e90:	08004ea1 	.word	0x08004ea1
 8004e94:	08004eb1 	.word	0x08004eb1
 8004e98:	08004ea9 	.word	0x08004ea9
 8004e9c:	08004eb9 	.word	0x08004eb9
 8004ea0:	2301      	movs	r3, #1
 8004ea2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ea6:	e116      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004ea8:	2302      	movs	r3, #2
 8004eaa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eae:	e112      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004eb0:	2304      	movs	r3, #4
 8004eb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004eb6:	e10e      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004eb8:	2308      	movs	r3, #8
 8004eba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ebe:	e10a      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004ec0:	2310      	movs	r3, #16
 8004ec2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004ec6:	e106      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004ec8:	697b      	ldr	r3, [r7, #20]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a7c      	ldr	r2, [pc, #496]	@ (80050c0 <UART_SetConfig+0x2e8>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d138      	bne.n	8004f44 <UART_SetConfig+0x16c>
 8004ed2:	4b7a      	ldr	r3, [pc, #488]	@ (80050bc <UART_SetConfig+0x2e4>)
 8004ed4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ed8:	f003 030c 	and.w	r3, r3, #12
 8004edc:	2b0c      	cmp	r3, #12
 8004ede:	d82d      	bhi.n	8004f3c <UART_SetConfig+0x164>
 8004ee0:	a201      	add	r2, pc, #4	@ (adr r2, 8004ee8 <UART_SetConfig+0x110>)
 8004ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ee6:	bf00      	nop
 8004ee8:	08004f1d 	.word	0x08004f1d
 8004eec:	08004f3d 	.word	0x08004f3d
 8004ef0:	08004f3d 	.word	0x08004f3d
 8004ef4:	08004f3d 	.word	0x08004f3d
 8004ef8:	08004f2d 	.word	0x08004f2d
 8004efc:	08004f3d 	.word	0x08004f3d
 8004f00:	08004f3d 	.word	0x08004f3d
 8004f04:	08004f3d 	.word	0x08004f3d
 8004f08:	08004f25 	.word	0x08004f25
 8004f0c:	08004f3d 	.word	0x08004f3d
 8004f10:	08004f3d 	.word	0x08004f3d
 8004f14:	08004f3d 	.word	0x08004f3d
 8004f18:	08004f35 	.word	0x08004f35
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f22:	e0d8      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f24:	2302      	movs	r3, #2
 8004f26:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f2a:	e0d4      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f2c:	2304      	movs	r3, #4
 8004f2e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f32:	e0d0      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f34:	2308      	movs	r3, #8
 8004f36:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f3a:	e0cc      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f3c:	2310      	movs	r3, #16
 8004f3e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f42:	e0c8      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	4a5e      	ldr	r2, [pc, #376]	@ (80050c4 <UART_SetConfig+0x2ec>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d125      	bne.n	8004f9a <UART_SetConfig+0x1c2>
 8004f4e:	4b5b      	ldr	r3, [pc, #364]	@ (80050bc <UART_SetConfig+0x2e4>)
 8004f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f54:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004f58:	2b30      	cmp	r3, #48	@ 0x30
 8004f5a:	d016      	beq.n	8004f8a <UART_SetConfig+0x1b2>
 8004f5c:	2b30      	cmp	r3, #48	@ 0x30
 8004f5e:	d818      	bhi.n	8004f92 <UART_SetConfig+0x1ba>
 8004f60:	2b20      	cmp	r3, #32
 8004f62:	d00a      	beq.n	8004f7a <UART_SetConfig+0x1a2>
 8004f64:	2b20      	cmp	r3, #32
 8004f66:	d814      	bhi.n	8004f92 <UART_SetConfig+0x1ba>
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <UART_SetConfig+0x19a>
 8004f6c:	2b10      	cmp	r3, #16
 8004f6e:	d008      	beq.n	8004f82 <UART_SetConfig+0x1aa>
 8004f70:	e00f      	b.n	8004f92 <UART_SetConfig+0x1ba>
 8004f72:	2300      	movs	r3, #0
 8004f74:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f78:	e0ad      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f80:	e0a9      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f82:	2304      	movs	r3, #4
 8004f84:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f88:	e0a5      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f8a:	2308      	movs	r3, #8
 8004f8c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f90:	e0a1      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f92:	2310      	movs	r3, #16
 8004f94:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004f98:	e09d      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	4a4a      	ldr	r2, [pc, #296]	@ (80050c8 <UART_SetConfig+0x2f0>)
 8004fa0:	4293      	cmp	r3, r2
 8004fa2:	d125      	bne.n	8004ff0 <UART_SetConfig+0x218>
 8004fa4:	4b45      	ldr	r3, [pc, #276]	@ (80050bc <UART_SetConfig+0x2e4>)
 8004fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004faa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8004fae:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb0:	d016      	beq.n	8004fe0 <UART_SetConfig+0x208>
 8004fb2:	2bc0      	cmp	r3, #192	@ 0xc0
 8004fb4:	d818      	bhi.n	8004fe8 <UART_SetConfig+0x210>
 8004fb6:	2b80      	cmp	r3, #128	@ 0x80
 8004fb8:	d00a      	beq.n	8004fd0 <UART_SetConfig+0x1f8>
 8004fba:	2b80      	cmp	r3, #128	@ 0x80
 8004fbc:	d814      	bhi.n	8004fe8 <UART_SetConfig+0x210>
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d002      	beq.n	8004fc8 <UART_SetConfig+0x1f0>
 8004fc2:	2b40      	cmp	r3, #64	@ 0x40
 8004fc4:	d008      	beq.n	8004fd8 <UART_SetConfig+0x200>
 8004fc6:	e00f      	b.n	8004fe8 <UART_SetConfig+0x210>
 8004fc8:	2300      	movs	r3, #0
 8004fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fce:	e082      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fd6:	e07e      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004fd8:	2304      	movs	r3, #4
 8004fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fde:	e07a      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004fe0:	2308      	movs	r3, #8
 8004fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fe6:	e076      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004fe8:	2310      	movs	r3, #16
 8004fea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8004fee:	e072      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a35      	ldr	r2, [pc, #212]	@ (80050cc <UART_SetConfig+0x2f4>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d12a      	bne.n	8005050 <UART_SetConfig+0x278>
 8004ffa:	4b30      	ldr	r3, [pc, #192]	@ (80050bc <UART_SetConfig+0x2e4>)
 8004ffc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005000:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005004:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005008:	d01a      	beq.n	8005040 <UART_SetConfig+0x268>
 800500a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800500e:	d81b      	bhi.n	8005048 <UART_SetConfig+0x270>
 8005010:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005014:	d00c      	beq.n	8005030 <UART_SetConfig+0x258>
 8005016:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800501a:	d815      	bhi.n	8005048 <UART_SetConfig+0x270>
 800501c:	2b00      	cmp	r3, #0
 800501e:	d003      	beq.n	8005028 <UART_SetConfig+0x250>
 8005020:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005024:	d008      	beq.n	8005038 <UART_SetConfig+0x260>
 8005026:	e00f      	b.n	8005048 <UART_SetConfig+0x270>
 8005028:	2300      	movs	r3, #0
 800502a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800502e:	e052      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005030:	2302      	movs	r3, #2
 8005032:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005036:	e04e      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005038:	2304      	movs	r3, #4
 800503a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800503e:	e04a      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005040:	2308      	movs	r3, #8
 8005042:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005046:	e046      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005048:	2310      	movs	r3, #16
 800504a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800504e:	e042      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4a17      	ldr	r2, [pc, #92]	@ (80050b4 <UART_SetConfig+0x2dc>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d13a      	bne.n	80050d0 <UART_SetConfig+0x2f8>
 800505a:	4b18      	ldr	r3, [pc, #96]	@ (80050bc <UART_SetConfig+0x2e4>)
 800505c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005060:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8005064:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8005068:	d01a      	beq.n	80050a0 <UART_SetConfig+0x2c8>
 800506a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800506e:	d81b      	bhi.n	80050a8 <UART_SetConfig+0x2d0>
 8005070:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005074:	d00c      	beq.n	8005090 <UART_SetConfig+0x2b8>
 8005076:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800507a:	d815      	bhi.n	80050a8 <UART_SetConfig+0x2d0>
 800507c:	2b00      	cmp	r3, #0
 800507e:	d003      	beq.n	8005088 <UART_SetConfig+0x2b0>
 8005080:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005084:	d008      	beq.n	8005098 <UART_SetConfig+0x2c0>
 8005086:	e00f      	b.n	80050a8 <UART_SetConfig+0x2d0>
 8005088:	2300      	movs	r3, #0
 800508a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800508e:	e022      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005090:	2302      	movs	r3, #2
 8005092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8005096:	e01e      	b.n	80050d6 <UART_SetConfig+0x2fe>
 8005098:	2304      	movs	r3, #4
 800509a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800509e:	e01a      	b.n	80050d6 <UART_SetConfig+0x2fe>
 80050a0:	2308      	movs	r3, #8
 80050a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050a6:	e016      	b.n	80050d6 <UART_SetConfig+0x2fe>
 80050a8:	2310      	movs	r3, #16
 80050aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80050ae:	e012      	b.n	80050d6 <UART_SetConfig+0x2fe>
 80050b0:	cfff69f3 	.word	0xcfff69f3
 80050b4:	40008000 	.word	0x40008000
 80050b8:	40013800 	.word	0x40013800
 80050bc:	40021000 	.word	0x40021000
 80050c0:	40004400 	.word	0x40004400
 80050c4:	40004800 	.word	0x40004800
 80050c8:	40004c00 	.word	0x40004c00
 80050cc:	40005000 	.word	0x40005000
 80050d0:	2310      	movs	r3, #16
 80050d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4aae      	ldr	r2, [pc, #696]	@ (8005394 <UART_SetConfig+0x5bc>)
 80050dc:	4293      	cmp	r3, r2
 80050de:	f040 8097 	bne.w	8005210 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80050e2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d823      	bhi.n	8005132 <UART_SetConfig+0x35a>
 80050ea:	a201      	add	r2, pc, #4	@ (adr r2, 80050f0 <UART_SetConfig+0x318>)
 80050ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f0:	08005115 	.word	0x08005115
 80050f4:	08005133 	.word	0x08005133
 80050f8:	0800511d 	.word	0x0800511d
 80050fc:	08005133 	.word	0x08005133
 8005100:	08005123 	.word	0x08005123
 8005104:	08005133 	.word	0x08005133
 8005108:	08005133 	.word	0x08005133
 800510c:	08005133 	.word	0x08005133
 8005110:	0800512b 	.word	0x0800512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005114:	f7fd fb70 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8005118:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800511a:	e010      	b.n	800513e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800511c:	4b9e      	ldr	r3, [pc, #632]	@ (8005398 <UART_SetConfig+0x5c0>)
 800511e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005120:	e00d      	b.n	800513e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005122:	f7fd fad1 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8005126:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005128:	e009      	b.n	800513e <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800512a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800512e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005130:	e005      	b.n	800513e <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8005132:	2300      	movs	r3, #0
 8005134:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005136:	2301      	movs	r3, #1
 8005138:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800513c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800513e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005140:	2b00      	cmp	r3, #0
 8005142:	f000 8130 	beq.w	80053a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800514a:	4a94      	ldr	r2, [pc, #592]	@ (800539c <UART_SetConfig+0x5c4>)
 800514c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005150:	461a      	mov	r2, r3
 8005152:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005154:	fbb3 f3f2 	udiv	r3, r3, r2
 8005158:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	685a      	ldr	r2, [r3, #4]
 800515e:	4613      	mov	r3, r2
 8005160:	005b      	lsls	r3, r3, #1
 8005162:	4413      	add	r3, r2
 8005164:	69ba      	ldr	r2, [r7, #24]
 8005166:	429a      	cmp	r2, r3
 8005168:	d305      	bcc.n	8005176 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8005170:	69ba      	ldr	r2, [r7, #24]
 8005172:	429a      	cmp	r2, r3
 8005174:	d903      	bls.n	800517e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8005176:	2301      	movs	r3, #1
 8005178:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800517c:	e113      	b.n	80053a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005180:	2200      	movs	r2, #0
 8005182:	60bb      	str	r3, [r7, #8]
 8005184:	60fa      	str	r2, [r7, #12]
 8005186:	697b      	ldr	r3, [r7, #20]
 8005188:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800518a:	4a84      	ldr	r2, [pc, #528]	@ (800539c <UART_SetConfig+0x5c4>)
 800518c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005190:	b29b      	uxth	r3, r3
 8005192:	2200      	movs	r2, #0
 8005194:	603b      	str	r3, [r7, #0]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	e9d7 2300 	ldrd	r2, r3, [r7]
 800519c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80051a0:	f7fb f82c 	bl	80001fc <__aeabi_uldivmod>
 80051a4:	4602      	mov	r2, r0
 80051a6:	460b      	mov	r3, r1
 80051a8:	4610      	mov	r0, r2
 80051aa:	4619      	mov	r1, r3
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	020b      	lsls	r3, r1, #8
 80051b6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80051ba:	0202      	lsls	r2, r0, #8
 80051bc:	6979      	ldr	r1, [r7, #20]
 80051be:	6849      	ldr	r1, [r1, #4]
 80051c0:	0849      	lsrs	r1, r1, #1
 80051c2:	2000      	movs	r0, #0
 80051c4:	460c      	mov	r4, r1
 80051c6:	4605      	mov	r5, r0
 80051c8:	eb12 0804 	adds.w	r8, r2, r4
 80051cc:	eb43 0905 	adc.w	r9, r3, r5
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	2200      	movs	r2, #0
 80051d6:	469a      	mov	sl, r3
 80051d8:	4693      	mov	fp, r2
 80051da:	4652      	mov	r2, sl
 80051dc:	465b      	mov	r3, fp
 80051de:	4640      	mov	r0, r8
 80051e0:	4649      	mov	r1, r9
 80051e2:	f7fb f80b 	bl	80001fc <__aeabi_uldivmod>
 80051e6:	4602      	mov	r2, r0
 80051e8:	460b      	mov	r3, r1
 80051ea:	4613      	mov	r3, r2
 80051ec:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80051ee:	6a3b      	ldr	r3, [r7, #32]
 80051f0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80051f4:	d308      	bcc.n	8005208 <UART_SetConfig+0x430>
 80051f6:	6a3b      	ldr	r3, [r7, #32]
 80051f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80051fc:	d204      	bcs.n	8005208 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	6a3a      	ldr	r2, [r7, #32]
 8005204:	60da      	str	r2, [r3, #12]
 8005206:	e0ce      	b.n	80053a6 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800520e:	e0ca      	b.n	80053a6 <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005210:	697b      	ldr	r3, [r7, #20]
 8005212:	69db      	ldr	r3, [r3, #28]
 8005214:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005218:	d166      	bne.n	80052e8 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800521a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800521e:	2b08      	cmp	r3, #8
 8005220:	d827      	bhi.n	8005272 <UART_SetConfig+0x49a>
 8005222:	a201      	add	r2, pc, #4	@ (adr r2, 8005228 <UART_SetConfig+0x450>)
 8005224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005228:	0800524d 	.word	0x0800524d
 800522c:	08005255 	.word	0x08005255
 8005230:	0800525d 	.word	0x0800525d
 8005234:	08005273 	.word	0x08005273
 8005238:	08005263 	.word	0x08005263
 800523c:	08005273 	.word	0x08005273
 8005240:	08005273 	.word	0x08005273
 8005244:	08005273 	.word	0x08005273
 8005248:	0800526b 	.word	0x0800526b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800524c:	f7fd fad4 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8005250:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005252:	e014      	b.n	800527e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005254:	f7fd fae6 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8005258:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800525a:	e010      	b.n	800527e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800525c:	4b4e      	ldr	r3, [pc, #312]	@ (8005398 <UART_SetConfig+0x5c0>)
 800525e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005260:	e00d      	b.n	800527e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005262:	f7fd fa31 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8005266:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005268:	e009      	b.n	800527e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800526a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800526e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005270:	e005      	b.n	800527e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8005272:	2300      	movs	r3, #0
 8005274:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005276:	2301      	movs	r3, #1
 8005278:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800527c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800527e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005280:	2b00      	cmp	r3, #0
 8005282:	f000 8090 	beq.w	80053a6 <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005286:	697b      	ldr	r3, [r7, #20]
 8005288:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800528a:	4a44      	ldr	r2, [pc, #272]	@ (800539c <UART_SetConfig+0x5c4>)
 800528c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005290:	461a      	mov	r2, r3
 8005292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005294:	fbb3 f3f2 	udiv	r3, r3, r2
 8005298:	005a      	lsls	r2, r3, #1
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	085b      	lsrs	r3, r3, #1
 80052a0:	441a      	add	r2, r3
 80052a2:	697b      	ldr	r3, [r7, #20]
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80052aa:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	2b0f      	cmp	r3, #15
 80052b0:	d916      	bls.n	80052e0 <UART_SetConfig+0x508>
 80052b2:	6a3b      	ldr	r3, [r7, #32]
 80052b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80052b8:	d212      	bcs.n	80052e0 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80052ba:	6a3b      	ldr	r3, [r7, #32]
 80052bc:	b29b      	uxth	r3, r3
 80052be:	f023 030f 	bic.w	r3, r3, #15
 80052c2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80052c4:	6a3b      	ldr	r3, [r7, #32]
 80052c6:	085b      	lsrs	r3, r3, #1
 80052c8:	b29b      	uxth	r3, r3
 80052ca:	f003 0307 	and.w	r3, r3, #7
 80052ce:	b29a      	uxth	r2, r3
 80052d0:	8bfb      	ldrh	r3, [r7, #30]
 80052d2:	4313      	orrs	r3, r2
 80052d4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	8bfa      	ldrh	r2, [r7, #30]
 80052dc:	60da      	str	r2, [r3, #12]
 80052de:	e062      	b.n	80053a6 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80052e6:	e05e      	b.n	80053a6 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80052e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80052ec:	2b08      	cmp	r3, #8
 80052ee:	d828      	bhi.n	8005342 <UART_SetConfig+0x56a>
 80052f0:	a201      	add	r2, pc, #4	@ (adr r2, 80052f8 <UART_SetConfig+0x520>)
 80052f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f6:	bf00      	nop
 80052f8:	0800531d 	.word	0x0800531d
 80052fc:	08005325 	.word	0x08005325
 8005300:	0800532d 	.word	0x0800532d
 8005304:	08005343 	.word	0x08005343
 8005308:	08005333 	.word	0x08005333
 800530c:	08005343 	.word	0x08005343
 8005310:	08005343 	.word	0x08005343
 8005314:	08005343 	.word	0x08005343
 8005318:	0800533b 	.word	0x0800533b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800531c:	f7fd fa6c 	bl	80027f8 <HAL_RCC_GetPCLK1Freq>
 8005320:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005322:	e014      	b.n	800534e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fd fa7e 	bl	8002824 <HAL_RCC_GetPCLK2Freq>
 8005328:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800532a:	e010      	b.n	800534e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800532c:	4b1a      	ldr	r3, [pc, #104]	@ (8005398 <UART_SetConfig+0x5c0>)
 800532e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005330:	e00d      	b.n	800534e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005332:	f7fd f9c9 	bl	80026c8 <HAL_RCC_GetSysClockFreq>
 8005336:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8005338:	e009      	b.n	800534e <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800533a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800533e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8005340:	e005      	b.n	800534e <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800534c:	bf00      	nop
    }

    if (pclk != 0U)
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	2b00      	cmp	r3, #0
 8005352:	d028      	beq.n	80053a6 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005358:	4a10      	ldr	r2, [pc, #64]	@ (800539c <UART_SetConfig+0x5c4>)
 800535a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800535e:	461a      	mov	r2, r3
 8005360:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005362:	fbb3 f2f2 	udiv	r2, r3, r2
 8005366:	697b      	ldr	r3, [r7, #20]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	441a      	add	r2, r3
 800536e:	697b      	ldr	r3, [r7, #20]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	fbb2 f3f3 	udiv	r3, r2, r3
 8005376:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005378:	6a3b      	ldr	r3, [r7, #32]
 800537a:	2b0f      	cmp	r3, #15
 800537c:	d910      	bls.n	80053a0 <UART_SetConfig+0x5c8>
 800537e:	6a3b      	ldr	r3, [r7, #32]
 8005380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005384:	d20c      	bcs.n	80053a0 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	b29a      	uxth	r2, r3
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	60da      	str	r2, [r3, #12]
 8005390:	e009      	b.n	80053a6 <UART_SetConfig+0x5ce>
 8005392:	bf00      	nop
 8005394:	40008000 	.word	0x40008000
 8005398:	00f42400 	.word	0x00f42400
 800539c:	080173b0 	.word	0x080173b0
      }
      else
      {
        ret = HAL_ERROR;
 80053a0:	2301      	movs	r3, #1
 80053a2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80053b6:	697b      	ldr	r3, [r7, #20]
 80053b8:	2200      	movs	r2, #0
 80053ba:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80053bc:	697b      	ldr	r3, [r7, #20]
 80053be:	2200      	movs	r2, #0
 80053c0:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80053c2:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3730      	adds	r7, #48	@ 0x30
 80053ca:	46bd      	mov	sp, r7
 80053cc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080053d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053dc:	f003 0308 	and.w	r3, r3, #8
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d00a      	beq.n	80053fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	685b      	ldr	r3, [r3, #4]
 80053ea:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	430a      	orrs	r2, r1
 80053f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053fe:	f003 0301 	and.w	r3, r3, #1
 8005402:	2b00      	cmp	r3, #0
 8005404:	d00a      	beq.n	800541c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	685b      	ldr	r3, [r3, #4]
 800540c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005420:	f003 0302 	and.w	r3, r3, #2
 8005424:	2b00      	cmp	r3, #0
 8005426:	d00a      	beq.n	800543e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d00a      	beq.n	8005460 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	685b      	ldr	r3, [r3, #4]
 8005450:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	430a      	orrs	r2, r1
 800545e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005464:	f003 0310 	and.w	r3, r3, #16
 8005468:	2b00      	cmp	r3, #0
 800546a:	d00a      	beq.n	8005482 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	430a      	orrs	r2, r1
 8005480:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005486:	f003 0320 	and.w	r3, r3, #32
 800548a:	2b00      	cmp	r3, #0
 800548c:	d00a      	beq.n	80054a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	430a      	orrs	r2, r1
 80054a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d01a      	beq.n	80054e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	430a      	orrs	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054ca:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80054ce:	d10a      	bne.n	80054e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00a      	beq.n	8005508 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	430a      	orrs	r2, r1
 8005506:	605a      	str	r2, [r3, #4]
  }
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b098      	sub	sp, #96	@ 0x60
 8005518:	af02      	add	r7, sp, #8
 800551a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2200      	movs	r2, #0
 8005520:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005524:	f7fb ff02 	bl	800132c <HAL_GetTick>
 8005528:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	f003 0308 	and.w	r3, r3, #8
 8005534:	2b08      	cmp	r3, #8
 8005536:	d12f      	bne.n	8005598 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005538:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800553c:	9300      	str	r3, [sp, #0]
 800553e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005540:	2200      	movs	r2, #0
 8005542:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f000 f88e 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 800554c:	4603      	mov	r3, r0
 800554e:	2b00      	cmp	r3, #0
 8005550:	d022      	beq.n	8005598 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005558:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800555a:	e853 3f00 	ldrex	r3, [r3]
 800555e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005560:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005562:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005566:	653b      	str	r3, [r7, #80]	@ 0x50
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	461a      	mov	r2, r3
 800556e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005570:	647b      	str	r3, [r7, #68]	@ 0x44
 8005572:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005574:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005576:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005578:	e841 2300 	strex	r3, r2, [r1]
 800557c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800557e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005580:	2b00      	cmp	r3, #0
 8005582:	d1e6      	bne.n	8005552 <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	2220      	movs	r2, #32
 8005588:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	2200      	movs	r2, #0
 8005590:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e063      	b.n	8005660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f003 0304 	and.w	r3, r3, #4
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	d149      	bne.n	800563a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80055a6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80055aa:	9300      	str	r3, [sp, #0]
 80055ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80055ae:	2200      	movs	r2, #0
 80055b0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f000 f857 	bl	8005668 <UART_WaitOnFlagUntilTimeout>
 80055ba:	4603      	mov	r3, r0
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d03c      	beq.n	800563a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055c8:	e853 3f00 	ldrex	r3, [r3]
 80055cc:	623b      	str	r3, [r7, #32]
   return(result);
 80055ce:	6a3b      	ldr	r3, [r7, #32]
 80055d0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80055d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	461a      	mov	r2, r3
 80055dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80055de:	633b      	str	r3, [r7, #48]	@ 0x30
 80055e0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80055e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80055e6:	e841 2300 	strex	r3, r2, [r1]
 80055ea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80055ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d1e6      	bne.n	80055c0 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	3308      	adds	r3, #8
 80055f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	e853 3f00 	ldrex	r3, [r3]
 8005600:	60fb      	str	r3, [r7, #12]
   return(result);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	f023 0301 	bic.w	r3, r3, #1
 8005608:	64bb      	str	r3, [r7, #72]	@ 0x48
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	3308      	adds	r3, #8
 8005610:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005612:	61fa      	str	r2, [r7, #28]
 8005614:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005616:	69b9      	ldr	r1, [r7, #24]
 8005618:	69fa      	ldr	r2, [r7, #28]
 800561a:	e841 2300 	strex	r3, r2, [r1]
 800561e:	617b      	str	r3, [r7, #20]
   return(result);
 8005620:	697b      	ldr	r3, [r7, #20]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d1e5      	bne.n	80055f2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2220      	movs	r2, #32
 800562a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2200      	movs	r2, #0
 8005632:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005636:	2303      	movs	r3, #3
 8005638:	e012      	b.n	8005660 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2220      	movs	r2, #32
 800563e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	2220      	movs	r2, #32
 8005646:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	2200      	movs	r2, #0
 800564e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2200      	movs	r2, #0
 800565a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800565e:	2300      	movs	r3, #0
}
 8005660:	4618      	mov	r0, r3
 8005662:	3758      	adds	r7, #88	@ 0x58
 8005664:	46bd      	mov	sp, r7
 8005666:	bd80      	pop	{r7, pc}

08005668 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005668:	b580      	push	{r7, lr}
 800566a:	b084      	sub	sp, #16
 800566c:	af00      	add	r7, sp, #0
 800566e:	60f8      	str	r0, [r7, #12]
 8005670:	60b9      	str	r1, [r7, #8]
 8005672:	603b      	str	r3, [r7, #0]
 8005674:	4613      	mov	r3, r2
 8005676:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005678:	e04f      	b.n	800571a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005680:	d04b      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005682:	f7fb fe53 	bl	800132c <HAL_GetTick>
 8005686:	4602      	mov	r2, r0
 8005688:	683b      	ldr	r3, [r7, #0]
 800568a:	1ad3      	subs	r3, r2, r3
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	429a      	cmp	r2, r3
 8005690:	d302      	bcc.n	8005698 <UART_WaitOnFlagUntilTimeout+0x30>
 8005692:	69bb      	ldr	r3, [r7, #24]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d101      	bne.n	800569c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005698:	2303      	movs	r3, #3
 800569a:	e04e      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d037      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	2b80      	cmp	r3, #128	@ 0x80
 80056ae:	d034      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0xb2>
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	2b40      	cmp	r3, #64	@ 0x40
 80056b4:	d031      	beq.n	800571a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	f003 0308 	and.w	r3, r3, #8
 80056c0:	2b08      	cmp	r3, #8
 80056c2:	d110      	bne.n	80056e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	2208      	movs	r2, #8
 80056ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80056cc:	68f8      	ldr	r0, [r7, #12]
 80056ce:	f000 f838 	bl	8005742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2208      	movs	r2, #8
 80056d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80056e2:	2301      	movs	r3, #1
 80056e4:	e029      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80056f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80056f4:	d111      	bne.n	800571a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80056fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005700:	68f8      	ldr	r0, [r7, #12]
 8005702:	f000 f81e 	bl	8005742 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	2220      	movs	r2, #32
 800570a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2200      	movs	r2, #0
 8005712:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005716:	2303      	movs	r3, #3
 8005718:	e00f      	b.n	800573a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68bb      	ldr	r3, [r7, #8]
 8005722:	4013      	ands	r3, r2
 8005724:	68ba      	ldr	r2, [r7, #8]
 8005726:	429a      	cmp	r2, r3
 8005728:	bf0c      	ite	eq
 800572a:	2301      	moveq	r3, #1
 800572c:	2300      	movne	r3, #0
 800572e:	b2db      	uxtb	r3, r3
 8005730:	461a      	mov	r2, r3
 8005732:	79fb      	ldrb	r3, [r7, #7]
 8005734:	429a      	cmp	r2, r3
 8005736:	d0a0      	beq.n	800567a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005738:	2300      	movs	r3, #0
}
 800573a:	4618      	mov	r0, r3
 800573c:	3710      	adds	r7, #16
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005742:	b480      	push	{r7}
 8005744:	b095      	sub	sp, #84	@ 0x54
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005750:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005752:	e853 3f00 	ldrex	r3, [r3]
 8005756:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005758:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800575a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800575e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005768:	643b      	str	r3, [r7, #64]	@ 0x40
 800576a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800576c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800576e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005770:	e841 2300 	strex	r3, r2, [r1]
 8005774:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005778:	2b00      	cmp	r3, #0
 800577a:	d1e6      	bne.n	800574a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	3308      	adds	r3, #8
 8005782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005784:	6a3b      	ldr	r3, [r7, #32]
 8005786:	e853 3f00 	ldrex	r3, [r3]
 800578a:	61fb      	str	r3, [r7, #28]
   return(result);
 800578c:	69fb      	ldr	r3, [r7, #28]
 800578e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005792:	f023 0301 	bic.w	r3, r3, #1
 8005796:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	3308      	adds	r3, #8
 800579e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80057a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80057a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80057a8:	e841 2300 	strex	r3, r2, [r1]
 80057ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80057ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d1e3      	bne.n	800577c <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80057b8:	2b01      	cmp	r3, #1
 80057ba:	d118      	bne.n	80057ee <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	f023 0310 	bic.w	r3, r3, #16
 80057d0:	647b      	str	r3, [r7, #68]	@ 0x44
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	461a      	mov	r2, r3
 80057d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80057da:	61bb      	str	r3, [r7, #24]
 80057dc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6979      	ldr	r1, [r7, #20]
 80057e0:	69ba      	ldr	r2, [r7, #24]
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	613b      	str	r3, [r7, #16]
   return(result);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e6      	bne.n	80057bc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	2220      	movs	r2, #32
 80057f2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	2200      	movs	r2, #0
 80057fa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	2200      	movs	r2, #0
 8005800:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8005802:	bf00      	nop
 8005804:	3754      	adds	r7, #84	@ 0x54
 8005806:	46bd      	mov	sp, r7
 8005808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580c:	4770      	bx	lr

0800580e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800580e:	b580      	push	{r7, lr}
 8005810:	b084      	sub	sp, #16
 8005812:	af00      	add	r7, sp, #0
 8005814:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800581a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	2200      	movs	r2, #0
 8005820:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	2200      	movs	r2, #0
 8005828:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800582c:	68f8      	ldr	r0, [r7, #12]
 800582e:	f7ff fabd 	bl	8004dac <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005832:	bf00      	nop
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800583a:	b580      	push	{r7, lr}
 800583c:	b088      	sub	sp, #32
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	e853 3f00 	ldrex	r3, [r3]
 800584e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005850:	68bb      	ldr	r3, [r7, #8]
 8005852:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005856:	61fb      	str	r3, [r7, #28]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	461a      	mov	r2, r3
 800585e:	69fb      	ldr	r3, [r7, #28]
 8005860:	61bb      	str	r3, [r7, #24]
 8005862:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005864:	6979      	ldr	r1, [r7, #20]
 8005866:	69ba      	ldr	r2, [r7, #24]
 8005868:	e841 2300 	strex	r3, r2, [r1]
 800586c:	613b      	str	r3, [r7, #16]
   return(result);
 800586e:	693b      	ldr	r3, [r7, #16]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d1e6      	bne.n	8005842 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2220      	movs	r2, #32
 8005878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	2200      	movs	r2, #0
 8005880:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f7ff fa88 	bl	8004d98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005888:	bf00      	nop
 800588a:	3720      	adds	r7, #32
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8005890:	b480      	push	{r7}
 8005892:	b083      	sub	sp, #12
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr

080058a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80058ac:	bf00      	nop
 80058ae:	370c      	adds	r7, #12
 80058b0:	46bd      	mov	sp, r7
 80058b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b6:	4770      	bx	lr

080058b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b083      	sub	sp, #12
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80058c0:	bf00      	nop
 80058c2:	370c      	adds	r7, #12
 80058c4:	46bd      	mov	sp, r7
 80058c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ca:	4770      	bx	lr

080058cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80058cc:	b480      	push	{r7}
 80058ce:	b085      	sub	sp, #20
 80058d0:	af00      	add	r7, sp, #0
 80058d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80058da:	2b01      	cmp	r3, #1
 80058dc:	d101      	bne.n	80058e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80058de:	2302      	movs	r3, #2
 80058e0:	e027      	b.n	8005932 <HAL_UARTEx_DisableFifoMode+0x66>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2224      	movs	r2, #36	@ 0x24
 80058ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	681a      	ldr	r2, [r3, #0]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f022 0201 	bic.w	r2, r2, #1
 8005908:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8005910:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3714      	adds	r7, #20
 8005936:	46bd      	mov	sp, r7
 8005938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593c:	4770      	bx	lr

0800593e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800593e:	b580      	push	{r7, lr}
 8005940:	b084      	sub	sp, #16
 8005942:	af00      	add	r7, sp, #0
 8005944:	6078      	str	r0, [r7, #4]
 8005946:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800594e:	2b01      	cmp	r3, #1
 8005950:	d101      	bne.n	8005956 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005952:	2302      	movs	r3, #2
 8005954:	e02d      	b.n	80059b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2201      	movs	r2, #1
 800595a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2224      	movs	r2, #36	@ 0x24
 8005962:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	681b      	ldr	r3, [r3, #0]
 8005972:	681a      	ldr	r2, [r3, #0]
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f022 0201 	bic.w	r2, r2, #1
 800597c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	683a      	ldr	r2, [r7, #0]
 800598e:	430a      	orrs	r2, r1
 8005990:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f000 f850 	bl	8005a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2220      	movs	r2, #32
 80059a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2200      	movs	r2, #0
 80059ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]
 80059c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80059ca:	2b01      	cmp	r3, #1
 80059cc:	d101      	bne.n	80059d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80059ce:	2302      	movs	r3, #2
 80059d0:	e02d      	b.n	8005a2e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2201      	movs	r2, #1
 80059d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2224      	movs	r2, #36	@ 0x24
 80059de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	681a      	ldr	r2, [r3, #0]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f022 0201 	bic.w	r2, r2, #1
 80059f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	683a      	ldr	r2, [r7, #0]
 8005a0a:	430a      	orrs	r2, r1
 8005a0c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f812 	bl	8005a38 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	68fa      	ldr	r2, [r7, #12]
 8005a1a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2220      	movs	r2, #32
 8005a20:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3710      	adds	r7, #16
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b085      	sub	sp, #20
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d108      	bne.n	8005a5a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2201      	movs	r2, #1
 8005a54:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005a58:	e031      	b.n	8005abe <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005a5a:	2308      	movs	r3, #8
 8005a5c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005a5e:	2308      	movs	r3, #8
 8005a60:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	689b      	ldr	r3, [r3, #8]
 8005a68:	0e5b      	lsrs	r3, r3, #25
 8005a6a:	b2db      	uxtb	r3, r3
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	689b      	ldr	r3, [r3, #8]
 8005a78:	0f5b      	lsrs	r3, r3, #29
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	f003 0307 	and.w	r3, r3, #7
 8005a80:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a82:	7bbb      	ldrb	r3, [r7, #14]
 8005a84:	7b3a      	ldrb	r2, [r7, #12]
 8005a86:	4911      	ldr	r1, [pc, #68]	@ (8005acc <UARTEx_SetNbDataToProcess+0x94>)
 8005a88:	5c8a      	ldrb	r2, [r1, r2]
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005a8e:	7b3a      	ldrb	r2, [r7, #12]
 8005a90:	490f      	ldr	r1, [pc, #60]	@ (8005ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8005a92:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005a94:	fb93 f3f2 	sdiv	r3, r3, r2
 8005a98:	b29a      	uxth	r2, r3
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005aa0:	7bfb      	ldrb	r3, [r7, #15]
 8005aa2:	7b7a      	ldrb	r2, [r7, #13]
 8005aa4:	4909      	ldr	r1, [pc, #36]	@ (8005acc <UARTEx_SetNbDataToProcess+0x94>)
 8005aa6:	5c8a      	ldrb	r2, [r1, r2]
 8005aa8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005aac:	7b7a      	ldrb	r2, [r7, #13]
 8005aae:	4908      	ldr	r1, [pc, #32]	@ (8005ad0 <UARTEx_SetNbDataToProcess+0x98>)
 8005ab0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005ab2:	fb93 f3f2 	sdiv	r3, r3, r2
 8005ab6:	b29a      	uxth	r2, r3
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8005abe:	bf00      	nop
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	080173c8 	.word	0x080173c8
 8005ad0:	080173d0 	.word	0x080173d0

08005ad4 <_fminf>:
 8005ad4:	f000 bdb6 	b.w	8006644 <fminf>

08005ad8 <neai_classification_init>:
 8005ad8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005adc:	4a8c      	ldr	r2, [pc, #560]	@ (8005d10 <neai_classification_init+0x238>)
 8005ade:	4b8d      	ldr	r3, [pc, #564]	@ (8005d14 <neai_classification_init+0x23c>)
 8005ae0:	f8df 9278 	ldr.w	r9, [pc, #632]	@ 8005d5c <neai_classification_init+0x284>
 8005ae4:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8005ae8:	ed2d 8b02 	vpush	{d8}
 8005aec:	4606      	mov	r6, r0
 8005aee:	8011      	strh	r1, [r2, #0]
 8005af0:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005af4:	801a      	strh	r2, [r3, #0]
 8005af6:	ecf6 7a01 	vldmia	r6!, {s15}
 8005afa:	4b87      	ldr	r3, [pc, #540]	@ (8005d18 <neai_classification_init+0x240>)
 8005afc:	f04f 72f4 	mov.w	r2, #31981568	@ 0x1e80000
 8005b00:	601a      	str	r2, [r3, #0]
 8005b02:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b06:	4b85      	ldr	r3, [pc, #532]	@ (8005d1c <neai_classification_init+0x244>)
 8005b08:	f44f 0274 	mov.w	r2, #15990784	@ 0xf40000
 8005b0c:	4686      	mov	lr, r0
 8005b0e:	601a      	str	r2, [r3, #0]
 8005b10:	ee17 0a90 	vmov	r0, s15
 8005b14:	4b82      	ldr	r3, [pc, #520]	@ (8005d20 <neai_classification_init+0x248>)
 8005b16:	4a83      	ldr	r2, [pc, #524]	@ (8005d24 <neai_classification_init+0x24c>)
 8005b18:	edc3 7a00 	vstr	s15, [r3]
 8005b1c:	eb00 0180 	add.w	r1, r0, r0, lsl #2
 8005b20:	4b81      	ldr	r3, [pc, #516]	@ (8005d28 <neai_classification_init+0x250>)
 8005b22:	ea4f 08c1 	mov.w	r8, r1, lsl #3
 8005b26:	eb0e 0181 	add.w	r1, lr, r1, lsl #2
 8005b2a:	601e      	str	r6, [r3, #0]
 8005b2c:	1d0f      	adds	r7, r1, #4
 8005b2e:	eb0e 0308 	add.w	r3, lr, r8
 8005b32:	6017      	str	r7, [r2, #0]
 8005b34:	4a7d      	ldr	r2, [pc, #500]	@ (8005d2c <neai_classification_init+0x254>)
 8005b36:	6859      	ldr	r1, [r3, #4]
 8005b38:	6011      	str	r1, [r2, #0]
 8005b3a:	f108 0408 	add.w	r4, r8, #8
 8005b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8005d30 <neai_classification_init+0x258>)
 8005b40:	2300      	movs	r3, #0
 8005b42:	4474      	add	r4, lr
 8005b44:	6014      	str	r4, [r2, #0]
 8005b46:	ea4f 0c80 	mov.w	ip, r0, lsl #2
 8005b4a:	eb06 0680 	add.w	r6, r6, r0, lsl #2
 8005b4e:	f8c9 3000 	str.w	r3, [r9]
 8005b52:	4645      	mov	r5, r8
 8005b54:	2205      	movs	r2, #5
 8005b56:	4619      	mov	r1, r3
 8005b58:	b158      	cbz	r0, 8005b72 <neai_classification_init+0x9a>
 8005b5a:	eba6 030c 	sub.w	r3, r6, ip
 8005b5e:	ecf3 7a01 	vldmia	r3!, {s15}
 8005b62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005b66:	429e      	cmp	r6, r3
 8005b68:	ee17 aa90 	vmov	sl, s15
 8005b6c:	4451      	add	r1, sl
 8005b6e:	d1f6      	bne.n	8005b5e <neai_classification_init+0x86>
 8005b70:	2301      	movs	r3, #1
 8005b72:	3a01      	subs	r2, #1
 8005b74:	4466      	add	r6, ip
 8005b76:	d1ef      	bne.n	8005b58 <neai_classification_init+0x80>
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	f000 80c4 	beq.w	8005d06 <neai_classification_init+0x22e>
 8005b7e:	eb01 0541 	add.w	r5, r1, r1, lsl #1
 8005b82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8005b86:	f105 0408 	add.w	r4, r5, #8
 8005b8a:	f8c9 1000 	str.w	r1, [r9]
 8005b8e:	4474      	add	r4, lr
 8005b90:	f101 0801 	add.w	r8, r1, #1
 8005b94:	1c8b      	adds	r3, r1, #2
 8005b96:	eb0c 0600 	add.w	r6, ip, r0
 8005b9a:	eb03 0346 	add.w	r3, r3, r6, lsl #1
 8005b9e:	eb07 010c 	add.w	r1, r7, ip
 8005ba2:	4f64      	ldr	r7, [pc, #400]	@ (8005d34 <neai_classification_init+0x25c>)
 8005ba4:	eb0e 0383 	add.w	r3, lr, r3, lsl #2
 8005ba8:	603b      	str	r3, [r7, #0]
 8005baa:	4446      	add	r6, r8
 8005bac:	4b62      	ldr	r3, [pc, #392]	@ (8005d38 <neai_classification_init+0x260>)
 8005bae:	4f63      	ldr	r7, [pc, #396]	@ (8005d3c <neai_classification_init+0x264>)
 8005bb0:	eb0e 06c6 	add.w	r6, lr, r6, lsl #3
 8005bb4:	601e      	str	r6, [r3, #0]
 8005bb6:	4b62      	ldr	r3, [pc, #392]	@ (8005d40 <neai_classification_init+0x268>)
 8005bb8:	601c      	str	r4, [r3, #0]
 8005bba:	2300      	movs	r3, #0
 8005bbc:	603b      	str	r3, [r7, #0]
 8005bbe:	2605      	movs	r6, #5
 8005bc0:	b158      	cbz	r0, 8005bda <neai_classification_init+0x102>
 8005bc2:	eba1 030c 	sub.w	r3, r1, ip
 8005bc6:	ecf3 7a01 	vldmia	r3!, {s15}
 8005bca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005bce:	428b      	cmp	r3, r1
 8005bd0:	ee17 8a90 	vmov	r8, s15
 8005bd4:	4442      	add	r2, r8
 8005bd6:	d1f6      	bne.n	8005bc6 <neai_classification_init+0xee>
 8005bd8:	2301      	movs	r3, #1
 8005bda:	3e01      	subs	r6, #1
 8005bdc:	4461      	add	r1, ip
 8005bde:	d1ef      	bne.n	8005bc0 <neai_classification_init+0xe8>
 8005be0:	b133      	cbz	r3, 8005bf0 <neai_classification_init+0x118>
 8005be2:	f105 0308 	add.w	r3, r5, #8
 8005be6:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8005bea:	603a      	str	r2, [r7, #0]
 8005bec:	eb0e 0403 	add.w	r4, lr, r3
 8005bf0:	ed94 7a00 	vldr	s14, [r4]
 8005bf4:	eef1 7a08 	vmov.f32	s15, #24	@ 0x40c00000  6.0
 8005bf8:	eeb4 7a67 	vcmp.f32	s14, s15
 8005bfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c00:	d169      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c02:	ed94 7a01 	vldr	s14, [r4, #4]
 8005c06:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8005c0a:	eeb4 7a67 	vcmp.f32	s14, s15
 8005c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c12:	d160      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c14:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 8005d44 <neai_classification_init+0x26c>
 8005c18:	ed94 7a02 	vldr	s14, [r4, #8]
 8005c1c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c24:	d157      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c26:	ed94 7a03 	vldr	s14, [r4, #12]
 8005c2a:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005c2e:	eeb4 7a67 	vcmp.f32	s14, s15
 8005c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c36:	d14e      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c38:	ed94 7a04 	vldr	s14, [r4, #16]
 8005c3c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005c40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c44:	d147      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c46:	edd4 6a05 	vldr	s13, [r4, #20]
 8005c4a:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8005c4e:	eef4 6a47 	vcmp.f32	s13, s14
 8005c52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c56:	d13e      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c58:	ed94 7a06 	vldr	s14, [r4, #24]
 8005c5c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c64:	d137      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c66:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8005d48 <neai_classification_init+0x270>
 8005c6a:	edd4 6a07 	vldr	s13, [r4, #28]
 8005c6e:	eef4 6a47 	vcmp.f32	s13, s14
 8005c72:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c76:	d12e      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c78:	ed94 7a08 	vldr	s14, [r4, #32]
 8005c7c:	eeb4 7a67 	vcmp.f32	s14, s15
 8005c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c84:	d127      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c86:	edd4 7a09 	vldr	s15, [r4, #36]	@ 0x24
 8005c8a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c92:	d120      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005c94:	edd4 7a0a 	vldr	s15, [r4, #40]	@ 0x28
 8005c98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005c9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ca0:	d119      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005ca2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8005ca6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cae:	d112      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005cb0:	edd4 7a0c 	vldr	s15, [r4, #48]	@ 0x30
 8005cb4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005cb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cbc:	d10b      	bne.n	8005cd6 <neai_classification_init+0x1fe>
 8005cbe:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8005d4c <neai_classification_init+0x274>
 8005cc2:	ed94 7a0d 	vldr	s14, [r4, #52]	@ 0x34
 8005cc6:	eeb4 7a67 	vcmp.f32	s14, s15
 8005cca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cce:	bf14      	ite	ne
 8005cd0:	237d      	movne	r3, #125	@ 0x7d
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	e000      	b.n	8005cd8 <neai_classification_init+0x200>
 8005cd6:	237d      	movs	r3, #125	@ 0x7d
 8005cd8:	ed9f 8a1d 	vldr	s16, [pc, #116]	@ 8005d50 <neai_classification_init+0x278>
 8005cdc:	4c1d      	ldr	r4, [pc, #116]	@ (8005d54 <neai_classification_init+0x27c>)
 8005cde:	eddf 0a1e 	vldr	s1, [pc, #120]	@ 8005d58 <neai_classification_init+0x280>
 8005ce2:	7023      	strb	r3, [r4, #0]
 8005ce4:	eeb0 0a48 	vmov.f32	s0, s16
 8005ce8:	f7ff fef4 	bl	8005ad4 <_fminf>
 8005cec:	eeb4 0a48 	vcmp.f32	s0, s16
 8005cf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005cf4:	bf1c      	itt	ne
 8005cf6:	2081      	movne	r0, #129	@ 0x81
 8005cf8:	7020      	strbne	r0, [r4, #0]
 8005cfa:	ecbd 8b02 	vpop	{d8}
 8005cfe:	bf08      	it	eq
 8005d00:	7820      	ldrbeq	r0, [r4, #0]
 8005d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d06:	2302      	movs	r3, #2
 8005d08:	f04f 0801 	mov.w	r8, #1
 8005d0c:	e743      	b.n	8005b96 <neai_classification_init+0xbe>
 8005d0e:	bf00      	nop
 8005d10:	200030ce 	.word	0x200030ce
 8005d14:	200030cc 	.word	0x200030cc
 8005d18:	200030d4 	.word	0x200030d4
 8005d1c:	200030d0 	.word	0x200030d0
 8005d20:	200030c8 	.word	0x200030c8
 8005d24:	200030b4 	.word	0x200030b4
 8005d28:	200030b8 	.word	0x200030b8
 8005d2c:	200030bc 	.word	0x200030bc
 8005d30:	200030b0 	.word	0x200030b0
 8005d34:	200030ac 	.word	0x200030ac
 8005d38:	200030a8 	.word	0x200030a8
 8005d3c:	200030c0 	.word	0x200030c0
 8005d40:	200030a4 	.word	0x200030a4
 8005d44:	447a0000 	.word	0x447a0000
 8005d48:	42960000 	.word	0x42960000
 8005d4c:	49742400 	.word	0x49742400
 8005d50:	3f8ccccd 	.word	0x3f8ccccd
 8005d54:	20000009 	.word	0x20000009
 8005d58:	40066666 	.word	0x40066666
 8005d5c:	200030c4 	.word	0x200030c4

08005d60 <neai_classification>:
 8005d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d64:	ed2d 8b08 	vpush	{d8-d11}
 8005d68:	4bce      	ldr	r3, [pc, #824]	@ (80060a4 <neai_classification+0x344>)
 8005d6a:	b08f      	sub	sp, #60	@ 0x3c
 8005d6c:	f893 9000 	ldrb.w	r9, [r3]
 8005d70:	9208      	str	r2, [sp, #32]
 8005d72:	e9cd 0103 	strd	r0, r1, [sp, #12]
 8005d76:	f1b9 0f00 	cmp.w	r9, #0
 8005d7a:	d003      	beq.n	8005d84 <neai_classification+0x24>
 8005d7c:	f1b9 0f81 	cmp.w	r9, #129	@ 0x81
 8005d80:	f040 835e 	bne.w	8006440 <neai_classification+0x6e0>
 8005d84:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8005d88:	48c7      	ldr	r0, [pc, #796]	@ (80060a8 <neai_classification+0x348>)
 8005d8a:	f8df b34c 	ldr.w	fp, [pc, #844]	@ 80060d8 <neai_classification+0x378>
 8005d8e:	ed9f aac7 	vldr	s20, [pc, #796]	@ 80060ac <neai_classification+0x34c>
 8005d92:	f8df a328 	ldr.w	sl, [pc, #808]	@ 80060bc <neai_classification+0x35c>
 8005d96:	2100      	movs	r1, #0
 8005d98:	f000 fbb6 	bl	8006508 <memset>
 8005d9c:	4bc4      	ldr	r3, [pc, #784]	@ (80060b0 <neai_classification+0x350>)
 8005d9e:	4ac5      	ldr	r2, [pc, #788]	@ (80060b4 <neai_classification+0x354>)
 8005da0:	f8b3 8000 	ldrh.w	r8, [r3]
 8005da4:	4bc4      	ldr	r3, [pc, #784]	@ (80060b8 <neai_classification+0x358>)
 8005da6:	9301      	str	r3, [sp, #4]
 8005da8:	ea4f 0358 	mov.w	r3, r8, lsr #1
 8005dac:	eef0 9a00 	vmov.f32	s19, #0	@ 0x40000000  2.0
 8005db0:	eb0b 0788 	add.w	r7, fp, r8, lsl #2
 8005db4:	9302      	str	r3, [sp, #8]
 8005db6:	4646      	mov	r6, r8
 8005db8:	f8cd 9014 	str.w	r9, [sp, #20]
 8005dbc:	4630      	mov	r0, r6
 8005dbe:	2e00      	cmp	r6, #0
 8005dc0:	f000 8362 	beq.w	8006488 <neai_classification+0x728>
 8005dc4:	2000      	movs	r0, #0
 8005dc6:	8813      	ldrh	r3, [r2, #0]
 8005dc8:	4dbc      	ldr	r5, [pc, #752]	@ (80060bc <neai_classification+0x35c>)
 8005dca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005dce:	181c      	adds	r4, r3, r0
 8005dd0:	9b03      	ldr	r3, [sp, #12]
 8005dd2:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005dd6:	465b      	mov	r3, fp
 8005dd8:	f854 1b0c 	ldr.w	r1, [r4], #12
 8005ddc:	f843 1b04 	str.w	r1, [r3], #4
 8005de0:	429f      	cmp	r7, r3
 8005de2:	eca5 aa01 	vstmia	r5!, {s20}
 8005de6:	d1f7      	bne.n	8005dd8 <neai_classification+0x78>
 8005de8:	2e01      	cmp	r6, #1
 8005dea:	eddb 7a00 	vldr	s15, [fp]
 8005dee:	d906      	bls.n	8005dfe <neai_classification+0x9e>
 8005df0:	4bb3      	ldr	r3, [pc, #716]	@ (80060c0 <neai_classification+0x360>)
 8005df2:	ecb3 7a01 	vldmia	r3!, {s14}
 8005df6:	429f      	cmp	r7, r3
 8005df8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005dfc:	d1f9      	bne.n	8005df2 <neai_classification+0x92>
 8005dfe:	ee07 6a10 	vmov	s14, r6
 8005e02:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 8005e06:	46b0      	mov	r8, r6
 8005e08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005e0c:	465b      	mov	r3, fp
 8005e0e:	edd3 7a00 	vldr	s15, [r3]
 8005e12:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005e16:	ece3 7a01 	vstmia	r3!, {s15}
 8005e1a:	429f      	cmp	r7, r3
 8005e1c:	d1f7      	bne.n	8005e0e <neai_classification+0xae>
 8005e1e:	07f1      	lsls	r1, r6, #31
 8005e20:	eec9 8aa6 	vdiv.f32	s17, s19, s13
 8005e24:	f100 833e 	bmi.w	80064a4 <neai_classification+0x744>
 8005e28:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005e2c:	2400      	movs	r4, #0
 8005e2e:	3401      	adds	r4, #1
 8005e30:	b2a4      	uxth	r4, r4
 8005e32:	fa48 f304 	asr.w	r3, r8, r4
 8005e36:	07db      	lsls	r3, r3, #31
 8005e38:	d5f9      	bpl.n	8005e2e <neai_classification+0xce>
 8005e3a:	f1b8 0f01 	cmp.w	r8, #1
 8005e3e:	dd23      	ble.n	8005e88 <neai_classification+0x128>
 8005e40:	f04f 0c00 	mov.w	ip, #0
 8005e44:	f108 38ff 	add.w	r8, r8, #4294967295
 8005e48:	46de      	mov	lr, fp
 8005e4a:	4663      	mov	r3, ip
 8005e4c:	fa1f f18c 	uxth.w	r1, ip
 8005e50:	428b      	cmp	r3, r1
 8005e52:	d908      	bls.n	8005e66 <neai_classification+0x106>
 8005e54:	eb0b 0183 	add.w	r1, fp, r3, lsl #2
 8005e58:	edd1 7a00 	vldr	s15, [r1]
 8005e5c:	f8de 5000 	ldr.w	r5, [lr]
 8005e60:	edce 7a00 	vstr	s15, [lr]
 8005e64:	600d      	str	r5, [r1, #0]
 8005e66:	454b      	cmp	r3, r9
 8005e68:	4649      	mov	r1, r9
 8005e6a:	d305      	bcc.n	8005e78 <neai_classification+0x118>
 8005e6c:	1a5b      	subs	r3, r3, r1
 8005e6e:	b29b      	uxth	r3, r3
 8005e70:	f3c1 014f 	ubfx	r1, r1, #1, #16
 8005e74:	428b      	cmp	r3, r1
 8005e76:	d2f9      	bcs.n	8005e6c <neai_classification+0x10c>
 8005e78:	f10c 0c01 	add.w	ip, ip, #1
 8005e7c:	4419      	add	r1, r3
 8005e7e:	45c4      	cmp	ip, r8
 8005e80:	b28b      	uxth	r3, r1
 8005e82:	f10e 0e04 	add.w	lr, lr, #4
 8005e86:	dbe1      	blt.n	8005e4c <neai_classification+0xec>
 8005e88:	2c00      	cmp	r4, #0
 8005e8a:	f000 808b 	beq.w	8005fa4 <neai_classification+0x244>
 8005e8e:	e9cd 2006 	strd	r2, r0, [sp, #24]
 8005e92:	eeb0 9a4a 	vmov.f32	s18, s20
 8005e96:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8005e9a:	eef7 aa00 	vmov.f32	s21, #112	@ 0x3f800000  1.0
 8005e9e:	f04f 0800 	mov.w	r8, #0
 8005ea2:	2501      	movs	r5, #1
 8005ea4:	eeb0 ba68 	vmov.f32	s22, s17
 8005ea8:	4628      	mov	r0, r5
 8005eaa:	006d      	lsls	r5, r5, #1
 8005eac:	b2ad      	uxth	r5, r5
 8005eae:	2800      	cmp	r0, #0
 8005eb0:	d054      	beq.n	8005f5c <neai_classification+0x1fc>
 8005eb2:	2e00      	cmp	r6, #0
 8005eb4:	d052      	beq.n	8005f5c <neai_classification+0x1fc>
 8005eb6:	2100      	movs	r1, #0
 8005eb8:	42b0      	cmp	r0, r6
 8005eba:	4684      	mov	ip, r0
 8005ebc:	eef0 6a4a 	vmov.f32	s13, s20
 8005ec0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8005ec4:	bf28      	it	cs
 8005ec6:	46b4      	movcs	ip, r6
 8005ec8:	460b      	mov	r3, r1
 8005eca:	9100      	str	r1, [sp, #0]
 8005ecc:	18c2      	adds	r2, r0, r3
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	eb0b 0e82 	add.w	lr, fp, r2, lsl #2
 8005ed4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8005ed8:	ed92 7a00 	vldr	s14, [r2]
 8005edc:	edde 5a00 	vldr	s11, [lr]
 8005ee0:	ee27 5a26 	vmul.f32	s10, s14, s13
 8005ee4:	ee25 6aa7 	vmul.f32	s12, s11, s15
 8005ee8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8005eec:	ee65 5aa6 	vmul.f32	s11, s11, s13
 8005ef0:	4611      	mov	r1, r2
 8005ef2:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
 8005ef6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8005efa:	ee36 6a45 	vsub.f32	s12, s12, s10
 8005efe:	edd2 5a00 	vldr	s11, [r2]
 8005f02:	ee75 5ac6 	vsub.f32	s11, s11, s12
 8005f06:	edce 5a00 	vstr	s11, [lr]
 8005f0a:	edd2 5a00 	vldr	s11, [r2]
 8005f0e:	ee35 6a86 	vadd.f32	s12, s11, s12
 8005f12:	ed82 6a00 	vstr	s12, [r2]
 8005f16:	eb0a 0283 	add.w	r2, sl, r3, lsl #2
 8005f1a:	ed92 6a00 	vldr	s12, [r2]
 8005f1e:	ee36 6a47 	vsub.f32	s12, s12, s14
 8005f22:	442b      	add	r3, r5
 8005f24:	ed81 6a00 	vstr	s12, [r1]
 8005f28:	ed92 6a00 	vldr	s12, [r2]
 8005f2c:	b29b      	uxth	r3, r3
 8005f2e:	ee36 7a07 	vadd.f32	s14, s12, s14
 8005f32:	42b3      	cmp	r3, r6
 8005f34:	ed82 7a00 	vstr	s14, [r2]
 8005f38:	d3c8      	bcc.n	8005ecc <neai_classification+0x16c>
 8005f3a:	9900      	ldr	r1, [sp, #0]
 8005f3c:	3101      	adds	r1, #1
 8005f3e:	ee66 5a89 	vmul.f32	s11, s13, s18
 8005f42:	ee27 6a89 	vmul.f32	s12, s15, s18
 8005f46:	ee27 7a88 	vmul.f32	s14, s15, s16
 8005f4a:	ee66 6a88 	vmul.f32	s13, s13, s16
 8005f4e:	b28b      	uxth	r3, r1
 8005f50:	4563      	cmp	r3, ip
 8005f52:	ee77 7a65 	vsub.f32	s15, s14, s11
 8005f56:	ee76 6a26 	vadd.f32	s13, s12, s13
 8005f5a:	d3b6      	bcc.n	8005eca <neai_classification+0x16a>
 8005f5c:	ee3a 0ac8 	vsub.f32	s0, s21, s16
 8005f60:	eef6 8a00 	vmov.f32	s17, #96	@ 0x3f000000  0.5
 8005f64:	ee20 0a28 	vmul.f32	s0, s0, s17
 8005f68:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005f6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f70:	f100 82b8 	bmi.w	80064e4 <neai_classification+0x784>
 8005f74:	eeb1 9ac0 	vsqrt.f32	s18, s0
 8005f78:	ee38 8a2a 	vadd.f32	s16, s16, s21
 8005f7c:	eeb1 9a49 	vneg.f32	s18, s18
 8005f80:	ee28 0a28 	vmul.f32	s0, s16, s17
 8005f84:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8005f88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005f8c:	f100 82b3 	bmi.w	80064f6 <neai_classification+0x796>
 8005f90:	eeb1 8ac0 	vsqrt.f32	s16, s0
 8005f94:	f108 0801 	add.w	r8, r8, #1
 8005f98:	4544      	cmp	r4, r8
 8005f9a:	d185      	bne.n	8005ea8 <neai_classification+0x148>
 8005f9c:	e9dd 2006 	ldrd	r2, r0, [sp, #24]
 8005fa0:	eef0 8a4b 	vmov.f32	s17, s22
 8005fa4:	2e00      	cmp	r6, #0
 8005fa6:	f000 826b 	beq.w	8006480 <neai_classification+0x720>
 8005faa:	4c44      	ldr	r4, [pc, #272]	@ (80060bc <neai_classification+0x35c>)
 8005fac:	465b      	mov	r3, fp
 8005fae:	4625      	mov	r5, r4
 8005fb0:	ed93 7a00 	vldr	s14, [r3]
 8005fb4:	edd5 7a00 	vldr	s15, [r5]
 8005fb8:	ee27 7a28 	vmul.f32	s14, s14, s17
 8005fbc:	ee67 7aa8 	vmul.f32	s15, s15, s17
 8005fc0:	eca3 7a01 	vstmia	r3!, {s14}
 8005fc4:	429f      	cmp	r7, r3
 8005fc6:	ece5 7a01 	vstmia	r5!, {s15}
 8005fca:	d1f1      	bne.n	8005fb0 <neai_classification+0x250>
 8005fcc:	f1b9 0f00 	cmp.w	r9, #0
 8005fd0:	d02d      	beq.n	800602e <neai_classification+0x2ce>
 8005fd2:	493b      	ldr	r1, [pc, #236]	@ (80060c0 <neai_classification+0x360>)
 8005fd4:	4b39      	ldr	r3, [pc, #228]	@ (80060bc <neai_classification+0x35c>)
 8005fd6:	eb04 0589 	add.w	r5, r4, r9, lsl #2
 8005fda:	ed93 7a01 	vldr	s14, [r3, #4]
 8005fde:	ecf1 7a01 	vldmia	r1!, {s15}
 8005fe2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8005fe6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8005fea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005fee:	ece3 7a01 	vstmia	r3!, {s15}
 8005ff2:	429d      	cmp	r5, r3
 8005ff4:	d1f1      	bne.n	8005fda <neai_classification+0x27a>
 8005ff6:	4b31      	ldr	r3, [pc, #196]	@ (80060bc <neai_classification+0x35c>)
 8005ff8:	ecf3 7a01 	vldmia	r3!, {s15}
 8005ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006004:	f280 8246 	bge.w	8006494 <neai_classification+0x734>
 8006008:	429d      	cmp	r5, r3
 800600a:	ed03 aa01 	vstr	s20, [r3, #-4]
 800600e:	d1f3      	bne.n	8005ff8 <neai_classification+0x298>
 8006010:	9b01      	ldr	r3, [sp, #4]
 8006012:	4925      	ldr	r1, [pc, #148]	@ (80060a8 <neai_classification+0x348>)
 8006014:	881b      	ldrh	r3, [r3, #0]
 8006016:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800601a:	edd3 7a00 	vldr	s15, [r3]
 800601e:	ecb4 7a01 	vldmia	r4!, {s14}
 8006022:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006026:	42a5      	cmp	r5, r4
 8006028:	ece3 7a01 	vstmia	r3!, {s15}
 800602c:	d1f5      	bne.n	800601a <neai_classification+0x2ba>
 800602e:	3001      	adds	r0, #1
 8006030:	2803      	cmp	r0, #3
 8006032:	f47f aec8 	bne.w	8005dc6 <neai_classification+0x66>
 8006036:	9b01      	ldr	r3, [sp, #4]
 8006038:	3302      	adds	r3, #2
 800603a:	9301      	str	r3, [sp, #4]
 800603c:	4b21      	ldr	r3, [pc, #132]	@ (80060c4 <neai_classification+0x364>)
 800603e:	3202      	adds	r2, #2
 8006040:	4293      	cmp	r3, r2
 8006042:	f47f aebb 	bne.w	8005dbc <neai_classification+0x5c>
 8006046:	4b20      	ldr	r3, [pc, #128]	@ (80060c8 <neai_classification+0x368>)
 8006048:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800604c:	8819      	ldrh	r1, [r3, #0]
 800604e:	2900      	cmp	r1, #0
 8006050:	f000 8246 	beq.w	80064e0 <neai_classification+0x780>
 8006054:	4814      	ldr	r0, [pc, #80]	@ (80060a8 <neai_classification+0x348>)
 8006056:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 80060cc <neai_classification+0x36c>
 800605a:	4603      	mov	r3, r0
 800605c:	2200      	movs	r2, #0
 800605e:	ecf3 7a01 	vldmia	r3!, {s15}
 8006062:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006066:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606a:	da07      	bge.n	800607c <neai_classification+0x31c>
 800606c:	ee07 2a90 	vmov	s15, r2
 8006070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006074:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006078:	ed43 7a01 	vstr	s15, [r3, #-4]
 800607c:	3201      	adds	r2, #1
 800607e:	428a      	cmp	r2, r1
 8006080:	d1ed      	bne.n	800605e <neai_classification+0x2fe>
 8006082:	2ac0      	cmp	r2, #192	@ 0xc0
 8006084:	ed90 4a00 	vldr	s8, [r0]
 8006088:	f240 8223 	bls.w	80064d2 <neai_classification+0x772>
 800608c:	ee07 2a90 	vmov	s15, r2
 8006090:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8006094:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 80060d0 <neai_classification+0x370>
 8006098:	4b0e      	ldr	r3, [pc, #56]	@ (80060d4 <neai_classification+0x374>)
 800609a:	ee87 3a27 	vdiv.f32	s6, s14, s15
 800609e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80060a2:	e01b      	b.n	80060dc <neai_classification+0x37c>
 80060a4:	20000009 	.word	0x20000009
 80060a8:	200030d8 	.word	0x200030d8
 80060ac:	00000000 	.word	0x00000000
 80060b0:	200030ce 	.word	0x200030ce
 80060b4:	200030d4 	.word	0x200030d4
 80060b8:	200030d0 	.word	0x200030d0
 80060bc:	200038a8 	.word	0x200038a8
 80060c0:	2000484c 	.word	0x2000484c
 80060c4:	200030d8 	.word	0x200030d8
 80060c8:	200030cc 	.word	0x200030cc
 80060cc:	3b03126f 	.word	0x3b03126f
 80060d0:	43400000 	.word	0x43400000
 80060d4:	200030dc 	.word	0x200030dc
 80060d8:	20004848 	.word	0x20004848
 80060dc:	eeb0 5a44 	vmov.f32	s10, s8
 80060e0:	ecf3 7a01 	vldmia	r3!, {s15}
 80060e4:	eef4 7a45 	vcmp.f32	s15, s10
 80060e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80060ec:	bf48      	it	mi
 80060ee:	eeb0 5a67 	vmovmi.f32	s10, s15
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d1f4      	bne.n	80060e0 <neai_classification+0x380>
 80060f6:	4cd5      	ldr	r4, [pc, #852]	@ (800644c <neai_classification+0x6ec>)
 80060f8:	ed9f 6ad5 	vldr	s12, [pc, #852]	@ 8006450 <neai_classification+0x6f0>
 80060fc:	eef7 4a00 	vmov.f32	s9, #112	@ 0x3f800000  1.0
 8006100:	2600      	movs	r6, #0
 8006102:	ee75 4a64 	vsub.f32	s9, s10, s9
 8006106:	eef6 3a00 	vmov.f32	s7, #96	@ 0x3f000000  0.5
 800610a:	4627      	mov	r7, r4
 800610c:	4632      	mov	r2, r6
 800610e:	46b4      	mov	ip, r6
 8006110:	3601      	adds	r6, #1
 8006112:	ee07 6a90 	vmov	s15, r6
 8006116:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800611a:	ece7 4a01 	vstmia	r7!, {s9}
 800611e:	ee65 5a83 	vmul.f32	s11, s11, s6
 8006122:	eef0 6a64 	vmov.f32	s13, s9
 8006126:	ee75 5ae3 	vsub.f32	s11, s11, s7
 800612a:	eef4 5ac6 	vcmpe.f32	s11, s12
 800612e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006132:	db23      	blt.n	800617c <neai_classification+0x41c>
 8006134:	2100      	movs	r1, #0
 8006136:	b28b      	uxth	r3, r1
 8006138:	ee07 3a90 	vmov	s15, r3
 800613c:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8006140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006144:	3201      	adds	r2, #1
 8006146:	b292      	uxth	r2, r2
 8006148:	ee27 7a26 	vmul.f32	s14, s14, s13
 800614c:	edd5 7a00 	vldr	s15, [r5]
 8006150:	ee06 2a90 	vmov	s13, r2
 8006154:	3301      	adds	r3, #1
 8006156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800615a:	eeb8 6a66 	vcvt.f32.u32	s12, s13
 800615e:	ee07 3a90 	vmov	s15, r3
 8006162:	eef4 5ac6 	vcmpe.f32	s11, s12
 8006166:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800616a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800616e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8006172:	f101 0101 	add.w	r1, r1, #1
 8006176:	dade      	bge.n	8006136 <neai_classification+0x3d6>
 8006178:	ed47 6a01 	vstr	s13, [r7, #-4]
 800617c:	edd4 7a00 	vldr	s15, [r4]
 8006180:	eef4 7ac5 	vcmpe.f32	s15, s10
 8006184:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006188:	bf44      	itt	mi
 800618a:	ed84 4a00 	vstrmi	s8, [r4]
 800618e:	ed57 6a01 	vldrmi	s13, [r7, #-4]
 8006192:	eef4 6ac5 	vcmpe.f32	s13, s10
 8006196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800619a:	d506      	bpl.n	80061aa <neai_classification+0x44a>
 800619c:	f1bc 0f00 	cmp.w	ip, #0
 80061a0:	d003      	beq.n	80061aa <neai_classification+0x44a>
 80061a2:	f857 3c08 	ldr.w	r3, [r7, #-8]
 80061a6:	f847 3c04 	str.w	r3, [r7, #-4]
 80061aa:	2ec0      	cmp	r6, #192	@ 0xc0
 80061ac:	d1af      	bne.n	800610e <neai_classification+0x3ae>
 80061ae:	4aa9      	ldr	r2, [pc, #676]	@ (8006454 <neai_classification+0x6f4>)
 80061b0:	edd4 7a00 	vldr	s15, [r4]
 80061b4:	1f14      	subs	r4, r2, #4
 80061b6:	4623      	mov	r3, r4
 80061b8:	f504 7140 	add.w	r1, r4, #768	@ 0x300
 80061bc:	ecb2 7a01 	vldmia	r2!, {s14}
 80061c0:	428a      	cmp	r2, r1
 80061c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061c6:	d1f9      	bne.n	80061bc <neai_classification+0x45c>
 80061c8:	eddf 6aa3 	vldr	s13, [pc, #652]	@ 8006458 <neai_classification+0x6f8>
 80061cc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80061d0:	edd3 7a00 	vldr	s15, [r3]
 80061d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061d8:	ece3 7a01 	vstmia	r3!, {s15}
 80061dc:	428b      	cmp	r3, r1
 80061de:	d1f7      	bne.n	80061d0 <neai_classification+0x470>
 80061e0:	4b9e      	ldr	r3, [pc, #632]	@ (800645c <neai_classification+0x6fc>)
 80061e2:	f8cd 9028 	str.w	r9, [sp, #40]	@ 0x28
 80061e6:	ed93 7a00 	vldr	s14, [r3]
 80061ea:	4b9d      	ldr	r3, [pc, #628]	@ (8006460 <neai_classification+0x700>)
 80061ec:	681f      	ldr	r7, [r3, #0]
 80061ee:	4b9d      	ldr	r3, [pc, #628]	@ (8006464 <neai_classification+0x704>)
 80061f0:	6818      	ldr	r0, [r3, #0]
 80061f2:	4b9d      	ldr	r3, [pc, #628]	@ (8006468 <neai_classification+0x708>)
 80061f4:	f8d3 e000 	ldr.w	lr, [r3]
 80061f8:	4b9c      	ldr	r3, [pc, #624]	@ (800646c <neai_classification+0x70c>)
 80061fa:	681d      	ldr	r5, [r3, #0]
 80061fc:	4b9c      	ldr	r3, [pc, #624]	@ (8006470 <neai_classification+0x710>)
 80061fe:	f8d3 c000 	ldr.w	ip, [r3]
 8006202:	4b9c      	ldr	r3, [pc, #624]	@ (8006474 <neai_classification+0x714>)
 8006204:	f8d3 b000 	ldr.w	fp, [r3]
 8006208:	4b9b      	ldr	r3, [pc, #620]	@ (8006478 <neai_classification+0x718>)
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	9306      	str	r3, [sp, #24]
 800620e:	9b04      	ldr	r3, [sp, #16]
 8006210:	9309      	str	r3, [sp, #36]	@ 0x24
 8006212:	00b9      	lsls	r1, r7, #2
 8006214:	2200      	movs	r2, #0
 8006216:	9107      	str	r1, [sp, #28]
 8006218:	eb00 0a87 	add.w	sl, r0, r7, lsl #2
 800621c:	f103 0114 	add.w	r1, r3, #20
 8006220:	e9cd 2201 	strd	r2, r2, [sp, #4]
 8006224:	9105      	str	r1, [sp, #20]
 8006226:	46b8      	mov	r8, r7
 8006228:	4611      	mov	r1, r2
 800622a:	4606      	mov	r6, r0
 800622c:	4652      	mov	r2, sl
 800622e:	eca3 7a01 	vstmia	r3!, {s14}
 8006232:	f1b8 0f00 	cmp.w	r8, #0
 8006236:	d078      	beq.n	800632a <neai_classification+0x5ca>
 8006238:	9806      	ldr	r0, [sp, #24]
 800623a:	960d      	str	r6, [sp, #52]	@ 0x34
 800623c:	f04f 0900 	mov.w	r9, #0
 8006240:	e9cd 810b 	strd	r8, r1, [sp, #44]	@ 0x2c
 8006244:	eb06 0781 	add.w	r7, r6, r1, lsl #2
 8006248:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800624c:	eeb0 6a47 	vmov.f32	s12, s14
 8006250:	4619      	mov	r1, r3
 8006252:	46ca      	mov	sl, r9
 8006254:	f8cd 9000 	str.w	r9, [sp]
 8006258:	4613      	mov	r3, r2
 800625a:	ecf7 6a01 	vldmia	r7!, {s13}
 800625e:	e9dd 2600 	ldrd	r2, r6, [sp]
 8006262:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 8006266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800626a:	4416      	add	r6, r2
 800626c:	dd36      	ble.n	80062dc <neai_classification+0x57c>
 800626e:	9a02      	ldr	r2, [sp, #8]
 8006270:	eddf 7a82 	vldr	s15, [pc, #520]	@ 800647c <neai_classification+0x71c>
 8006274:	9303      	str	r3, [sp, #12]
 8006276:	eb0a 0802 	add.w	r8, sl, r2
 800627a:	ee17 3a90 	vmov	r3, s15
 800627e:	eb03 0908 	add.w	r9, r3, r8
 8006282:	eb0e 0289 	add.w	r2, lr, r9, lsl #2
 8006286:	edd2 5a00 	vldr	s11, [r2]
 800628a:	ee17 2a90 	vmov	r2, s15
 800628e:	eefd 7ae5 	vcvt.s32.f32	s15, s11
 8006292:	4432      	add	r2, r6
 8006294:	ee17 3a90 	vmov	r3, s15
 8006298:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 800629c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80062a0:	edd2 7a00 	vldr	s15, [r2]
 80062a4:	edd3 5a00 	vldr	s11, [r3]
 80062a8:	eef4 5ae7 	vcmpe.f32	s11, s15
 80062ac:	ea4f 0989 	mov.w	r9, r9, lsl #2
 80062b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062b4:	eb0b 0209 	add.w	r2, fp, r9
 80062b8:	44e1      	add	r9, ip
 80062ba:	f140 80fd 	bpl.w	80064b8 <neai_classification+0x758>
 80062be:	edd2 7a00 	vldr	s15, [r2]
 80062c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062c6:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80062ca:	eef4 6ae5 	vcmpe.f32	s13, s11
 80062ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062d2:	dcd2      	bgt.n	800627a <neai_classification+0x51a>
 80062d4:	ee17 2a90 	vmov	r2, s15
 80062d8:	9b03      	ldr	r3, [sp, #12]
 80062da:	4416      	add	r6, r2
 80062dc:	eb05 0686 	add.w	r6, r5, r6, lsl #2
 80062e0:	edd6 7a00 	vldr	s15, [r6]
 80062e4:	ee36 6a27 	vadd.f32	s12, s12, s15
 80062e8:	429f      	cmp	r7, r3
 80062ea:	ed01 6a01 	vstr	s12, [r1, #-4]
 80062ee:	ed57 6a01 	vldr	s13, [r7, #-4]
 80062f2:	ecf0 7a01 	vldmia	r0!, {s15}
 80062f6:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 80062fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80062fe:	ee16 2a90 	vmov	r2, s13
 8006302:	ee17 6a90 	vmov	r6, s15
 8006306:	4492      	add	sl, r2
 8006308:	9a00      	ldr	r2, [sp, #0]
 800630a:	4432      	add	r2, r6
 800630c:	9200      	str	r2, [sp, #0]
 800630e:	d1a4      	bne.n	800625a <neai_classification+0x4fa>
 8006310:	9802      	ldr	r0, [sp, #8]
 8006312:	f8dd 802c 	ldr.w	r8, [sp, #44]	@ 0x2c
 8006316:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8006318:	4450      	add	r0, sl
 800631a:	9002      	str	r0, [sp, #8]
 800631c:	9801      	ldr	r0, [sp, #4]
 800631e:	4691      	mov	r9, r2
 8006320:	4448      	add	r0, r9
 8006322:	461a      	mov	r2, r3
 8006324:	460b      	mov	r3, r1
 8006326:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8006328:	9001      	str	r0, [sp, #4]
 800632a:	9807      	ldr	r0, [sp, #28]
 800632c:	4402      	add	r2, r0
 800632e:	9805      	ldr	r0, [sp, #20]
 8006330:	4298      	cmp	r0, r3
 8006332:	4441      	add	r1, r8
 8006334:	f47f af7b 	bne.w	800622e <neai_classification+0x4ce>
 8006338:	9b04      	ldr	r3, [sp, #16]
 800633a:	eddf 8a45 	vldr	s17, [pc, #276]	@ 8006450 <neai_classification+0x6f0>
 800633e:	edd3 7a00 	vldr	s15, [r3]
 8006342:	edd3 6a01 	vldr	s13, [r3, #4]
 8006346:	ed93 7a02 	vldr	s14, [r3, #8]
 800634a:	ed93 8a04 	vldr	s16, [r3, #16]
 800634e:	eef4 7ae6 	vcmpe.f32	s15, s13
 8006352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006356:	bf58      	it	pl
 8006358:	eef0 6a67 	vmovpl.f32	s13, s15
 800635c:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8006360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006364:	edd3 7a03 	vldr	s15, [r3, #12]
 8006368:	bfd8      	it	le
 800636a:	eeb0 7a66 	vmovle.f32	s14, s13
 800636e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006376:	bfd8      	it	le
 8006378:	eef0 7a47 	vmovle.f32	s15, s14
 800637c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8006380:	e9dd 6909 	ldrd	r6, r9, [sp, #36]	@ 0x24
 8006384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006388:	bfd8      	it	le
 800638a:	eeb0 8a67 	vmovle.f32	s16, s15
 800638e:	eeb2 9a00 	vmov.f32	s18, #32	@ 0x41000000  8.0
 8006392:	ed96 0a00 	vldr	s0, [r6]
 8006396:	ee30 0a48 	vsub.f32	s0, s0, s16
 800639a:	ee20 0a09 	vmul.f32	s0, s0, s18
 800639e:	f000 f8f3 	bl	8006588 <expf>
 80063a2:	9b05      	ldr	r3, [sp, #20]
 80063a4:	eca6 0a01 	vstmia	r6!, {s0}
 80063a8:	429e      	cmp	r6, r3
 80063aa:	ee78 8a80 	vadd.f32	s17, s17, s0
 80063ae:	d1f0      	bne.n	8006392 <neai_classification+0x632>
 80063b0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80063b4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 80063b8:	9b04      	ldr	r3, [sp, #16]
 80063ba:	9a08      	ldr	r2, [sp, #32]
 80063bc:	edd3 5a00 	vldr	s11, [r3]
 80063c0:	edd3 6a01 	vldr	s13, [r3, #4]
 80063c4:	ed93 7a02 	vldr	s14, [r3, #8]
 80063c8:	ed93 6a03 	vldr	s12, [r3, #12]
 80063cc:	ed93 5a04 	vldr	s10, [r3, #16]
 80063d0:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80063d4:	ee67 5aa5 	vmul.f32	s11, s15, s11
 80063d8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80063dc:	eef4 6ae5 	vcmpe.f32	s13, s11
 80063e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80063e4:	edc3 6a01 	vstr	s13, [r3, #4]
 80063e8:	ee27 6a86 	vmul.f32	s12, s15, s12
 80063ec:	bfd8      	it	le
 80063ee:	eef0 6a65 	vmovle.f32	s13, s11
 80063f2:	ee67 7a85 	vmul.f32	s15, s15, s10
 80063f6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80063fa:	ed83 7a02 	vstr	s14, [r3, #8]
 80063fe:	ed83 6a03 	vstr	s12, [r3, #12]
 8006402:	edc3 5a00 	vstr	s11, [r3]
 8006406:	edc3 7a04 	vstr	s15, [r3, #16]
 800640a:	bfd4      	ite	le
 800640c:	2300      	movle	r3, #0
 800640e:	2301      	movgt	r3, #1
 8006410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006414:	bf58      	it	pl
 8006416:	eeb0 7a66 	vmovpl.f32	s14, s13
 800641a:	eeb4 7ac6 	vcmpe.f32	s14, s12
 800641e:	bf48      	it	mi
 8006420:	2302      	movmi	r3, #2
 8006422:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006426:	bf58      	it	pl
 8006428:	eeb0 6a47 	vmovpl.f32	s12, s14
 800642c:	eef4 7a46 	vcmp.f32	s15, s12
 8006430:	bf48      	it	mi
 8006432:	2303      	movmi	r3, #3
 8006434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006438:	bfc8      	it	gt
 800643a:	2304      	movgt	r3, #4
 800643c:	3301      	adds	r3, #1
 800643e:	8013      	strh	r3, [r2, #0]
 8006440:	4648      	mov	r0, r9
 8006442:	b00f      	add	sp, #60	@ 0x3c
 8006444:	ecbd 8b08 	vpop	{d8-d11}
 8006448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800644c:	200057e8 	.word	0x200057e8
 8006450:	00000000 	.word	0x00000000
 8006454:	200057ec 	.word	0x200057ec
 8006458:	43400000 	.word	0x43400000
 800645c:	200030bc 	.word	0x200030bc
 8006460:	200030c8 	.word	0x200030c8
 8006464:	200030b8 	.word	0x200030b8
 8006468:	200030a8 	.word	0x200030a8
 800646c:	200030a4 	.word	0x200030a4
 8006470:	200030ac 	.word	0x200030ac
 8006474:	200030b0 	.word	0x200030b0
 8006478:	200030b4 	.word	0x200030b4
 800647c:	00000000 	.word	0x00000000
 8006480:	3001      	adds	r0, #1
 8006482:	2803      	cmp	r0, #3
 8006484:	f43f add7 	beq.w	8006036 <neai_classification+0x2d6>
 8006488:	f04f 0900 	mov.w	r9, #0
 800648c:	eec9 8a8a 	vdiv.f32	s17, s19, s20
 8006490:	46c8      	mov	r8, r9
 8006492:	e4cb      	b.n	8005e2c <neai_classification+0xcc>
 8006494:	eeb1 7ae7 	vsqrt.f32	s14, s15
 8006498:	429d      	cmp	r5, r3
 800649a:	ed03 7a01 	vstr	s14, [r3, #-4]
 800649e:	f47f adab 	bne.w	8005ff8 <neai_classification+0x298>
 80064a2:	e5b5      	b.n	8006010 <neai_classification+0x2b0>
 80064a4:	2e01      	cmp	r6, #1
 80064a6:	bf08      	it	eq
 80064a8:	f04f 0900 	moveq.w	r9, #0
 80064ac:	f43f ad7d 	beq.w	8005faa <neai_classification+0x24a>
 80064b0:	f8dd 9008 	ldr.w	r9, [sp, #8]
 80064b4:	2400      	movs	r4, #0
 80064b6:	e4c3      	b.n	8005e40 <neai_classification+0xe0>
 80064b8:	edd9 7a00 	vldr	s15, [r9]
 80064bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064c0:	eef8 5a67 	vcvt.f32.u32	s11, s15
 80064c4:	eef4 5ae6 	vcmpe.f32	s11, s13
 80064c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80064cc:	f53f aed5 	bmi.w	800627a <neai_classification+0x51a>
 80064d0:	e700      	b.n	80062d4 <neai_classification+0x574>
 80064d2:	490b      	ldr	r1, [pc, #44]	@ (8006500 <neai_classification+0x7a0>)
 80064d4:	480b      	ldr	r0, [pc, #44]	@ (8006504 <neai_classification+0x7a4>)
 80064d6:	4c0b      	ldr	r4, [pc, #44]	@ (8006504 <neai_classification+0x7a4>)
 80064d8:	0092      	lsls	r2, r2, #2
 80064da:	f000 f847 	bl	800656c <memcpy>
 80064de:	e666      	b.n	80061ae <neai_classification+0x44e>
 80064e0:	4c08      	ldr	r4, [pc, #32]	@ (8006504 <neai_classification+0x7a4>)
 80064e2:	e664      	b.n	80061ae <neai_classification+0x44e>
 80064e4:	f000 f886 	bl	80065f4 <sqrtf>
 80064e8:	ee38 8a2a 	vadd.f32	s16, s16, s21
 80064ec:	eeb1 9a40 	vneg.f32	s18, s0
 80064f0:	ee28 0a28 	vmul.f32	s0, s16, s17
 80064f4:	e54c      	b.n	8005f90 <neai_classification+0x230>
 80064f6:	f000 f87d 	bl	80065f4 <sqrtf>
 80064fa:	eeb0 8a40 	vmov.f32	s16, s0
 80064fe:	e549      	b.n	8005f94 <neai_classification+0x234>
 8006500:	200030d8 	.word	0x200030d8
 8006504:	200057e8 	.word	0x200057e8

08006508 <memset>:
 8006508:	4402      	add	r2, r0
 800650a:	4603      	mov	r3, r0
 800650c:	4293      	cmp	r3, r2
 800650e:	d100      	bne.n	8006512 <memset+0xa>
 8006510:	4770      	bx	lr
 8006512:	f803 1b01 	strb.w	r1, [r3], #1
 8006516:	e7f9      	b.n	800650c <memset+0x4>

08006518 <__errno>:
 8006518:	4b01      	ldr	r3, [pc, #4]	@ (8006520 <__errno+0x8>)
 800651a:	6818      	ldr	r0, [r3, #0]
 800651c:	4770      	bx	lr
 800651e:	bf00      	nop
 8006520:	2000000c 	.word	0x2000000c

08006524 <__libc_init_array>:
 8006524:	b570      	push	{r4, r5, r6, lr}
 8006526:	4d0d      	ldr	r5, [pc, #52]	@ (800655c <__libc_init_array+0x38>)
 8006528:	4c0d      	ldr	r4, [pc, #52]	@ (8006560 <__libc_init_array+0x3c>)
 800652a:	1b64      	subs	r4, r4, r5
 800652c:	10a4      	asrs	r4, r4, #2
 800652e:	2600      	movs	r6, #0
 8006530:	42a6      	cmp	r6, r4
 8006532:	d109      	bne.n	8006548 <__libc_init_array+0x24>
 8006534:	4d0b      	ldr	r5, [pc, #44]	@ (8006564 <__libc_init_array+0x40>)
 8006536:	4c0c      	ldr	r4, [pc, #48]	@ (8006568 <__libc_init_array+0x44>)
 8006538:	f000 f9b6 	bl	80068a8 <_init>
 800653c:	1b64      	subs	r4, r4, r5
 800653e:	10a4      	asrs	r4, r4, #2
 8006540:	2600      	movs	r6, #0
 8006542:	42a6      	cmp	r6, r4
 8006544:	d105      	bne.n	8006552 <__libc_init_array+0x2e>
 8006546:	bd70      	pop	{r4, r5, r6, pc}
 8006548:	f855 3b04 	ldr.w	r3, [r5], #4
 800654c:	4798      	blx	r3
 800654e:	3601      	adds	r6, #1
 8006550:	e7ee      	b.n	8006530 <__libc_init_array+0xc>
 8006552:	f855 3b04 	ldr.w	r3, [r5], #4
 8006556:	4798      	blx	r3
 8006558:	3601      	adds	r6, #1
 800655a:	e7f2      	b.n	8006542 <__libc_init_array+0x1e>
 800655c:	080173f8 	.word	0x080173f8
 8006560:	080173f8 	.word	0x080173f8
 8006564:	080173f8 	.word	0x080173f8
 8006568:	080173fc 	.word	0x080173fc

0800656c <memcpy>:
 800656c:	440a      	add	r2, r1
 800656e:	4291      	cmp	r1, r2
 8006570:	f100 33ff 	add.w	r3, r0, #4294967295
 8006574:	d100      	bne.n	8006578 <memcpy+0xc>
 8006576:	4770      	bx	lr
 8006578:	b510      	push	{r4, lr}
 800657a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800657e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006582:	4291      	cmp	r1, r2
 8006584:	d1f9      	bne.n	800657a <memcpy+0xe>
 8006586:	bd10      	pop	{r4, pc}

08006588 <expf>:
 8006588:	b508      	push	{r3, lr}
 800658a:	ed2d 8b02 	vpush	{d8}
 800658e:	eef0 8a40 	vmov.f32	s17, s0
 8006592:	f000 f895 	bl	80066c0 <__ieee754_expf>
 8006596:	eeb0 8a40 	vmov.f32	s16, s0
 800659a:	eeb0 0a68 	vmov.f32	s0, s17
 800659e:	f000 f847 	bl	8006630 <finitef>
 80065a2:	b160      	cbz	r0, 80065be <expf+0x36>
 80065a4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 80065e4 <expf+0x5c>
 80065a8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80065ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b0:	dd0a      	ble.n	80065c8 <expf+0x40>
 80065b2:	f7ff ffb1 	bl	8006518 <__errno>
 80065b6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 80065e8 <expf+0x60>
 80065ba:	2322      	movs	r3, #34	@ 0x22
 80065bc:	6003      	str	r3, [r0, #0]
 80065be:	eeb0 0a48 	vmov.f32	s0, s16
 80065c2:	ecbd 8b02 	vpop	{d8}
 80065c6:	bd08      	pop	{r3, pc}
 80065c8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 80065ec <expf+0x64>
 80065cc:	eef4 8ae7 	vcmpe.f32	s17, s15
 80065d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d4:	d5f3      	bpl.n	80065be <expf+0x36>
 80065d6:	f7ff ff9f 	bl	8006518 <__errno>
 80065da:	2322      	movs	r3, #34	@ 0x22
 80065dc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 80065f0 <expf+0x68>
 80065e0:	6003      	str	r3, [r0, #0]
 80065e2:	e7ec      	b.n	80065be <expf+0x36>
 80065e4:	42b17217 	.word	0x42b17217
 80065e8:	7f800000 	.word	0x7f800000
 80065ec:	c2cff1b5 	.word	0xc2cff1b5
 80065f0:	00000000 	.word	0x00000000

080065f4 <sqrtf>:
 80065f4:	b508      	push	{r3, lr}
 80065f6:	ed2d 8b02 	vpush	{d8}
 80065fa:	eeb0 8a40 	vmov.f32	s16, s0
 80065fe:	f000 f85b 	bl	80066b8 <__ieee754_sqrtf>
 8006602:	eeb4 8a48 	vcmp.f32	s16, s16
 8006606:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800660a:	d60c      	bvs.n	8006626 <sqrtf+0x32>
 800660c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800662c <sqrtf+0x38>
 8006610:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006614:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006618:	d505      	bpl.n	8006626 <sqrtf+0x32>
 800661a:	f7ff ff7d 	bl	8006518 <__errno>
 800661e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8006622:	2321      	movs	r3, #33	@ 0x21
 8006624:	6003      	str	r3, [r0, #0]
 8006626:	ecbd 8b02 	vpop	{d8}
 800662a:	bd08      	pop	{r3, pc}
 800662c:	00000000 	.word	0x00000000

08006630 <finitef>:
 8006630:	ee10 3a10 	vmov	r3, s0
 8006634:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8006638:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800663c:	bfac      	ite	ge
 800663e:	2000      	movge	r0, #0
 8006640:	2001      	movlt	r0, #1
 8006642:	4770      	bx	lr

08006644 <fminf>:
 8006644:	b508      	push	{r3, lr}
 8006646:	ed2d 8b02 	vpush	{d8}
 800664a:	eeb0 8a40 	vmov.f32	s16, s0
 800664e:	eef0 8a60 	vmov.f32	s17, s1
 8006652:	f000 f815 	bl	8006680 <__fpclassifyf>
 8006656:	b930      	cbnz	r0, 8006666 <fminf+0x22>
 8006658:	eeb0 8a68 	vmov.f32	s16, s17
 800665c:	eeb0 0a48 	vmov.f32	s0, s16
 8006660:	ecbd 8b02 	vpop	{d8}
 8006664:	bd08      	pop	{r3, pc}
 8006666:	eeb0 0a68 	vmov.f32	s0, s17
 800666a:	f000 f809 	bl	8006680 <__fpclassifyf>
 800666e:	2800      	cmp	r0, #0
 8006670:	d0f4      	beq.n	800665c <fminf+0x18>
 8006672:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8006676:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800667a:	d5ed      	bpl.n	8006658 <fminf+0x14>
 800667c:	e7ee      	b.n	800665c <fminf+0x18>
	...

08006680 <__fpclassifyf>:
 8006680:	ee10 3a10 	vmov	r3, s0
 8006684:	f033 4000 	bics.w	r0, r3, #2147483648	@ 0x80000000
 8006688:	d00d      	beq.n	80066a6 <__fpclassifyf+0x26>
 800668a:	f5a0 0300 	sub.w	r3, r0, #8388608	@ 0x800000
 800668e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8006692:	d30a      	bcc.n	80066aa <__fpclassifyf+0x2a>
 8006694:	4b07      	ldr	r3, [pc, #28]	@ (80066b4 <__fpclassifyf+0x34>)
 8006696:	1e42      	subs	r2, r0, #1
 8006698:	429a      	cmp	r2, r3
 800669a:	d908      	bls.n	80066ae <__fpclassifyf+0x2e>
 800669c:	f1a0 43ff 	sub.w	r3, r0, #2139095040	@ 0x7f800000
 80066a0:	4258      	negs	r0, r3
 80066a2:	4158      	adcs	r0, r3
 80066a4:	4770      	bx	lr
 80066a6:	2002      	movs	r0, #2
 80066a8:	4770      	bx	lr
 80066aa:	2004      	movs	r0, #4
 80066ac:	4770      	bx	lr
 80066ae:	2003      	movs	r0, #3
 80066b0:	4770      	bx	lr
 80066b2:	bf00      	nop
 80066b4:	007ffffe 	.word	0x007ffffe

080066b8 <__ieee754_sqrtf>:
 80066b8:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80066bc:	4770      	bx	lr
	...

080066c0 <__ieee754_expf>:
 80066c0:	ee10 2a10 	vmov	r2, s0
 80066c4:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 80066c8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80066cc:	d902      	bls.n	80066d4 <__ieee754_expf+0x14>
 80066ce:	ee30 0a00 	vadd.f32	s0, s0, s0
 80066d2:	4770      	bx	lr
 80066d4:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80066d8:	d106      	bne.n	80066e8 <__ieee754_expf+0x28>
 80066da:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8006814 <__ieee754_expf+0x154>
 80066de:	2900      	cmp	r1, #0
 80066e0:	bf18      	it	ne
 80066e2:	eeb0 0a67 	vmovne.f32	s0, s15
 80066e6:	4770      	bx	lr
 80066e8:	484b      	ldr	r0, [pc, #300]	@ (8006818 <__ieee754_expf+0x158>)
 80066ea:	4282      	cmp	r2, r0
 80066ec:	dd02      	ble.n	80066f4 <__ieee754_expf+0x34>
 80066ee:	2000      	movs	r0, #0
 80066f0:	f000 b8d4 	b.w	800689c <__math_oflowf>
 80066f4:	2a00      	cmp	r2, #0
 80066f6:	da05      	bge.n	8006704 <__ieee754_expf+0x44>
 80066f8:	4a48      	ldr	r2, [pc, #288]	@ (800681c <__ieee754_expf+0x15c>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d902      	bls.n	8006704 <__ieee754_expf+0x44>
 80066fe:	2000      	movs	r0, #0
 8006700:	f000 b8c6 	b.w	8006890 <__math_uflowf>
 8006704:	4a46      	ldr	r2, [pc, #280]	@ (8006820 <__ieee754_expf+0x160>)
 8006706:	4293      	cmp	r3, r2
 8006708:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 800670c:	d952      	bls.n	80067b4 <__ieee754_expf+0xf4>
 800670e:	4a45      	ldr	r2, [pc, #276]	@ (8006824 <__ieee754_expf+0x164>)
 8006710:	4293      	cmp	r3, r2
 8006712:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8006716:	d834      	bhi.n	8006782 <__ieee754_expf+0xc2>
 8006718:	4b43      	ldr	r3, [pc, #268]	@ (8006828 <__ieee754_expf+0x168>)
 800671a:	4413      	add	r3, r2
 800671c:	ed93 7a00 	vldr	s14, [r3]
 8006720:	4b42      	ldr	r3, [pc, #264]	@ (800682c <__ieee754_expf+0x16c>)
 8006722:	4413      	add	r3, r2
 8006724:	ee30 7a47 	vsub.f32	s14, s0, s14
 8006728:	f081 0201 	eor.w	r2, r1, #1
 800672c:	edd3 7a00 	vldr	s15, [r3]
 8006730:	1a52      	subs	r2, r2, r1
 8006732:	ee37 0a67 	vsub.f32	s0, s14, s15
 8006736:	ee20 6a00 	vmul.f32	s12, s0, s0
 800673a:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8006830 <__ieee754_expf+0x170>
 800673e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8006834 <__ieee754_expf+0x174>
 8006742:	eee6 6a05 	vfma.f32	s13, s12, s10
 8006746:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8006838 <__ieee754_expf+0x178>
 800674a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800674e:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800683c <__ieee754_expf+0x17c>
 8006752:	eee5 6a06 	vfma.f32	s13, s10, s12
 8006756:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8006840 <__ieee754_expf+0x180>
 800675a:	eea6 5a86 	vfma.f32	s10, s13, s12
 800675e:	eef0 6a40 	vmov.f32	s13, s0
 8006762:	eee5 6a46 	vfms.f32	s13, s10, s12
 8006766:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 800676a:	ee20 5a26 	vmul.f32	s10, s0, s13
 800676e:	bb92      	cbnz	r2, 80067d6 <__ieee754_expf+0x116>
 8006770:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8006774:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8006778:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800677c:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8006780:	4770      	bx	lr
 8006782:	4b30      	ldr	r3, [pc, #192]	@ (8006844 <__ieee754_expf+0x184>)
 8006784:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8006848 <__ieee754_expf+0x188>
 8006788:	eddf 6a30 	vldr	s13, [pc, #192]	@ 800684c <__ieee754_expf+0x18c>
 800678c:	4413      	add	r3, r2
 800678e:	edd3 7a00 	vldr	s15, [r3]
 8006792:	eee0 7a07 	vfma.f32	s15, s0, s14
 8006796:	eeb0 7a40 	vmov.f32	s14, s0
 800679a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800679e:	ee17 2a90 	vmov	r2, s15
 80067a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80067a6:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80067aa:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8006850 <__ieee754_expf+0x190>
 80067ae:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80067b2:	e7be      	b.n	8006732 <__ieee754_expf+0x72>
 80067b4:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 80067b8:	d20b      	bcs.n	80067d2 <__ieee754_expf+0x112>
 80067ba:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8006854 <__ieee754_expf+0x194>
 80067be:	ee70 6a26 	vadd.f32	s13, s0, s13
 80067c2:	eef4 6ae5 	vcmpe.f32	s13, s11
 80067c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80067ca:	dd02      	ble.n	80067d2 <__ieee754_expf+0x112>
 80067cc:	ee30 0a25 	vadd.f32	s0, s0, s11
 80067d0:	4770      	bx	lr
 80067d2:	2200      	movs	r2, #0
 80067d4:	e7af      	b.n	8006736 <__ieee754_expf+0x76>
 80067d6:	ee36 6a66 	vsub.f32	s12, s12, s13
 80067da:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 80067de:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80067e2:	bfb8      	it	lt
 80067e4:	3264      	addlt	r2, #100	@ 0x64
 80067e6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80067ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80067ee:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80067f2:	ee17 3a90 	vmov	r3, s15
 80067f6:	bfab      	itete	ge
 80067f8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80067fc:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8006800:	ee00 3a10 	vmovge	s0, r3
 8006804:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8006858 <__ieee754_expf+0x198>
 8006808:	bfbc      	itt	lt
 800680a:	ee00 3a10 	vmovlt	s0, r3
 800680e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8006812:	4770      	bx	lr
 8006814:	00000000 	.word	0x00000000
 8006818:	42b17217 	.word	0x42b17217
 800681c:	42cff1b5 	.word	0x42cff1b5
 8006820:	3eb17218 	.word	0x3eb17218
 8006824:	3f851591 	.word	0x3f851591
 8006828:	080173e0 	.word	0x080173e0
 800682c:	080173d8 	.word	0x080173d8
 8006830:	3331bb4c 	.word	0x3331bb4c
 8006834:	b5ddea0e 	.word	0xb5ddea0e
 8006838:	388ab355 	.word	0x388ab355
 800683c:	bb360b61 	.word	0xbb360b61
 8006840:	3e2aaaab 	.word	0x3e2aaaab
 8006844:	080173e8 	.word	0x080173e8
 8006848:	3fb8aa3b 	.word	0x3fb8aa3b
 800684c:	3f317180 	.word	0x3f317180
 8006850:	3717f7d1 	.word	0x3717f7d1
 8006854:	7149f2ca 	.word	0x7149f2ca
 8006858:	0d800000 	.word	0x0d800000

0800685c <with_errnof>:
 800685c:	b510      	push	{r4, lr}
 800685e:	ed2d 8b02 	vpush	{d8}
 8006862:	eeb0 8a40 	vmov.f32	s16, s0
 8006866:	4604      	mov	r4, r0
 8006868:	f7ff fe56 	bl	8006518 <__errno>
 800686c:	eeb0 0a48 	vmov.f32	s0, s16
 8006870:	ecbd 8b02 	vpop	{d8}
 8006874:	6004      	str	r4, [r0, #0]
 8006876:	bd10      	pop	{r4, pc}

08006878 <xflowf>:
 8006878:	b130      	cbz	r0, 8006888 <xflowf+0x10>
 800687a:	eef1 7a40 	vneg.f32	s15, s0
 800687e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8006882:	2022      	movs	r0, #34	@ 0x22
 8006884:	f7ff bfea 	b.w	800685c <with_errnof>
 8006888:	eef0 7a40 	vmov.f32	s15, s0
 800688c:	e7f7      	b.n	800687e <xflowf+0x6>
	...

08006890 <__math_uflowf>:
 8006890:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8006898 <__math_uflowf+0x8>
 8006894:	f7ff bff0 	b.w	8006878 <xflowf>
 8006898:	10000000 	.word	0x10000000

0800689c <__math_oflowf>:
 800689c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80068a4 <__math_oflowf+0x8>
 80068a0:	f7ff bfea 	b.w	8006878 <xflowf>
 80068a4:	70000000 	.word	0x70000000

080068a8 <_init>:
 80068a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068aa:	bf00      	nop
 80068ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ae:	bc08      	pop	{r3}
 80068b0:	469e      	mov	lr, r3
 80068b2:	4770      	bx	lr

080068b4 <_fini>:
 80068b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068b6:	bf00      	nop
 80068b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80068ba:	bc08      	pop	{r3}
 80068bc:	469e      	mov	lr, r3
 80068be:	4770      	bx	lr
