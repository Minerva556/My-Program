#include "gpio.h"
void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  __HAL_RCC_GPIOB_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOG_CLK_ENABLE();
  HAL_PWREx_EnableVddIO2();
  __HAL_RCC_GPIOF_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_5, GPIO_PIN_RESET);
  GPIO_InitStruct.Pin = GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
}
#include "iis3dwb.h"
IIS3DWB_CommonDrv_t IIS3DWB_COMMON_Driver =
{
  IIS3DWB_Init,
  IIS3DWB_DeInit,
  IIS3DWB_ReadID,
  IIS3DWB_GetCapabilities,
};
IIS3DWB_ACC_Drv_t IIS3DWB_ACC_Driver =
{
  IIS3DWB_ACC_Enable,
  IIS3DWB_ACC_Disable,
  IIS3DWB_ACC_GetSensitivity,
  IIS3DWB_ACC_GetOutputDataRate,
  IIS3DWB_ACC_SetOutputDataRate,
  IIS3DWB_ACC_GetFullScale,
  IIS3DWB_ACC_SetFullScale,
  IIS3DWB_ACC_GetAxes,
  IIS3DWB_ACC_GetAxesRaw,
};
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length);
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length);
int32_t IIS3DWB_RegisterBusIO(IIS3DWB_Object_t *pObj, IIS3DWB_IO_t *pIO)
{
  int32_t ret;
  if (pObj == NULL)
  {
    ret = IIS3DWB_ERROR;
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
    pObj->IO.DeInit    = pIO->DeInit;
    pObj->IO.BusType   = pIO->BusType;
    pObj->IO.Address   = pIO->Address;
    pObj->IO.WriteReg  = pIO->WriteReg;
    pObj->IO.ReadReg   = pIO->ReadReg;
    pObj->IO.GetTick   = pIO->GetTick;
    pObj->Ctx.read_reg  = ReadRegWrap;
    pObj->Ctx.write_reg = WriteRegWrap;
    pObj->Ctx.mdelay    = pIO->Delay;
    pObj->Ctx.handle   = pObj;
    if (pObj->IO.Init != NULL)
    {
      ret = pObj->IO.Init();
    }
    else
    {
      ret = IIS3DWB_ERROR;
    }
  }
  return ret;
}
int32_t IIS3DWB_Init(IIS3DWB_Object_t *pObj)
{
  if (iis3dwb_reset_set(&(pObj->Ctx),PROPERTY_ENABLE) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), IIS3DWB_BYPASS_MODE) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), IIS3DWB_2g) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  pObj->is_initialized = 1;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_DeInit(IIS3DWB_Object_t *pObj)
{
  if (IIS3DWB_ACC_Disable(pObj) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  pObj->is_initialized = 0;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ReadID(IIS3DWB_Object_t *pObj, uint8_t *Id)
{
  if (iis3dwb_device_id_get(&(pObj->Ctx), Id) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_GetCapabilities(IIS3DWB_Object_t *pObj, IIS3DWB_Capabilities_t *Capabilities)
{
  (void)(pObj);
  Capabilities->Acc          = 1;
  Capabilities->Gyro         = 0;
  Capabilities->Magneto      = 0;
  Capabilities->LowPower     = 0;
  Capabilities->GyroMaxFS    = 0;
  Capabilities->AccMaxFS     = 16;
  Capabilities->MagMaxFS     = 0;
  Capabilities->GyroMaxOdr   = 0.0f;
  Capabilities->AccMaxOdr    = 26700.0f;
  Capabilities->MagMaxOdr    = 0.0f;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Enable(IIS3DWB_Object_t *pObj)
{
  if (pObj->acc_is_enabled == 1U)
  {
    return IIS3DWB_OK;
  }
  pObj->acc_is_enabled = 1;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Disable(IIS3DWB_Object_t *pObj)
{
  if (pObj->acc_is_enabled == 0U)
  {
    return IIS3DWB_OK;
  }
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), IIS3DWB_XL_ODR_OFF) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  pObj->acc_is_enabled = 0;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_GetSensitivity(IIS3DWB_Object_t *pObj, float *Sensitivity)
{
  int32_t ret = IIS3DWB_OK;
  iis3dwb_fs_xl_t full_scale;
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &full_scale) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  switch (full_scale)
  {
  case IIS3DWB_2g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_2G_LOPOW1_MODE;
    break;
  case IIS3DWB_4g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_4G_LOPOW1_MODE;
    break;
  case IIS3DWB_8g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_8G_LOPOW1_MODE;
    break;
  case IIS3DWB_16g:
    *Sensitivity = IIS3DWB_ACC_SENSITIVITY_FOR_FS_16G_LOPOW1_MODE;
    break;
  default:
    *Sensitivity = -1.0f;
    ret = IIS3DWB_ERROR;
    break;
  }
  return ret;
}
int32_t IIS3DWB_ACC_GetOutputDataRate(IIS3DWB_Object_t *pObj, float *odr)
{
  int32_t ret = IIS3DWB_OK;
  iis3dwb_odr_xl_t odr_low_level;
  if (iis3dwb_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  switch (odr_low_level)
  {
  case IIS3DWB_XL_ODR_OFF:
    *odr =  0.0f;
    break;
  case IIS3DWB_XL_ODR_26k7Hz:
    *odr = 26700.0f;
    break;
  default:
    *odr = -1.0f;
    ret = IIS3DWB_ERROR;
    break;
  }
  return ret;
}
int32_t IIS3DWB_ACC_SetOutputDataRate(IIS3DWB_Object_t *pObj, float Odr)
{
  iis3dwb_odr_xl_t new_odr;
  new_odr = (Odr <=    1.0f) ? IIS3DWB_XL_ODR_OFF             
          :                    IIS3DWB_XL_ODR_26k7Hz;
  if (iis3dwb_xl_data_rate_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_GetFullScale(IIS3DWB_Object_t *pObj, int32_t *FullScale)
{
  int32_t ret = IIS3DWB_OK;
  iis3dwb_fs_xl_t fs_low_level;
  if (iis3dwb_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  switch (fs_low_level)
  {
    case IIS3DWB_2g:
      *FullScale =  2;
      break;
    case IIS3DWB_4g:
      *FullScale =  4;
      break;
    case IIS3DWB_8g:
      *FullScale =  8;
      break;
    case IIS3DWB_16g:
      *FullScale = 16;
      break;
    default:
      *FullScale = -1;
      ret = IIS3DWB_ERROR;
      break;
  }
  return ret;
}
int32_t IIS3DWB_ACC_SetFullScale(IIS3DWB_Object_t *pObj, int32_t FullScale)
{
  iis3dwb_fs_xl_t new_fs;
  new_fs = (FullScale <= 2) ? IIS3DWB_2g
         : (FullScale <= 4) ? IIS3DWB_4g
         : (FullScale <= 8) ? IIS3DWB_8g
         :                    IIS3DWB_16g;
  if (iis3dwb_xl_full_scale_set(&(pObj->Ctx), new_fs) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_GetAxesRaw(IIS3DWB_Object_t *pObj, IIS3DWB_AxesRaw_t *Value)
{
  iis3dwb_axis3bit16_t data_raw;
  int32_t ret = IIS3DWB_OK;
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  Value->x = data_raw.i16bit[0];
  Value->y = data_raw.i16bit[1];
  Value->z = data_raw.i16bit[2];
  return ret;
}
int32_t IIS3DWB_ACC_GetAxes(IIS3DWB_Object_t *pObj, IIS3DWB_Axes_t *Acceleration)
{
  iis3dwb_axis3bit16_t data_raw;
  float sensitivity = 0.0f;
  if (iis3dwb_acceleration_raw_get(&(pObj->Ctx), data_raw.i16bit) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (IIS3DWB_ACC_GetSensitivity(pObj, &sensitivity) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
  Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
  Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
  return IIS3DWB_OK;
}
int32_t IIS3DWB_Read_Reg(IIS3DWB_Object_t *pObj, uint8_t Reg, uint8_t *Data)
{
  if (iis3dwb_read_reg(&(pObj->Ctx), Reg, Data, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_Write_Reg(IIS3DWB_Object_t *pObj, uint8_t Reg, uint8_t Data)
{
  if (iis3dwb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Enable_Wake_Up_Detection(IIS3DWB_Object_t *pObj)
{
  int32_t ret = IIS3DWB_OK;
  iis3dwb_pin_int1_route_t val;
  if (iis3dwb_wkup_dur_set(&(pObj->Ctx), 0x00) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_wkup_threshold_set(&(pObj->Ctx), 0x02) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_pin_int1_route_get(&(pObj->Ctx), &val) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  val.wake_up = PROPERTY_ENABLE;
  if (iis3dwb_pin_int1_route_set(&(pObj->Ctx), &val) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return ret;
}
int32_t IIS3DWB_ACC_Disable_Wake_Up_Detection(IIS3DWB_Object_t *pObj)
{
  iis3dwb_pin_int1_route_t val1;
  iis3dwb_pin_int2_route_t val2;
  if (iis3dwb_pin_int1_route_get(&(pObj->Ctx), &val1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  val1.wake_up = PROPERTY_DISABLE;
  if (iis3dwb_pin_int1_route_set(&(pObj->Ctx), &val1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_pin_int2_route_get(&(pObj->Ctx), &val2) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  val2.wake_up = PROPERTY_DISABLE;
  if (iis3dwb_pin_int2_route_set(&(pObj->Ctx), &val2) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_wkup_threshold_set(&(pObj->Ctx), 0x00) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_wkup_dur_set(&(pObj->Ctx), 0x00) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Set_Wake_Up_Threshold(IIS3DWB_Object_t *pObj, uint8_t Threshold)
{
  if (iis3dwb_wkup_threshold_set(&(pObj->Ctx), Threshold) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Set_Wake_Up_Duration(IIS3DWB_Object_t *pObj, uint8_t Duration)
{
  if (iis3dwb_wkup_dur_set(&(pObj->Ctx), Duration) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Set_Sleep_Duration(IIS3DWB_Object_t *pObj, uint8_t Duration)
{
  if (iis3dwb_act_sleep_dur_set(&(pObj->Ctx), Duration) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Get_Event_Status(IIS3DWB_Object_t *pObj, IIS3DWB_Event_Status_t *Status)
{
  iis3dwb_wake_up_src_t wake_up_src;
  iis3dwb_md1_cfg_t md1_cfg;
  iis3dwb_md2_cfg_t md2_cfg;
  iis3dwb_int1_ctrl_t int1_ctrl;
  (void)memset((void *)Status, 0x0, sizeof(IIS3DWB_Event_Status_t));
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_MD2_CFG, (uint8_t *)&md2_cfg, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
  {
    if (wake_up_src.wu_ia == 1U)
    {
      Status->WakeUpStatus = 1;
    }
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Get_DRDY_Status(IIS3DWB_Object_t *pObj, uint8_t *Status)
{
  if (iis3dwb_xl_flag_data_ready_get(&(pObj->Ctx), Status) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_ACC_Get_Init_Status(IIS3DWB_Object_t *pObj, uint8_t *Status)
{
  if (pObj == NULL)
  {
    return IIS3DWB_ERROR;
  }
  *Status = pObj->is_initialized;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_Filter_Set(IIS3DWB_Object_t *pObj, iis3dwb_filt_xl_en_t bandwidth)
{
  if (iis3dwb_xl_filt_path_on_out_set(&(pObj->Ctx), bandwidth) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_Set_Drdy_Mode(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  if (iis3dwb_data_ready_mode_set(&(pObj->Ctx), (iis3dwb_dataready_pulsed_t)Status) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_INT1_Set_Drdy(IIS3DWB_Object_t *pObj, uint8_t Status)
{  
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  reg.int1_ctrl.int1_drdy_xl = Status;
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_INT1_Set_FIFO_Full(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  reg.int1_ctrl.int1_fifo_full = Status;
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_INT2_Set_Drdy(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT2_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  reg.int2_ctrl.int2_drdy_xl = Status;
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_INT2_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_INT2_Set_FIFO_Full(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT2_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  reg.int2_ctrl.int2_fifo_full = (uint8_t) Status; 
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_INT2_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_INT2_Set_FIFO_Threshold(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT2_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  reg.int2_ctrl.int2_fifo_th = (uint8_t) Status; 
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_INT2_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_INT1_Set_FIFO_Threshold(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  reg.int1_ctrl.int1_fifo_th = (uint8_t) Status; 
  if (iis3dwb_write_reg(&(pObj->Ctx), IIS3DWB_INT1_CTRL, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_Reset(IIS3DWB_Object_t *pObj)
{
  iis3dwb_reset_set(&(pObj->Ctx), 1);
  return 0; 
}
int32_t IIS3DWB_FIFO_Set_Watermark_Level(IIS3DWB_Object_t *pObj, uint16_t Watermark)
{
  if (iis3dwb_fifo_watermark_set(&(pObj->Ctx), Watermark) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Set_Stop_On_Fth(IIS3DWB_Object_t *pObj, uint8_t Status)
{
  if (iis3dwb_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Set_BDR(IIS3DWB_Object_t *pObj, float Bdr)
{
  iis3dwb_bdr_xl_t new_odr;
  new_odr = (Bdr <= 1.0f) ? IIS3DWB_XL_NOT_BATCHED
            :               IIS3DWB_XL_BATCHED_AT_26k7Hz;
  if (iis3dwb_fifo_xl_batch_set(&(pObj->Ctx), new_odr) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Set_TS_Decimation(IIS3DWB_Object_t *pObj, uint8_t decimation)
{
  if (iis3dwb_fifo_timestamp_batch_set(&(pObj->Ctx), (iis3dwb_fifo_timestamp_batch_t)decimation) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Set_T_BDR(IIS3DWB_Object_t *pObj, uint8_t bdr)
{
  if (iis3dwb_fifo_temp_batch_set(&(pObj->Ctx), (iis3dwb_odr_t_batch_t)bdr) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Read(IIS3DWB_Object_t *pObj, uint8_t *pBuff, uint16_t Watermark)
{
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_FIFO_DATA_OUT_TAG, pBuff, (Watermark * 7)) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Set_Mode(IIS3DWB_Object_t *pObj, uint8_t mode)
{
  int32_t ret = IIS3DWB_OK;
  switch ((iis3dwb_fifo_mode_t)mode)
  {
  case IIS3DWB_BYPASS_MODE:
  case IIS3DWB_FIFO_MODE:
  case IIS3DWB_STREAM_TO_FIFO_MODE:
  case IIS3DWB_BYPASS_TO_STREAM_MODE:
  case IIS3DWB_STREAM_MODE:
  case IIS3DWB_BYPASS_TO_FIFO_MODE:
    break;
  default:
    ret = IIS3DWB_ERROR;
    break;
  }
  if (ret == IIS3DWB_ERROR)
  {
    return ret;
  }
  if (iis3dwb_fifo_mode_set(&(pObj->Ctx), (iis3dwb_fifo_mode_t)mode) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return ret;
}
int32_t IIS3DWB_FIFO_Get_Full_Status(IIS3DWB_Object_t *pObj, uint8_t *Status)
{
  iis3dwb_reg_t reg;
  if (iis3dwb_read_reg(&(pObj->Ctx), IIS3DWB_FIFO_STATUS2, &reg.byte, 1) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  *Status = reg.fifo_status2.fifo_full_ia;
  return IIS3DWB_OK;
}
int32_t IIS3DWB_FIFO_Get_Num_Samples(IIS3DWB_Object_t *pObj, uint16_t *NumSamples)
{
  if (iis3dwb_fifo_data_level_get(&(pObj->Ctx), NumSamples) != IIS3DWB_OK)
  {
    return IIS3DWB_ERROR;
  }
  return IIS3DWB_OK;
}
static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
}
static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
{
  IIS3DWB_Object_t *pObj = (IIS3DWB_Object_t *)Handle;
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
}
#include "spi.h"
SPI_HandleTypeDef hspi3;
void MX_SPI3_Init(void)
{
  hspi3.Instance = SPI3;
  hspi3.Init.Mode = SPI_MODE_MASTER;
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi3.Init.NSS = SPI_NSS_SOFT;
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi3.Init.CRCPolynomial = 7;
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
  {
    Error_Handler();
  }
}
void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(spiHandle->Instance==SPI3)
  {
    __HAL_RCC_SPI3_CLK_ENABLE();
    __HAL_RCC_GPIOB_CLK_ENABLE();
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
    HAL_NVIC_SetPriority(SPI3_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
  }
}
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{
  if(spiHandle->Instance==SPI3)
  {
    __HAL_RCC_SPI3_CLK_DISABLE();
    HAL_GPIO_DeInit(GPIOB, GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_3);
    HAL_NVIC_DisableIRQ(SPI3_IRQn);
  }
}
#include "main.h"
void HAL_MspInit(void)
{
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();
}
#include "main.h"
#include "stm32l4xx_it.h"
extern SPI_HandleTypeDef hspi3;
extern UART_HandleTypeDef huart1;
void NMI_Handler(void)
{
   while (1)
  {
  }
}
void HardFault_Handler(void)
{
  while (1)
  {
  }
}
void MemManage_Handler(void)
{
  while (1)
  {
  }
}
void BusFault_Handler(void)
{
  while (1)
  {
  }
}
void UsageFault_Handler(void)
{
  while (1)
  {
  }
}
void SVC_Handler(void)
{
}
void DebugMon_Handler(void)
{
}
void PendSV_Handler(void)
{
}
void SysTick_Handler(void)
{
  HAL_IncTick();
}
void USART1_IRQHandler(void)
{
  HAL_UART_IRQHandler(&huart1);
}
void SPI3_IRQHandler(void)
{
  HAL_SPI_IRQHandler(&hspi3);
}
#include "main.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"
void SystemClock_Config(void);
void iis3dwb_read_data_polling(void);
int main(void)
{
  HAL_Init();
  SystemClock_Config();
  MX_GPIO_Init();
  MX_SPI3_Init();
  MX_USART1_UART_Init();
  while (1)
  {
	  iis3dwb_read_data_polling();
  }
}
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
  {
    Error_Handler();
  }
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 60;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}
void Error_Handler(void)
{
  __disable_irq();
  while (1)
  {
  }
}
#ifdef  USE_FULL_ASSERT
void assert_failed(uint8_t *file, uint32_t line)
{
}
#endif
#include "stm32l4xx.h"
#if !defined  (HSE_VALUE)
  #define HSE_VALUE    8000000U  
#endif 
#if !defined  (MSI_VALUE)
  #define MSI_VALUE    4000000U  
#endif 
#if !defined  (HSI_VALUE)
  #define HSI_VALUE    16000000U 
#endif 
#if defined(USER_VECT_TAB_ADDRESS)
#if defined(VECT_TAB_SRAM)
#define VECT_TAB_BASE_ADDRESS   SRAM1_BASE      
#define VECT_TAB_OFFSET         0x00000000U     
#else
#define VECT_TAB_BASE_ADDRESS   FLASH_BASE      
#define VECT_TAB_OFFSET         0x00000000U     
#endif 
#endif 
  uint32_t SystemCoreClock = 4000000U;
  const uint8_t  AHBPrescTable[16] = {0U, 0U, 0U, 0U, 0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U, 6U, 7U, 8U, 9U};
  const uint8_t  APBPrescTable[8] =  {0U, 0U, 0U, 0U, 1U, 2U, 3U, 4U};
  const uint32_t MSIRangeTable[12] = {100000U,   200000U,   400000U,   800000U,  1000000U,  2000000U, \
                                      4000000U, 8000000U, 16000000U, 24000000U, 32000000U, 48000000U};
void SystemInit(void)
{
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  
#endif
}
void SystemCoreClockUpdate(void)
{
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;
  if ((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
  { 
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
  }
  else
  { 
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
  }
  msirange = MSIRangeTable[msirange];
  switch (RCC->CFGR & RCC_CFGR_SWS)
  {
    case 0x00:  
      SystemCoreClock = msirange;
      break;
    case 0x04:  
      SystemCoreClock = HSI_VALUE;
      break;
    case 0x08:  
      SystemCoreClock = HSE_VALUE;
      break;
    case 0x0C:  
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
      switch (pllsource)
      {
        case 0x02:  
          pllvco = (HSI_VALUE / pllm);
          break;
        case 0x03:  
          pllvco = (HSE_VALUE / pllm);
          break;
        default:    
          pllvco = (msirange / pllm);
          break;
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
      SystemCoreClock = pllvco/pllr;
      break;
    default:
      SystemCoreClock = msirange;
      break;
  }
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
  SystemCoreClock >>= tmp;
}
#include "usart.h"
UART_HandleTypeDef huart1;
void MX_USART1_UART_Init(void)
{
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 115200;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
  {
    Error_Handler();
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
}
void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
  if(uartHandle->Instance==USART1)
  {
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
    {
      Error_Handler();
    }
    __HAL_RCC_USART1_CLK_ENABLE();
    __HAL_RCC_GPIOG_CLK_ENABLE();
    HAL_PWREx_EnableVddIO2();
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART1_IRQn);
  }
}
void HAL_UART_MspDeInit(UART_HandleTypeDef* uartHandle)
{
  if(uartHandle->Instance==USART1)
  {
    __HAL_RCC_USART1_CLK_DISABLE();
    HAL_GPIO_DeInit(GPIOG, GPIO_PIN_10|GPIO_PIN_9);
    HAL_NVIC_DisableIRQ(USART1_IRQn);
  }
}
#include <errno.h>
#include <stdint.h>
static uint8_t *__sbrk_heap_end = NULL;
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; 
  extern uint8_t _estack; 
  extern uint32_t _Min_Stack_Size; 
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;
  if (NULL == __sbrk_heap_end)
  {
    __sbrk_heap_end = &_end;
  }
  if (__sbrk_heap_end + incr > max_heap)
  {
    errno = ENOMEM;
    return (void *)-1;
  }
  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;
  return (void *)prev_heap_end;
}
#include <sys/stat.h>
#include <stdlib.h>
#include <errno.h>
#include <stdio.h>
#include <signal.h>
#include <time.h>
#include <sys/time.h>
#include <sys/times.h>
extern int __io_putchar(int ch) __attribute__((weak));
extern int __io_getchar(void) __attribute__((weak));
char *__env[1] = { 0 };
char **environ = __env;
void initialise_monitor_handles()
{
}
int _getpid(void)
{
  return 1;
}
int _kill(int pid, int sig)
{
  (void)pid;
  (void)sig;
  errno = EINVAL;
  return -1;
}
void _exit (int status)
{
  _kill(status, -1);
  while (1) {}    
}
__attribute__((weak)) int _read(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
    *ptr++ = __io_getchar();
  }
  return len;
}
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
  (void)file;
  int DataIdx;
  for (DataIdx = 0; DataIdx < len; DataIdx++)
  {
    __io_putchar(*ptr++);
  }
  return len;
}
int _close(int file)
{
  (void)file;
  return -1;
}
int _fstat(int file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
  return 0;
}
int _isatty(int file)
{
  (void)file;
  return 1;
}
int _lseek(int file, int ptr, int dir)
{
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
}
int _open(char *path, int flags, ...)
{
  (void)path;
  (void)flags;
  return -1;
}
int _wait(int *status)
{
  (void)status;
  errno = ECHILD;
  return -1;
}
int _unlink(char *name)
{
  (void)name;
  errno = ENOENT;
  return -1;
}
int _times(struct tms *buf)
{
  (void)buf;
  return -1;
}
int _stat(char *file, struct stat *st)
{
  (void)file;
  st->st_mode = S_IFCHR;
  return 0;
}
int _link(char *old, char *new)
{
  (void)old;
  (void)new;
  errno = EMLINK;
  return -1;
}
int _fork(void)
{
  errno = EAGAIN;
  return -1;
}
int _execve(char *name, char **argv, char **env)
{
  (void)name;
  (void)argv;
  (void)env;
  errno = ENOMEM;
  return -1;
}
#include "iis3dwb_reg.h"
int32_t iis3dwb_read_reg(stmdev_ctx_t *ctx, uint8_t reg,
                         uint8_t *data,
                         uint16_t len)
{
  int32_t ret;
  ret = ctx->read_reg(ctx->handle, reg, data, len);
  return ret;
}
int32_t iis3dwb_write_reg(stmdev_ctx_t *ctx, uint8_t reg,
                          uint8_t *data,
                          uint16_t len)
{
  int32_t ret;
  ret = ctx->write_reg(ctx->handle, reg, data, len);
  return ret;
}
static void bytecpy(uint8_t *target, uint8_t *source)
{
  if ((target != NULL) && (source != NULL))
  {
    *target = *source;
  }
}
float_t iis3dwb_from_fs2g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 0.061f);
}
float_t iis3dwb_from_fs4g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 0.122f);
}
float_t iis3dwb_from_fs8g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 0.244f);
}
float_t iis3dwb_from_fs16g_to_mg(int16_t lsb)
{
  return ((float_t)lsb * 0.488f);
}
float_t iis3dwb_from_lsb_to_celsius(int16_t lsb)
{
  return (((float_t)lsb / 256.0f) + 25.0f);
}
float_t iis3dwb_from_lsb_to_nsec(int32_t lsb)
{
  return ((float_t)lsb * 25000.0f);
}
int32_t iis3dwb_xl_full_scale_set(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t val)
{
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  if (ret == 0)
  {
    ctrl1_xl.fs_xl = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_full_scale_get(stmdev_ctx_t *ctx,
                                  iis3dwb_fs_xl_t *val)
{
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  switch (ctrl1_xl.fs_xl)
  {
    case IIS3DWB_2g:
      *val = IIS3DWB_2g;
      break;
    case IIS3DWB_16g:
      *val = IIS3DWB_16g;
      break;
    case IIS3DWB_4g:
      *val = IIS3DWB_4g;
      break;
    case IIS3DWB_8g:
      *val = IIS3DWB_8g;
      break;
    default:
      *val = IIS3DWB_2g;
      break;
  }
  return ret;
}
int32_t iis3dwb_xl_data_rate_set(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t val)
{
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  if (ret == 0)
  {
    ctrl1_xl.xl_en = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL,
                            (uint8_t *)&ctrl1_xl, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_data_rate_get(stmdev_ctx_t *ctx,
                                 iis3dwb_odr_xl_t *val)
{
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  switch (ctrl1_xl.xl_en)
  {
    case IIS3DWB_XL_ODR_OFF:
      *val = IIS3DWB_XL_ODR_OFF;
      break;
    case IIS3DWB_XL_ODR_26k7Hz:
      *val = IIS3DWB_XL_ODR_26k7Hz;
      break;
    default:
      *val = IIS3DWB_XL_ODR_OFF;
      break;
  }
  return ret;
}
int32_t iis3dwb_block_data_update_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.bdu = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_block_data_update_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.bdu;
  return ret;
}
int32_t iis3dwb_xl_offset_weight_set(stmdev_ctx_t *ctx,
                                     iis3dwb_usr_off_w_t val)
{
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  if (ret == 0)
  {
    ctrl6_c.usr_off_w = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_offset_weight_get(stmdev_ctx_t *ctx,
                                     iis3dwb_usr_off_w_t *val)
{
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  switch (ctrl6_c.usr_off_w)
  {
    case IIS3DWB_LSb_1mg:
      *val = IIS3DWB_LSb_1mg;
      break;
    case IIS3DWB_LSb_16mg:
      *val = IIS3DWB_LSb_16mg;
      break;
    default:
      *val = IIS3DWB_LSb_1mg;
      break;
  }
  return ret;
}
int32_t iis3dwb_xl_axis_selection_set(stmdev_ctx_t *ctx,
                                      iis3dwb_xl_axis_sel_t val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  if (ret == 0)
  {
    ctrl4_c._1ax_to_3regout = ((uint8_t)val & 0x10U) >> 4;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  }
  if (ret == 0)
  {
    ctrl6_c.xl_axis_sel = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_axis_selection_get(stmdev_ctx_t *ctx,
                                      iis3dwb_xl_axis_sel_t *val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  iis3dwb_ctrl6_c_t ctrl6_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL6_C, (uint8_t *)&ctrl6_c, 1);
  }
  switch ((ctrl4_c._1ax_to_3regout << 4) + ctrl6_c.xl_axis_sel)
  {
    case IIS3DWB_ENABLE_ALL:
      *val = IIS3DWB_ENABLE_ALL;
      break;
    case IIS3DWB_ONLY_X_ON_ONE_OUT_REG:
      *val = IIS3DWB_ONLY_X_ON_ONE_OUT_REG;
      break;
    case IIS3DWB_ONLY_Y_ON_ONE_OUT_REG:
      *val = IIS3DWB_ONLY_Y_ON_ONE_OUT_REG;
      break;
    case IIS3DWB_ONLY_Z_ON_ONE_OUT_REG:
      *val = IIS3DWB_ONLY_Z_ON_ONE_OUT_REG;
      break;
    case IIS3DWB_ONLY_X_ON_ALL_OUT_REG:
      *val = IIS3DWB_ONLY_X_ON_ALL_OUT_REG;
      break;
    case IIS3DWB_ONLY_Y_ON_ALL_OUT_REG:
      *val = IIS3DWB_ONLY_Y_ON_ALL_OUT_REG;
      break;
    case IIS3DWB_ONLY_Z_ON_ALL_OUT_REG:
      *val = IIS3DWB_ONLY_Z_ON_ALL_OUT_REG;
      break;
    default:
      *val = IIS3DWB_ENABLE_ALL;
      break;
  }
  return ret;
}
int32_t iis3dwb_all_sources_get(stmdev_ctx_t *ctx,
                                iis3dwb_all_sources_t *val)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_ALL_INT_SRC,
                         (uint8_t *)&val->all_int_src, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_SRC,
                           (uint8_t *)&val->wake_up_src, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
                           (uint8_t *)&val->status_reg, 1);
  }
  return ret;
}
int32_t iis3dwb_status_reg_get(stmdev_ctx_t *ctx,
                               iis3dwb_status_reg_t *val)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG, (uint8_t *) val, 1);
  return ret;
}
int32_t iis3dwb_xl_flag_data_ready_get(stmdev_ctx_t *ctx,
                                       uint8_t *val)
{
  iis3dwb_status_reg_t status_reg;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.xlda;
  return ret;
}
int32_t iis3dwb_temp_flag_data_ready_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
  iis3dwb_status_reg_t status_reg;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_STATUS_REG,
                         (uint8_t *)&status_reg, 1);
  *val = status_reg.tda;
  return ret;
}
int32_t iis3dwb_xl_usr_offset_x_set(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_write_reg(ctx, IIS3DWB_X_OFS_USR, buff, 1);
  return ret;
}
int32_t iis3dwb_xl_usr_offset_x_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_X_OFS_USR, buff, 1);
  return ret;
}
int32_t iis3dwb_xl_usr_offset_y_set(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_write_reg(ctx, IIS3DWB_Y_OFS_USR, buff, 1);
  return ret;
}
int32_t iis3dwb_xl_usr_offset_y_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_Y_OFS_USR, buff, 1);
  return ret;
}
int32_t iis3dwb_xl_usr_offset_z_set(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_write_reg(ctx, IIS3DWB_Z_OFS_USR, buff, 1);
  return ret;
}
int32_t iis3dwb_xl_usr_offset_z_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_Z_OFS_USR, buff, 1);
  return ret;
}
int32_t iis3dwb_timestamp_rst(stmdev_ctx_t *ctx)
{
  uint8_t rst_val = 0xAA;
  return iis3dwb_write_reg(ctx, IIS3DWB_TIMESTAMP2, &rst_val, 1);
}
int32_t iis3dwb_timestamp_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl10_c_t ctrl10_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL10_C, (uint8_t *)&ctrl10_c, 1);
  if (ret == 0)
  {
    ctrl10_c.timestamp_en = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL10_C,
                            (uint8_t *)&ctrl10_c, 1);
  }
  return ret;
}
int32_t iis3dwb_timestamp_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl10_c_t ctrl10_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL10_C, (uint8_t *)&ctrl10_c, 1);
  *val = ctrl10_c.timestamp_en;
  return ret;
}
int32_t iis3dwb_timestamp_raw_get(stmdev_ctx_t *ctx, uint32_t *val)
{
  uint8_t buff[4];
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_TIMESTAMP0, buff, 4);
  *val = buff[3];
  *val = (*val * 256U) +  buff[2];
  *val = (*val * 256U) +  buff[1];
  *val = (*val * 256U) +  buff[0];
  return ret;
}
int32_t iis3dwb_rounding_mode_set(stmdev_ctx_t *ctx,
                                  iis3dwb_rounding_t val)
{
  iis3dwb_ctrl5_c_t ctrl5_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  if (ret == 0)
  {
    ctrl5_c.rounding = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  }
  return ret;
}
int32_t iis3dwb_rounding_mode_get(stmdev_ctx_t *ctx,
                                  iis3dwb_rounding_t *val)
{
  iis3dwb_ctrl5_c_t ctrl5_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  switch (ctrl5_c.rounding)
  {
    case IIS3DWB_NO_ROUND:
      *val = IIS3DWB_NO_ROUND;
      break;
    case IIS3DWB_ROUND:
      *val = IIS3DWB_ROUND;
      break;
    default:
      *val = IIS3DWB_NO_ROUND;
      break;
  }
  return ret;
}
int32_t iis3dwb_temperature_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
  uint8_t buff[2];
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUT_TEMP_L, buff, 2);
  *val = (int16_t)buff[1];
  *val = (*val * 256) + (int16_t)buff[0];
  return ret;
}
int32_t iis3dwb_acceleration_raw_get(stmdev_ctx_t *ctx, int16_t *val)
{
  uint8_t buff[6];
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_OUTX_L_A, buff, 6);
  val[0] = (int16_t)buff[1];
  val[0] = (val[0] * 256) + (int16_t)buff[0];
  val[1] = (int16_t)buff[3];
  val[1] = (val[1] * 256) + (int16_t)buff[2];
  val[2] = (int16_t)buff[5];
  val[2] = (val[2] * 256) + (int16_t)buff[4];
  return ret;
}
int32_t iis3dwb_fifo_out_raw_get(stmdev_ctx_t *ctx, iis3dwb_fifo_out_raw_t *val)
{
  int32_t ret;
  ret = iis3dwb_fifo_out_multi_raw_get(ctx, val, 1);
  return ret;
}
int32_t iis3dwb_fifo_out_multi_raw_get(stmdev_ctx_t *ctx,
                                       iis3dwb_fifo_out_raw_t *fdata,
                                       uint16_t num)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_DATA_OUT_TAG,
                         (uint8_t *)fdata,
                         sizeof(iis3dwb_fifo_out_raw_t) * num);
  return ret;
}
int32_t iis3dwb_fifo_sensor_tag_get(stmdev_ctx_t *ctx,
                                    iis3dwb_fifo_tag_t *val)
{
  iis3dwb_fifo_data_out_tag_t fifo_data_out_tag;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_DATA_OUT_TAG,
                         (uint8_t *)&fifo_data_out_tag, 1);
  switch (fifo_data_out_tag.tag_sensor)
  {
    case IIS3DWB_XL_TAG:
      *val = IIS3DWB_XL_TAG;
      break;
    case IIS3DWB_TEMPERATURE_TAG:
      *val = IIS3DWB_TEMPERATURE_TAG;
      break;
    case IIS3DWB_TIMESTAMP_TAG:
      *val = IIS3DWB_TIMESTAMP_TAG;
      break;
    default:
      *val = IIS3DWB_XL_TAG;
      break;
  }
  return ret;
}
int32_t iis3dwb_odr_cal_reg_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_internal_freq_fine_t internal_freq_fine;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_INTERNAL_FREQ_FINE,
                         (uint8_t *)&internal_freq_fine, 1);
  if (ret == 0)
  {
    internal_freq_fine.freq_fine = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_INTERNAL_FREQ_FINE,
                            (uint8_t *)&internal_freq_fine, 1);
  }
  return ret;
}
int32_t iis3dwb_odr_cal_reg_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_internal_freq_fine_t internal_freq_fine;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_INTERNAL_FREQ_FINE,
                         (uint8_t *)&internal_freq_fine, 1);
  *val = internal_freq_fine.freq_fine;
  return ret;
}
int32_t iis3dwb_data_ready_mode_set(stmdev_ctx_t *ctx,
                                    iis3dwb_dataready_pulsed_t val)
{
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0)
  {
    counter_bdr_reg1.dataready_pulsed = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                            (uint8_t *)&counter_bdr_reg1, 1);
  }
  return ret;
}
int32_t iis3dwb_data_ready_mode_get(stmdev_ctx_t *ctx,
                                    iis3dwb_dataready_pulsed_t *val)
{
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);
  switch (counter_bdr_reg1.dataready_pulsed)
  {
    case IIS3DWB_DRDY_LATCHED:
      *val = IIS3DWB_DRDY_LATCHED;
      break;
    case IIS3DWB_DRDY_PULSED:
      *val = IIS3DWB_DRDY_PULSED;
      break;
    default:
      *val = IIS3DWB_DRDY_LATCHED;
      break;
  }
  return ret;
}
int32_t iis3dwb_device_id_get(stmdev_ctx_t *ctx, uint8_t *buff)
{
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WHO_AM_I, buff, 1);
  return ret;
}
int32_t iis3dwb_reset_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.sw_reset = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_reset_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.sw_reset;
  return ret;
}
int32_t iis3dwb_auto_increment_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.if_inc = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_auto_increment_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.if_inc;
  return ret;
}
int32_t iis3dwb_boot_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.boot = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_boot_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  *val = ctrl3_c.boot;
  return ret;
}
int32_t iis3dwb_xl_self_test_set(stmdev_ctx_t *ctx,
                                 iis3dwb_st_xl_t val)
{
  iis3dwb_ctrl5_c_t ctrl5_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  if (ret == 0)
  {
    ctrl5_c.st_xl = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_self_test_get(stmdev_ctx_t *ctx,
                                 iis3dwb_st_xl_t *val)
{
  iis3dwb_ctrl5_c_t ctrl5_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL5_C, (uint8_t *)&ctrl5_c, 1);
  switch (ctrl5_c.st_xl)
  {
    case IIS3DWB_XL_ST_DISABLE:
      *val = IIS3DWB_XL_ST_DISABLE;
      break;
    case IIS3DWB_XL_ST_POSITIVE:
      *val = IIS3DWB_XL_ST_POSITIVE;
      break;
    case IIS3DWB_XL_ST_NEGATIVE:
      *val = IIS3DWB_XL_ST_NEGATIVE;
      break;
    default:
      *val = IIS3DWB_XL_ST_DISABLE;
      break;
  }
  return ret;
}
int32_t iis3dwb_filter_settling_mask_set(stmdev_ctx_t *ctx,
                                         uint8_t val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  if (ret == 0)
  {
    ctrl4_c.drdy_mask = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }
  return ret;
}
int32_t iis3dwb_filter_settling_mask_get(stmdev_ctx_t *ctx,
                                         uint8_t *val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  *val = ctrl4_c.drdy_mask;
  return ret;
}
int32_t iis3dwb_xl_filt_path_on_out_set(stmdev_ctx_t *ctx,
                                        iis3dwb_filt_xl_en_t val)
{
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  if (ret == 0)
  {
    ctrl1_xl.lpf2_xl_en = ((uint8_t)val & 0x80U) >> 7;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  }
  if (ret == 0)
  {
    ctrl8_xl.fds = ((uint8_t)val & 0x10U) >> 4;
    ctrl8_xl.hp_ref_mode_xl = ((uint8_t)val & 0x20U) >> 5;
    ctrl8_xl.hpcf_xl = (uint8_t)val & 0x07U;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_filt_path_on_out_get(stmdev_ctx_t *ctx,
                                        iis3dwb_filt_xl_en_t *val)
{
  iis3dwb_ctrl1_xl_t ctrl1_xl;
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL1_XL, (uint8_t *)&ctrl1_xl, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  }
  switch ((ctrl1_xl.lpf2_xl_en << 7) + (ctrl8_xl.hp_ref_mode_xl << 5) +
          (ctrl8_xl.fds << 4) + ctrl8_xl.hpcf_xl)
  {
    case IIS3DWB_HP_REF_MODE:
      *val = IIS3DWB_HP_REF_MODE;
      break;
    case IIS3DWB_HP_ODR_DIV_10:
      *val = IIS3DWB_HP_ODR_DIV_10;
      break;
    case IIS3DWB_HP_ODR_DIV_20:
      *val = IIS3DWB_HP_ODR_DIV_20;
      break;
    case IIS3DWB_HP_ODR_DIV_45:
      *val = IIS3DWB_HP_ODR_DIV_45;
      break;
    case IIS3DWB_HP_ODR_DIV_100:
      *val = IIS3DWB_HP_ODR_DIV_100;
      break;
    case IIS3DWB_HP_ODR_DIV_200:
      *val = IIS3DWB_HP_ODR_DIV_200;
      break;
    case IIS3DWB_HP_ODR_DIV_400:
      *val = IIS3DWB_HP_ODR_DIV_400;
      break;
    case IIS3DWB_HP_ODR_DIV_800:
      *val = IIS3DWB_HP_ODR_DIV_800;
      break;
    case IIS3DWB_LP_ODR_DIV_4:
      *val = IIS3DWB_LP_ODR_DIV_4;
      break;
    case IIS3DWB_LP_6k3Hz:
      *val = IIS3DWB_LP_6k3Hz;
      break;
    case IIS3DWB_LP_ODR_DIV_10:
      *val = IIS3DWB_LP_ODR_DIV_10;
      break;
    case IIS3DWB_LP_ODR_DIV_20:
      *val = IIS3DWB_LP_ODR_DIV_20;
      break;
    case IIS3DWB_LP_ODR_DIV_45:
      *val = IIS3DWB_LP_ODR_DIV_45;
      break;
    case IIS3DWB_LP_ODR_DIV_100:
      *val = IIS3DWB_LP_ODR_DIV_100;
      break;
    case IIS3DWB_LP_ODR_DIV_200:
      *val = IIS3DWB_LP_ODR_DIV_200;
      break;
    case IIS3DWB_LP_ODR_DIV_400:
      *val = IIS3DWB_LP_ODR_DIV_400;
      break;
    case IIS3DWB_LP_ODR_DIV_800:
      *val = IIS3DWB_LP_ODR_DIV_800;
      break;
    default:
      *val = IIS3DWB_HP_REF_MODE;
      break;
  }
  return ret;
}
int32_t iis3dwb_xl_fast_settling_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  if (ret == 0)
  {
    ctrl8_xl.fastsettl_mode_xl = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL8_XL,
                            (uint8_t *)&ctrl8_xl, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_fast_settling_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl8_xl_t ctrl8_xl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL8_XL, (uint8_t *)&ctrl8_xl, 1);
  *val = ctrl8_xl.fastsettl_mode_xl;
  return ret;
}
int32_t iis3dwb_xl_hp_path_internal_set(stmdev_ctx_t *ctx,
                                        iis3dwb_slope_fds_t val)
{
  iis3dwb_slope_en_t int_cfg0;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&int_cfg0, 1);
  if (ret == 0)
  {
    int_cfg0.slope_fds = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_SLOPE_EN,
                            (uint8_t *)&int_cfg0, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_hp_path_internal_get(stmdev_ctx_t *ctx,
                                        iis3dwb_slope_fds_t *val)
{
  iis3dwb_slope_en_t int_cfg0;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&int_cfg0, 1);
  switch (int_cfg0.slope_fds)
  {
    case IIS3DWB_USE_SLOPE:
      *val = IIS3DWB_USE_SLOPE;
      break;
    case IIS3DWB_USE_HPF:
      *val = IIS3DWB_USE_HPF;
      break;
    default:
      *val = IIS3DWB_USE_SLOPE;
      break;
  }
  return ret;
}
int32_t iis3dwb_sdo_sa0_mode_set(stmdev_ctx_t *ctx,
                                 iis3dwb_sdo_pu_en_t val)
{
  iis3dwb_pin_ctrl_t pin_ctrl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_PIN_CTRL, (uint8_t *)&pin_ctrl, 1);
  if (ret == 0)
  {
    pin_ctrl.sdo_pu_en = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_PIN_CTRL, (uint8_t *)&pin_ctrl, 1);
  }
  return ret;
}
int32_t iis3dwb_sdo_sa0_mode_get(stmdev_ctx_t *ctx,
                                 iis3dwb_sdo_pu_en_t *val)
{
  iis3dwb_pin_ctrl_t pin_ctrl;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_PIN_CTRL, (uint8_t *)&pin_ctrl, 1);
  switch (pin_ctrl.sdo_pu_en)
  {
    case IIS3DWB_PULL_UP_DISC:
      *val = IIS3DWB_PULL_UP_DISC;
      break;
    case IIS3DWB_PULL_UP_CONNECT:
      *val = IIS3DWB_PULL_UP_CONNECT;
      break;
    default:
      *val = IIS3DWB_PULL_UP_DISC;
      break;
  }
  return ret;
}
int32_t iis3dwb_spi_mode_set(stmdev_ctx_t *ctx, iis3dwb_sim_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.sim = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_spi_mode_get(stmdev_ctx_t *ctx, iis3dwb_sim_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  switch (ctrl3_c.sim)
  {
    case IIS3DWB_SPI_4_WIRE:
      *val = IIS3DWB_SPI_4_WIRE;
      break;
    case IIS3DWB_SPI_3_WIRE:
      *val = IIS3DWB_SPI_3_WIRE;
      break;
    default:
      *val = IIS3DWB_SPI_4_WIRE;
      break;
  }
  return ret;
}
int32_t iis3dwb_i2c_interface_set(stmdev_ctx_t *ctx,
                                  iis3dwb_i2c_disable_t val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  if (ret == 0)
  {
    ctrl4_c.i2c_disable = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }
  return ret;
}
int32_t iis3dwb_i2c_interface_get(stmdev_ctx_t *ctx,
                                  iis3dwb_i2c_disable_t *val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  switch (ctrl4_c.i2c_disable)
  {
    case IIS3DWB_I2C_ENABLE:
      *val = IIS3DWB_I2C_ENABLE;
      break;
    case IIS3DWB_I2C_DISABLE:
      *val = IIS3DWB_I2C_DISABLE;
      break;
    default:
      *val = IIS3DWB_I2C_ENABLE;
      break;
  }
  return ret;
}
int32_t iis3dwb_pin_int1_route_set(stmdev_ctx_t *ctx,
                                   iis3dwb_pin_int1_route_t *val)
{
  iis3dwb_int1_ctrl_t          int1_ctrl;
  iis3dwb_slope_en_t           slope_en;
  iis3dwb_md1_cfg_t            md1_cfg;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  int1_ctrl.int1_drdy_xl       = val->drdy_xl;
  int1_ctrl.int1_boot          = val->boot;
  int1_ctrl.int1_fifo_th       = val->fifo_th;
  int1_ctrl.int1_fifo_ovr      = val->fifo_ovr;
  int1_ctrl.int1_fifo_full     = val->fifo_full;
  int1_ctrl.int1_cnt_bdr       = val->fifo_bdr;
  md1_cfg.int1_wu              = val->wake_up;
  md1_cfg.int1_sleep_change    = val->sleep_change | val->sleep_status;
  slope_en.sleep_status_on_int = val->sleep_status;
  if (ret == 0)
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  return ret;
}
int32_t iis3dwb_pin_int1_route_get(stmdev_ctx_t *ctx,
                                   iis3dwb_pin_int1_route_t *val)
{
  iis3dwb_int1_ctrl_t          int1_ctrl;
  iis3dwb_slope_en_t           slope_en;
  iis3dwb_md1_cfg_t            md1_cfg;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_INT1_CTRL, (uint8_t *)&int1_ctrl, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_MD1_CFG, (uint8_t *)&md1_cfg, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  val->drdy_xl   = int1_ctrl.int1_drdy_xl;
  val->boot      = int1_ctrl.int1_boot;
  val->fifo_th   = int1_ctrl.int1_fifo_th;
  val->fifo_ovr  = int1_ctrl.int1_fifo_ovr;
  val->fifo_full = int1_ctrl.int1_fifo_full;
  val->fifo_bdr  = int1_ctrl.int1_cnt_bdr;
  val->wake_up      = md1_cfg.int1_wu;
  if (slope_en.sleep_status_on_int == PROPERTY_ENABLE)
  {
    val->sleep_status = PROPERTY_ENABLE;
    val->sleep_change = PROPERTY_DISABLE;
  }
  else
  {
    val->sleep_change = md1_cfg.int1_sleep_change;
  }
  return ret;
}
int32_t iis3dwb_pin_int2_route_set(stmdev_ctx_t *ctx,
                                   iis3dwb_pin_int2_route_t *val)
{
  iis3dwb_int2_ctrl_t          int2_ctrl;
  iis3dwb_slope_en_t           slope_en;
  iis3dwb_md2_cfg_t            md2_cfg;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_MD2_CFG, (uint8_t *)&md2_cfg, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  int2_ctrl.int2_drdy_xl       = val->drdy_xl;
  int2_ctrl.int2_drdy_temp     = val->drdy_temp;
  int2_ctrl.int2_fifo_th       = val->fifo_th;
  int2_ctrl.int2_fifo_ovr      = val->fifo_ovr;
  int2_ctrl.int2_fifo_full     = val->fifo_full;
  int2_ctrl.int2_cnt_bdr       = val->fifo_bdr;
  md2_cfg.int2_timestamp       = val->timestamp;
  md2_cfg.int2_wu              = val->wake_up;
  md2_cfg.int2_sleep_change    = val->sleep_change | val->sleep_status;
  slope_en.sleep_status_on_int = val->sleep_status;
  if (ret == 0)
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_MD2_CFG, (uint8_t *)&md2_cfg, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_write_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  return ret;
}
int32_t iis3dwb_pin_int2_route_get(stmdev_ctx_t *ctx,
                                   iis3dwb_pin_int2_route_t *val)
{
  iis3dwb_int2_ctrl_t          int2_ctrl;
  iis3dwb_slope_en_t           slope_en;
  iis3dwb_md2_cfg_t            md2_cfg;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_INT2_CTRL, (uint8_t *)&int2_ctrl, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_MD2_CFG, (uint8_t *)&md2_cfg, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  val->drdy_xl   = int2_ctrl.int2_drdy_xl;
  val->drdy_temp = int2_ctrl.int2_drdy_temp;
  val->fifo_th   = int2_ctrl.int2_fifo_th;
  val->fifo_ovr  = int2_ctrl.int2_fifo_ovr;
  val->fifo_full = int2_ctrl.int2_fifo_full;
  val->fifo_bdr  = int2_ctrl.int2_cnt_bdr;
  val->timestamp  = md2_cfg.int2_timestamp;
  val->wake_up   = md2_cfg.int2_wu;
  if (slope_en.sleep_status_on_int == PROPERTY_ENABLE)
  {
    val->sleep_status = PROPERTY_ENABLE;
    val->sleep_change = PROPERTY_DISABLE;
  }
  else
  {
    val->sleep_change = md2_cfg.int2_sleep_change;
  }
  return ret;
}
int32_t iis3dwb_pin_mode_set(stmdev_ctx_t *ctx, iis3dwb_pp_od_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.pp_od = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_pin_mode_get(stmdev_ctx_t *ctx, iis3dwb_pp_od_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  switch (ctrl3_c.pp_od)
  {
    case IIS3DWB_PUSH_PULL:
      *val = IIS3DWB_PUSH_PULL;
      break;
    case IIS3DWB_OPEN_DRAIN:
      *val = IIS3DWB_OPEN_DRAIN;
      break;
    default:
      *val = IIS3DWB_PUSH_PULL;
      break;
  }
  return ret;
}
int32_t iis3dwb_pin_polarity_set(stmdev_ctx_t *ctx,
                                 iis3dwb_h_lactive_t val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  if (ret == 0)
  {
    ctrl3_c.h_lactive = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  }
  return ret;
}
int32_t iis3dwb_pin_polarity_get(stmdev_ctx_t *ctx,
                                 iis3dwb_h_lactive_t *val)
{
  iis3dwb_ctrl3_c_t ctrl3_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL3_C, (uint8_t *)&ctrl3_c, 1);
  switch (ctrl3_c.h_lactive)
  {
    case IIS3DWB_ACTIVE_HIGH:
      *val = IIS3DWB_ACTIVE_HIGH;
      break;
    case IIS3DWB_ACTIVE_LOW:
      *val = IIS3DWB_ACTIVE_LOW;
      break;
    default:
      *val = IIS3DWB_ACTIVE_HIGH;
      break;
  }
  return ret;
}
int32_t iis3dwb_all_on_int1_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  if (ret == 0)
  {
    ctrl4_c.int2_on_int1 = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  }
  return ret;
}
int32_t iis3dwb_all_on_int1_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_ctrl4_c_t ctrl4_c;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_CTRL4_C, (uint8_t *)&ctrl4_c, 1);
  *val = ctrl4_c.int2_on_int1;
  return ret;
}
int32_t iis3dwb_int_notification_set(stmdev_ctx_t *ctx,
                                     iis3dwb_lir_t val)
{
  iis3dwb_slope_en_t slope_en;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  if (ret == 0)
  {
    slope_en.lir = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  }
  return ret;
}
int32_t iis3dwb_int_notification_get(stmdev_ctx_t *ctx,
                                     iis3dwb_lir_t *val)
{
  iis3dwb_slope_en_t slope_en;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_SLOPE_EN, (uint8_t *)&slope_en, 1);
  switch (slope_en.lir)
  {
    case IIS3DWB_INT_PULSED:
      *val = IIS3DWB_INT_PULSED;
      break;
    case IIS3DWB_INT_LATCHED:
      *val = IIS3DWB_INT_LATCHED;
      break;
    default:
      *val = IIS3DWB_INT_PULSED;
      break;
  }
  return ret;
}
int32_t iis3dwb_wkup_ths_weight_set(stmdev_ctx_t *ctx,
                                    iis3dwb_wake_ths_w_t val)
{
  iis3dwb_wake_up_dur_t wake_up_dur;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);
  if (ret == 0)
  {
    wake_up_dur.wake_ths_w = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                            (uint8_t *)&wake_up_dur, 1);
  }
  return ret;
}
int32_t iis3dwb_wkup_ths_weight_get(stmdev_ctx_t *ctx,
                                    iis3dwb_wake_ths_w_t *val)
{
  iis3dwb_wake_up_dur_t wake_up_dur;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);
  switch (wake_up_dur.wake_ths_w)
  {
    case IIS3DWB_LSb_FS_DIV_64:
      *val = IIS3DWB_LSb_FS_DIV_64;
      break;
    case IIS3DWB_LSb_FS_DIV_256:
      *val = IIS3DWB_LSb_FS_DIV_256;
      break;
    default:
      *val = IIS3DWB_LSb_FS_DIV_64;
      break;
  }
  return ret;
}
int32_t iis3dwb_wkup_threshold_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_interrupts_en_t interrupts_en;
  iis3dwb_wake_up_ths_t wake_up_ths;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_THS,
                         (uint8_t *)&wake_up_ths, 1);
  if (ret == 0)
  {
    wake_up_ths.wk_ths = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_WAKE_UP_THS,
                            (uint8_t *)&wake_up_ths, 1);
  }
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_INTERRUPTS_EN,
                           (uint8_t *)&interrupts_en, 1);
  }
  if (ret == 0)
  {
    interrupts_en.interrupts_enable = PROPERTY_ENABLE;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_INTERRUPTS_EN,
                            (uint8_t *)&interrupts_en, 1);
  }
  return ret;
}
int32_t iis3dwb_wkup_threshold_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_wake_up_ths_t wake_up_ths;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_THS,
                         (uint8_t *)&wake_up_ths, 1);
  *val = wake_up_ths.wk_ths;
  return ret;
}
int32_t iis3dwb_xl_usr_offset_on_wkup_set(stmdev_ctx_t *ctx,
                                          uint8_t val)
{
  iis3dwb_wake_up_ths_t wake_up_ths;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_THS,
                         (uint8_t *)&wake_up_ths, 1);
  if (ret == 0)
  {
    wake_up_ths.usr_off_on_wu = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_WAKE_UP_THS,
                            (uint8_t *)&wake_up_ths, 1);
  }
  return ret;
}
int32_t iis3dwb_xl_usr_offset_on_wkup_get(stmdev_ctx_t *ctx,
                                          uint8_t *val)
{
  iis3dwb_wake_up_ths_t wake_up_ths;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_THS,
                         (uint8_t *)&wake_up_ths, 1);
  *val = wake_up_ths.usr_off_on_wu;
  return ret;
}
int32_t iis3dwb_wkup_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_wake_up_dur_t wake_up_dur;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);
  if (ret == 0)
  {
    wake_up_dur.wake_dur = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                            (uint8_t *)&wake_up_dur, 1);
  }
  return ret;
}
int32_t iis3dwb_wkup_dur_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_wake_up_dur_t wake_up_dur;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);
  *val = wake_up_dur.wake_dur;
  return ret;
}
int32_t iis3dwb_act_sleep_dur_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_wake_up_dur_t wake_up_dur;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);
  if (ret == 0)
  {
    wake_up_dur.sleep_dur = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                            (uint8_t *)&wake_up_dur, 1);
  }
  return ret;
}
int32_t iis3dwb_act_sleep_dur_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_wake_up_dur_t wake_up_dur;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_WAKE_UP_DUR,
                         (uint8_t *)&wake_up_dur, 1);
  *val = wake_up_dur.sleep_dur;
  return ret;
}
int32_t iis3dwb_fifo_watermark_set(stmdev_ctx_t *ctx, uint16_t val)
{
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                         (uint8_t *)&fifo_ctrl2, 1);
  if (ret == 0)
  {
    fifo_ctrl1.wtm = (uint8_t)(0x00FFU & val);
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL1,
                            (uint8_t *)&fifo_ctrl1, 1);
  }
  if (ret == 0)
  {
    fifo_ctrl2.wtm = (uint8_t)((0x0100U & val) >> 8);
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
                            (uint8_t *)&fifo_ctrl2, 1);
  }
  return ret;
}
int32_t iis3dwb_fifo_watermark_get(stmdev_ctx_t *ctx, uint16_t *val)
{
  iis3dwb_fifo_ctrl1_t fifo_ctrl1;
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                         (uint8_t *)&fifo_ctrl2, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL1,
                           (uint8_t *)&fifo_ctrl1, 1);
  }
  *val = fifo_ctrl2.wtm;
  *val = *val << 8;
  *val += fifo_ctrl1.wtm;
  return ret;
}
int32_t iis3dwb_fifo_stop_on_wtm_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                         (uint8_t *)&fifo_ctrl2, 1);
  if (ret == 0)
  {
    fifo_ctrl2.stop_on_wtm = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL2,
                            (uint8_t *)&fifo_ctrl2, 1);
  }
  return ret;
}
int32_t iis3dwb_fifo_stop_on_wtm_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_fifo_ctrl2_t fifo_ctrl2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL2,
                         (uint8_t *)&fifo_ctrl2, 1);
  *val = fifo_ctrl2.stop_on_wtm;
  return ret;
}
int32_t iis3dwb_fifo_xl_batch_set(stmdev_ctx_t *ctx,
                                  iis3dwb_bdr_xl_t val)
{
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
                         (uint8_t *)&fifo_ctrl3, 1);
  if (ret == 0)
  {
    fifo_ctrl3.bdr_xl = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL3,
                            (uint8_t *)&fifo_ctrl3, 1);
  }
  return ret;
}
int32_t iis3dwb_fifo_xl_batch_get(stmdev_ctx_t *ctx,
                                  iis3dwb_bdr_xl_t *val)
{
  iis3dwb_fifo_ctrl3_t fifo_ctrl3;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL3,
                         (uint8_t *)&fifo_ctrl3, 1);
  switch (fifo_ctrl3.bdr_xl)
  {
    case IIS3DWB_XL_NOT_BATCHED:
      *val = IIS3DWB_XL_NOT_BATCHED;
      break;
    case IIS3DWB_XL_BATCHED_AT_26k7Hz:
      *val = IIS3DWB_XL_BATCHED_AT_26k7Hz;
      break;
    default:
      *val = IIS3DWB_XL_NOT_BATCHED;
      break;
  }
  return ret;
}
int32_t iis3dwb_fifo_mode_set(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t val)
{
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);
  if (ret == 0)
  {
    fifo_ctrl4.fifo_mode = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);
  }
  return ret;
}
int32_t iis3dwb_fifo_mode_get(stmdev_ctx_t *ctx,
                              iis3dwb_fifo_mode_t *val)
{
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);
  switch (fifo_ctrl4.fifo_mode)
  {
    case IIS3DWB_BYPASS_MODE:
      *val = IIS3DWB_BYPASS_MODE;
      break;
    case IIS3DWB_FIFO_MODE:
      *val = IIS3DWB_FIFO_MODE;
      break;
    case IIS3DWB_STREAM_TO_FIFO_MODE:
      *val = IIS3DWB_STREAM_TO_FIFO_MODE;
      break;
    case IIS3DWB_BYPASS_TO_STREAM_MODE:
      *val = IIS3DWB_BYPASS_TO_STREAM_MODE;
      break;
    case IIS3DWB_STREAM_MODE:
      *val = IIS3DWB_STREAM_MODE;
      break;
    case IIS3DWB_BYPASS_TO_FIFO_MODE:
      *val = IIS3DWB_BYPASS_TO_FIFO_MODE;
      break;
    default:
      *val = IIS3DWB_BYPASS_MODE;
      break;
  }
  return ret;
}
int32_t iis3dwb_fifo_temp_batch_set(stmdev_ctx_t *ctx,
                                    iis3dwb_odr_t_batch_t val)
{
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);
  if (ret == 0)
  {
    fifo_ctrl4.odr_t_batch = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);
  }
  return ret;
}
int32_t iis3dwb_fifo_temp_batch_get(stmdev_ctx_t *ctx,
                                    iis3dwb_odr_t_batch_t *val)
{
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);
  switch (fifo_ctrl4.odr_t_batch)
  {
    case IIS3DWB_TEMP_NOT_BATCHED:
      *val = IIS3DWB_TEMP_NOT_BATCHED;
      break;
    case IIS3DWB_TEMP_BATCHED_AT_104Hz:
      *val = IIS3DWB_TEMP_BATCHED_AT_104Hz;
      break;
    default:
      *val = IIS3DWB_TEMP_NOT_BATCHED;
      break;
  }
  return ret;
}
int32_t iis3dwb_fifo_timestamp_batch_set(stmdev_ctx_t *ctx,
                                         iis3dwb_fifo_timestamp_batch_t val)
{
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);
  if (ret == 0)
  {
    fifo_ctrl4.odr_ts_batch = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_FIFO_CTRL4,
                            (uint8_t *)&fifo_ctrl4, 1);
  }
  return ret;
}
int32_t iis3dwb_fifo_timestamp_batch_get(stmdev_ctx_t *ctx,
                                         iis3dwb_fifo_timestamp_batch_t *val)
{
  iis3dwb_fifo_ctrl4_t fifo_ctrl4;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_CTRL4,
                         (uint8_t *)&fifo_ctrl4, 1);
  switch (fifo_ctrl4.odr_ts_batch)
  {
    case IIS3DWB_NO_DECIMATION:
      *val = IIS3DWB_NO_DECIMATION;
      break;
    case IIS3DWB_DEC_1:
      *val = IIS3DWB_DEC_1;
      break;
    case IIS3DWB_DEC_8:
      *val = IIS3DWB_DEC_8;
      break;
    case IIS3DWB_DEC_32:
      *val = IIS3DWB_DEC_32;
      break;
    default:
      *val = IIS3DWB_NO_DECIMATION;
      break;
  }
  return ret;
}
int32_t iis3dwb_rst_batch_counter_set(stmdev_ctx_t *ctx, uint8_t val)
{
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0)
  {
    counter_bdr_reg1.rst_counter_bdr = (uint8_t)val;
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                            (uint8_t *)&counter_bdr_reg1, 1);
  }
  return ret;
}
int32_t iis3dwb_rst_batch_counter_get(stmdev_ctx_t *ctx, uint8_t *val)
{
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);
  *val = counter_bdr_reg1.rst_counter_bdr;
  return ret;
}
int32_t iis3dwb_batch_counter_threshold_set(stmdev_ctx_t *ctx,
                                            uint16_t val)
{
  iis3dwb_counter_bdr_reg2_t counter_bdr_reg1;
  iis3dwb_counter_bdr_reg2_t counter_bdr_reg2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0)
  {
    counter_bdr_reg1.cnt_bdr_th = (uint8_t)((0x0700U & val) >> 8);
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                            (uint8_t *)&counter_bdr_reg1, 1);
  }
  if (ret == 0)
  {
    counter_bdr_reg2.cnt_bdr_th = (uint8_t)(0x00FFU & val);
    ret = iis3dwb_write_reg(ctx, IIS3DWB_COUNTER_BDR_REG2,
                            (uint8_t *)&counter_bdr_reg2, 1);
  }
  return ret;
}
int32_t iis3dwb_batch_counter_threshold_get(stmdev_ctx_t *ctx,
                                            uint16_t *val)
{
  iis3dwb_counter_bdr_reg1_t counter_bdr_reg1;
  iis3dwb_counter_bdr_reg2_t counter_bdr_reg2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG1,
                         (uint8_t *)&counter_bdr_reg1, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_COUNTER_BDR_REG2,
                           (uint8_t *)&counter_bdr_reg2, 1);
  }
  *val = counter_bdr_reg1.cnt_bdr_th;
  *val = *val << 8;
  *val += counter_bdr_reg2.cnt_bdr_th;
  return ret;
}
int32_t iis3dwb_fifo_data_level_get(stmdev_ctx_t *ctx, uint16_t *val)
{
  iis3dwb_fifo_status1_t fifo_status1;
  iis3dwb_fifo_status2_t fifo_status2;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_STATUS1,
                         (uint8_t *)&fifo_status1, 1);
  if (ret == 0)
  {
    ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_STATUS2,
                           (uint8_t *)&fifo_status2, 1);
    *val = fifo_status2.diff_fifo;
    *val = *val << 8;
    *val += fifo_status1.diff_fifo;
  }
  return ret;
}
int32_t iis3dwb_fifo_status_get(stmdev_ctx_t *ctx,
                                iis3dwb_fifo_status_t *val)
{
  uint8_t buff[2];
  iis3dwb_fifo_status2_t status;
  int32_t ret;
  ret = iis3dwb_read_reg(ctx, IIS3DWB_FIFO_STATUS1, (uint8_t *)&buff[0], 2);
  bytecpy((uint8_t *)&status, &buff[1]);
  val->fifo_bdr = status.counter_bdr_ia;
  val->fifo_ovr = status.fifo_ovr_ia | status.fifo_ovr_latched;
  val->fifo_full = status.fifo_full_ia;
  val->fifo_th = status.fifo_wtm_ia;
  val->fifo_level = (uint16_t)buff[1] & 0x03U;
  val->fifo_level = (val->fifo_level * 256U) + buff[0];
  return ret;
}
#include <string.h>
#include <stdio.h>
#include "iis3dwb_reg.h"
#include "spi.h"
#include "usart.h"
#include "gpio.h"
#include "NanoEdgeAI.h"
#include "knowledge.h"
#define    BOOT_TIME        10 
#define    CS_up_GPIO_Port  GPIOF
#define    CS_up_Pin        GPIO_PIN_5
uint16_t id_class = 0; 
float input_user_buffer[DATA_INPUT_USER * AXIS_NUMBER]; 
float output_class_buffer[CLASS_NUMBER]; 
const char *id2class[CLASS_NUMBER + 1] = { 
	"unknown",
	"type_4",
	"type_3",
	"type_2",
	"type_1",
	"normal",
};
static int16_t data_raw_acceleration[3];
static float acceleration_mg[3];
static int16_t data_raw_temperature;
static float temperature_degC[1];
static uint8_t whoamI, rst;
static int buffer_index = 0; 
static float data_all[5];
const uint8_t begin[] = {0xAA, 0x55};
const uint8_t end[] = {0x55, 0xAA};
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len);
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len);
static void platform_delay(uint32_t ms);
void fill_buffer(float sample_buffer[]);
void iis3dwb_read_data_polling(void)
{
	enum neai_state error_code = neai_classification_init(knowledge);
	if (error_code != NEAI_OK) {
		unsigned char warning[] = "model init fail...\r\n";
		HAL_UART_Transmit(&huart1, (uint8_t *)warning, sizeof(warning), 0xffff);
		while(1);
	}
  stmdev_ctx_t dev_ctx;
  dev_ctx.write_reg = platform_write;
  dev_ctx.read_reg = platform_read;
  dev_ctx.handle = &hspi3;
  platform_delay(BOOT_TIME);
  iis3dwb_device_id_get(&dev_ctx, &whoamI);
  if (whoamI != IIS3DWB_ID)
      while (1);
  iis3dwb_reset_set(&dev_ctx, PROPERTY_ENABLE);
  do {
     iis3dwb_reset_get(&dev_ctx, &rst);
   } while (rst);
  iis3dwb_block_data_update_set(&dev_ctx, PROPERTY_ENABLE);
  iis3dwb_xl_data_rate_set(&dev_ctx, IIS3DWB_XL_ODR_26k7Hz);
  iis3dwb_xl_full_scale_set(&dev_ctx, IIS3DWB_2g);
  iis3dwb_xl_filt_path_on_out_set(&dev_ctx, IIS3DWB_LP_ODR_DIV_100);
  while (1) {
    uint8_t reg;
    iis3dwb_xl_flag_data_ready_get(&dev_ctx, &reg);
    if (reg) {
      iis3dwb_acceleration_raw_get(&dev_ctx, data_raw_acceleration);
      acceleration_mg[0] =
        iis3dwb_from_fs2g_to_mg(data_raw_acceleration[0]);
      acceleration_mg[1] =
        iis3dwb_from_fs2g_to_mg(data_raw_acceleration[1]);
      acceleration_mg[2] =
        iis3dwb_from_fs2g_to_mg(data_raw_acceleration[2]);
    }
    fill_buffer(input_user_buffer);
    neai_classification(input_user_buffer, output_class_buffer, &id_class);
    iis3dwb_temp_flag_data_ready_get(&dev_ctx, &reg);
    if (reg) {
      iis3dwb_temperature_raw_get(&dev_ctx, &data_raw_temperature);
      temperature_degC[0] = iis3dwb_from_lsb_to_celsius(data_raw_temperature);
    }
    for(int i = 0; i < 5; i++)
    {
    	if(i < 3)
    	{
    		data_all[i] = acceleration_mg[i];
    	}else if(i >= 3 && i < 4)
    	{
    		data_all[i] = temperature_degC[0];
    	}else if(i >= 4 && i < 5)
    	{
    		data_all[i] = (float)id_class;
    	}
    }
    	HAL_UART_Transmit(&huart1, (uint8_t *)begin, sizeof(begin), 0xffff);
    	HAL_UART_Transmit(&huart1, (float *)data_all, sizeof(data_all), 0xffff);
    	HAL_UART_Transmit(&huart1, (uint8_t *)end, sizeof(end), 0xffff);
    	HAL_Delay(200);
  }
}
static int32_t platform_write(void *handle, uint8_t reg, const uint8_t *bufp,
                              uint16_t len)
{
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
    HAL_SPI_Transmit(handle, &reg, 1, 1000);
    HAL_SPI_Transmit(handle, (uint8_t*) bufp, len, 1000);
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
  return 0;
}
static int32_t platform_read(void *handle, uint8_t reg, uint8_t *bufp,
                             uint16_t len)
{
    reg |= 0x80;
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_RESET);
    HAL_SPI_Transmit(handle, &reg, 1, 1000);
    HAL_SPI_Receive(handle, bufp, len, 1000);
    HAL_GPIO_WritePin(CS_up_GPIO_Port, CS_up_Pin, GPIO_PIN_SET);
  return 0;
}
static void platform_delay(uint32_t ms)
{
  HAL_Delay(ms);
}
void fill_buffer(float sample_buffer[])
{
	for(int axis = 0; axis < AXIS_NUMBER; axis++)
	{ 
		sample_buffer[buffer_index] = acceleration_mg[axis] * 0.001f; 
		buffer_index++;
		if (buffer_index >= DATA_INPUT_USER * AXIS_NUMBER)
		{
			buffer_index = 0;
		}
	}
}
